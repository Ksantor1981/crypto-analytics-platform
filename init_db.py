#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from backend.app.core.config import get_settings
from backend.app.models.base import BaseModel
from backend.app.models.user import User, UserRole, SubscriptionPlan, SubscriptionStatus
from backend.app.models.channel import Channel
from backend.app.models.signal import Signal, SignalStatus, SignalDirection
from backend.app.core.security import get_password_hash
from datetime import datetime, timedelta
import random

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    settings = get_settings()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    engine = create_engine(settings.database_url, echo=True)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    BaseModel.metadata.create_all(bind=engine)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            email="test@example.com",
            username="testuser",
            full_name="Test User",
            hashed_password=get_password_hash("password123"),
            is_active=True,
            is_verified=True,
            role=UserRole.PREMIUM_USER,
            subscription_plan=SubscriptionPlan.PREMIUM,
            subscription_status=SubscriptionStatus.ACTIVE,
            channels_limit=50,
            api_calls_limit=1000
        )
        
        db.add(test_user)
        db.commit()
        db.refresh(test_user)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.email}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        channels_data = [
            {
                "username": "crypto_signals_pro",
                "name": "Crypto Signals Pro",
                "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                "category": "premium",
                "expected_accuracy": "85%",
                "subscribers_count": 15000
            },
            {
                "username": "altcoin_trader",
                "name": "Altcoin Trader",
                "description": "–¢–æ—Ä–≥–æ–≤–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–∞–º–∏",
                "category": "altcoins",
                "expected_accuracy": "75%",
                "subscribers_count": 8500
            },
            {
                "username": "bitcoin_master",
                "name": "Bitcoin Master",
                "description": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Bitcoin",
                "category": "bitcoin",
                "expected_accuracy": "80%",
                "subscribers_count": 22000
            },
            {
                "username": "solana_pro",
                "name": "Solana Pro",
                "description": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Solana",
                "category": "solana",
                "expected_accuracy": "90%",
                "subscribers_count": 12000
            },
            {
                "username": "cardano_signals",
                "name": "Cardano Signals",
                "description": "–°–∏–≥–Ω–∞–ª—ã –ø–æ Cardano",
                "category": "cardano",
                "expected_accuracy": "70%",
                "subscribers_count": 6500
            }
        ]
        
        channels = []
        for channel_data in channels_data:
            channel = Channel(
                owner_id=test_user.id,
                **channel_data
            )
            db.add(channel)
            channels.append(channel)
        
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signals_data = [
            {
                "channel_id": channels[0].id,  # Crypto Signals Pro
                "asset": "BTC",
                "symbol": "BTC",
                "direction": SignalDirection.LONG,
                "entry_price": 45000.0,
                "tp1_price": 47000.0,
                "stop_loss": 43000.0,
                "confidence_score": 0.85,
                "status": SignalStatus.PENDING,
                "original_text": "Bitcoin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–≤–µ—Ä—Ö"
            },
            {
                "channel_id": channels[1].id,  # Altcoin Trader
                "asset": "ETH",
                "symbol": "ETH",
                "direction": SignalDirection.SHORT,
                "entry_price": 2800.0,
                "tp1_price": 2650.0,
                "stop_loss": 2900.0,
                "confidence_score": 0.75,
                "status": SignalStatus.TP1_HIT,
                "original_text": "Ethereum —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            },
            {
                "channel_id": channels[2].id,  # Bitcoin Master
                "asset": "ADA",
                "symbol": "ADA",
                "direction": SignalDirection.LONG,
                "entry_price": 0.45,
                "tp1_price": 0.52,
                "stop_loss": 0.42,
                "confidence_score": 0.70,
                "status": SignalStatus.PENDING,
                "original_text": "Cardano –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–±–æ—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"
            },
            {
                "channel_id": channels[3].id,  # Solana Pro
                "asset": "SOL",
                "symbol": "SOL",
                "direction": SignalDirection.SHORT,
                "entry_price": 95.0,
                "tp1_price": 88.0,
                "stop_loss": 98.0,
                "confidence_score": 0.90,
                "status": SignalStatus.TP1_HIT,
                "original_text": "Solana –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–æ—Å—Ç–∞"
            },
            {
                "channel_id": channels[4].id,  # Cardano Signals
                "asset": "DOT",
                "symbol": "DOT",
                "direction": SignalDirection.LONG,
                "entry_price": 6.8,
                "tp1_price": 7.2,
                "stop_loss": 6.5,
                "confidence_score": 0.65,
                "status": SignalStatus.SL_HIT,
                "original_text": "Polkadot —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω"
            },
            {
                "channel_id": channels[0].id,  # Crypto Signals Pro
                "asset": "BTC",
                "symbol": "BTC",
                "direction": SignalDirection.SHORT,
                "entry_price": 46000.0,
                "tp1_price": 44500.0,
                "stop_loss": 46500.0,
                "confidence_score": 0.80,
                "status": SignalStatus.PENDING,
                "original_text": "Bitcoin –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è"
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        current_time = datetime.utcnow()
        for i, signal_data in enumerate(signals_data):
            # –†–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            hours_ago = [2, 6, 1, 12, 24, 0.5][i % len(signals_data)]
            signal_data["created_at"] = current_time - timedelta(hours=hours_ago)
            signal_data["updated_at"] = current_time - timedelta(hours=hours_ago)
            
            signal = Signal(**signal_data)
            db.add(signal)
        
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(signals_data)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.email}")
        print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        print(f"üìà –°–∏–≥–Ω–∞–ª–æ–≤: {len(signals_data)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    init_database()
