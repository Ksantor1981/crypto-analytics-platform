import os
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É backend –≤ –ø—É—Ç—å Python, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
backend_path = Path(__file__).parent / 'backend'
sys.path.insert(0, str(backend_path))

from app.core.database import engine, Base, SessionLocal
from app import models  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º __init__.py, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏
from app.core.security import get_password_hash

def seed_data():
    """Fills the database with dummy data for testing."""
    print("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    db = SessionLocal()
    try:
        # 1. Check if data exists
        if db.query(models.Signal).count() > 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        # 2. Create a dummy user and channel
        test_user = db.query(models.User).filter(models.User.email == "test@example.com").first()
        if not test_user:
            test_user = models.User(
                email="test@example.com",
                username="testuser",
                hashed_password=get_password_hash("password"),
                role=models.UserRole.PRO_USER,
                is_active=True,
                is_verified=True
            )
            db.add(test_user)
            db.commit()
            db.refresh(test_user)

        test_channel = db.query(models.Channel).filter(models.Channel.name == "Test ML Channel").first()
        if not test_channel:
            test_channel = models.Channel(
                name="Test ML Channel",
                telegram_id="-100123456789",
                owner_id=test_user.id
            )
            db.add(test_channel)
            db.commit()
            db.refresh(test_channel)

        # 3. Create dummy signals and results
        signals_to_create = []
        for i in range(25):
            pnl = round(random.uniform(-150.5, 200.5), 2)
            new_signal = models.Signal(
                channel_id=test_channel.id,
                asset=f"ASSET{i}/USDT",
                symbol=f"ASSET{i}USDT",
                direction="LONG" if random.random() > 0.5 else "SHORT",
                entry_price=round(random.uniform(1000, 50000), 2),
                status="TP1_HIT" if pnl > 0 else "SL_HIT"
            )
            
            new_signal.result = models.SignalResult(
                pnl=pnl,
                pnl_percentage=round(random.uniform(-10.0, 15.0), 2),
                is_success=pnl > 0,
                duration_minutes=random.randint(5, 240),
                max_drawdown=round(random.uniform(0.1, 5.0), 2),
                risk_reward_ratio=round(random.uniform(0.5, 3.0), 2)
            )
            signals_to_create.append(new_signal)
        
        db.add_all(signals_to_create)
        db.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(signals_to_create)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.")

    finally:
        db.close()

def main():
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤ –∏—Ö
        # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç (models) —É–∂–µ —Å–¥–µ–ª–∞–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Manage database tables and data.")
    parser.add_argument(
        '--seed',
        action='store_true',
        help='Fill the database with test data after creating tables.'
    )
    args = parser.parse_args()

    main()

    if args.seed:
        seed_data()
