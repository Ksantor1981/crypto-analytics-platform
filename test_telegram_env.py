#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
"""
import os
from pathlib import Path

def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = Path('.env')
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞...")
    
    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value
                print(f"   ‚úÖ {key} = {value[:10]}...")
    
    return True

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   API_ID: {api_id}")
    print(f"   API_HASH: {api_hash[:10] if api_hash else 'None'}...")
    print(f"   PHONE: {phone}")
    
    if not all([api_id, api_hash, phone]):
        print("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return False
    
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å telethon
        try:
            from telethon import TelegramClient
            from telethon.errors import SessionPasswordNeededError
            print("‚úÖ Telethon –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError:
            print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install telethon --user")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient('crypto_signals_session', api_id, api_hash)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        client.connect()
        
        if not client.is_user_authorized():
            print("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            print("–ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
            
            try:
                client.sign_in(phone, code)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
                client.sign_in(password=password)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
        else:
            print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
        test_channels = [
            'CryptoPapa', 'FatPigSignals', 'WallstreetQueenOfficial',
            'RocketWalletSignals', 'BinanceKiller', 'WolfOfTrading'
        ]
        
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º:")
        accessible_channels = []
        
        for channel in test_channels:
            try:
                entity = client.get_entity(channel)
                messages = client.get_messages(entity, limit=1)
                if messages:
                    print(f"   ‚úÖ {channel} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                    accessible_channels.append(channel)
                else:
                    print(f"   ‚ö†Ô∏è {channel} - –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                print(f"   ‚ùå {channel} - –æ—à–∏–±–∫–∞: {str(e)[:50]}")
        
        client.disconnect()
        
        if accessible_channels:
            print(f"\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(accessible_channels)}")
            return True
        else:
            print("\n‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –¢–µ—Å—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å .env –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    if not load_env_file():
        return
    
    if test_telegram_connection():
        print("\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–±–æ—Ä–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python quick_collect.py")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")

if __name__ == '__main__':
    main()
