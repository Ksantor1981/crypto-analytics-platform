#!/usr/bin/env python3
"""
–ñ–∏–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Crypto Analytics Platform
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import httpx
import json
import time
from datetime import datetime
from typing import Dict, Any

class LiveDemo:
    def __init__(self):
        self.backend_url = "http://localhost:8000"
        self.ml_service_url = "http://localhost:8001"
        
    async def demo_real_time_predictions(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print("ü§ñ –ñ–ò–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: ML –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        print("=" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                response = await client.get(f"{self.ml_service_url}/api/v1/predictions/market-data/BTCUSDT")
                
                if response.status_code == 200:
                    market_data = response.json()
                    current_price = market_data.get('current_price', 'N/A')
                    change_24h = market_data.get('change_24h', 'N/A')
                    print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_price}")
                    print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {change_24h}%")
                
                # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                test_signals = [
                    {
                        "asset": "BTCUSDT",
                        "direction": "LONG",
                        "entry_price": 45000.0,
                        "target_price": 47000.0,
                        "stop_loss": 43000.0,
                        "channel_id": 1,
                        "channel_accuracy": 0.85,
                        "confidence": 0.9
                    },
                    {
                        "asset": "ETHUSDT",
                        "direction": "SHORT",
                        "entry_price": 3000.0,
                        "target_price": 2800.0,
                        "stop_loss": 3200.0,
                        "channel_id": 2,
                        "channel_accuracy": 0.72,
                        "confidence": 0.7
                    },
                    {
                        "asset": "SOLUSDT",
                        "direction": "LONG",
                        "entry_price": 100.0,
                        "target_price": 110.0,
                        "stop_loss": 95.0,
                        "channel_id": 3,
                        "channel_accuracy": 0.68,
                        "confidence": 0.6
                    }
                ]
                
                print(f"\nüîÆ –ê–Ω–∞–ª–∏–∑ {len(test_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤...")
                
                for i, signal in enumerate(test_signals, 1):
                    print(f"\nüìä –°–∏–≥–Ω–∞–ª {i}: {signal['asset']} {signal['direction']}")
                    print(f"   –í—Ö–æ–¥: ${signal['entry_price']}")
                    print(f"   –¶–µ–ª—å: ${signal['target_price']}")
                    print(f"   –°—Ç–æ–ø: ${signal['stop_loss']}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    response = await client.post(
                        f"{self.ml_service_url}/api/v1/predictions/predict",
                        json=signal
                    )
                    
                    if response.status_code == 200:
                        prediction = response.json()
                        recommendation = prediction.get('recommendation', 'N/A')
                        confidence = prediction.get('confidence', 'N/A')
                        
                        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        emoji_map = {
                            'BUY': 'üü¢',
                            'SELL': 'üî¥', 
                            'HOLD': 'üü°',
                            'STRONG_BUY': 'üü¢',
                            'STRONG_SELL': 'üî¥'
                        }
                        
                        emoji = emoji_map.get(recommendation, '‚ö™')
                        
                        print(f"   {emoji} ML –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
                        print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞
                        if confidence > 0.8:
                            risk_level = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
                        elif confidence > 0.6:
                            risk_level = "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
                        else:
                            risk_level = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
                        
                        print(f"   ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}")
                        
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    
    async def demo_system_performance(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n‚ö° –ñ–ò–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("=" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞
                print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
                start_time = time.time()
                response = await client.get(f"{self.backend_url}/health")
                backend_time = time.time() - start_time
                
                if response.status_code == 200:
                    print(f"   ‚úÖ Backend: {backend_time:.3f}s")
                else:
                    print(f"   ‚ùå Backend: –æ—à–∏–±–∫–∞ {response.status_code}")
                
                # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML-—Å–µ—Ä–≤–∏—Å–∞
                print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Service...")
                start_time = time.time()
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                ml_time = time.time() - start_time
                
                if response.status_code == 200:
                    print(f"   ‚úÖ ML Service: {ml_time:.3f}s")
                else:
                    print(f"   ‚ùå ML Service: –æ—à–∏–±–∫–∞ {response.status_code}")
                
                # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Database...")
                start_time = time.time()
                response = await client.get(f"{self.backend_url}/api/v1/channels/")
                db_time = time.time() - start_time
                
                if response.status_code in [200, 401, 403]:
                    print(f"   ‚úÖ Database: {db_time:.3f}s")
                else:
                    print(f"   ‚ùå Database: –æ—à–∏–±–∫–∞ {response.status_code}")
                
                # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                total_time = backend_time + ml_time + db_time
                print(f"\nüìä –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time:.3f}s")
                
                if total_time < 0.5:
                    performance_grade = "üéâ –û–¢–õ–ò–ß–ù–û"
                elif total_time < 1.0:
                    performance_grade = "‚úÖ –•–û–†–û–®–û"
                else:
                    performance_grade = "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò"
                
                print(f"üèÜ –û—Ü–µ–Ω–∫–∞: {performance_grade}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
    
    async def demo_error_handling(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüõ°Ô∏è –ñ–ò–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        print("=" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –¢–µ—Å—Ç 404 –æ—à–∏–±–∫–∏
                print("üîç –¢–µ—Å—Ç 404 –æ—à–∏–±–∫–∏...")
                response = await client.get(f"{self.backend_url}/api/v1/nonexistent/")
                if response.status_code == 404:
                    print("   ‚úÖ 404 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                print("üîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json={"invalid": "data"}
                )
                if response.status_code in [422, 400]:
                    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {response.status_code}")
                
                # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ JSON
                print("üîç –¢–µ—Å—Ç JSON –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    content="invalid json"
                )
                if response.status_code in [422, 400]:
                    print("   ‚úÖ JSON –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å JSON: {response.status_code}")
                
                print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {str(e)}")
    
    async def run_live_demo(self):
        """–ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ñ–ò–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRYPTO ANALYTICS PLATFORM")
        print("=" * 60)
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        demos = [
            self.demo_real_time_predictions,
            self.demo_system_performance,
            self.demo_error_handling
        ]
        
        for demo in demos:
            try:
                await demo()
                print("\n" + "-" * 60)
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–º–æ
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {str(e)}")
        
        print("\nüéâ –ñ–ò–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")

async def main():
    demo = LiveDemo()
    await demo.run_live_demo()

if __name__ == "__main__":
    asyncio.run(main()) 