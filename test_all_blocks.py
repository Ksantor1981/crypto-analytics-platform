#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
–ë–ª–æ–∫ 0: –ê—É–¥–∏—Ç –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
–ë–ª–æ–∫ 1: Frontend –∏ MVP
–ë–ª–æ–∫ 2: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
–ë–ª–æ–∫ 3: Core Business Logic –∏ ML
–ë–ª–æ–∫ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import asyncio
import httpx
import json
import time
from datetime import datetime
from typing import Dict, Any

class AllBlocksTester:
    def __init__(self):
        self.backend_url = "http://localhost:8000"
        self.ml_service_url = "http://localhost:8001"
        self.results = {}
        
    async def test_block0_infrastructure(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∞ 0: –ê—É–¥–∏—Ç –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è"""
        print("üèóÔ∏è –¢–ï–°–¢ –ë–õ–û–ö–ê 0: –ê—É–¥–∏—Ç –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è")
        print("-" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞
                response = await client.get(f"{self.backend_url}/health")
                if response.status_code == 200:
                    print("‚úÖ Backend —Å—Ç–∞–±–∏–ª–µ–Ω")
                else:
                    print(f"‚ùå Backend –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω: {response.status_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ML-—Å–µ—Ä–≤–∏—Å–∞
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                if response.status_code == 200:
                    print("‚úÖ ML Service —Å—Ç–∞–±–∏–ª–µ–Ω")
                else:
                    print(f"‚ùå ML Service –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω: {response.status_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                response = await client.get(f"{self.backend_url}/api/v1/channels/")
                if response.status_code in [200, 401, 403]:
                    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω–∞")
                else:
                    print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞: {response.status_code}")
                    return False
                
                print("‚úÖ –ë–ª–æ–∫ 0: –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞")
                self.results['block0'] = True
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∞ 0: {str(e)}")
            self.results['block0'] = False
            return False
    
    async def test_block1_frontend_mvp(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∞ 1: Frontend –∏ MVP"""
        print("\nüé® –¢–ï–°–¢ –ë–õ–û–ö–ê 1: Frontend –∏ MVP")
        print("-" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                endpoints = [
                    "/api/v1/channels/",
                    "/api/v1/signals/", 
                    "/api/v1/users/",
                    "/api/v1/subscriptions/",
                    "/api/v1/payments/"
                ]
                
                working_endpoints = 0
                for endpoint in endpoints:
                    response = await client.get(f"{self.backend_url}{endpoint}")
                    if response.status_code in [200, 401, 403]:
                        working_endpoints += 1
                        print(f"‚úÖ {endpoint}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print(f"‚ùå {endpoint}: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({response.status_code})")
                
                if working_endpoints >= len(endpoints) * 0.8:
                    print(f"‚úÖ –ë–ª–æ–∫ 1: {working_endpoints}/{len(endpoints)} API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
                    self.results['block1'] = True
                    return True
                else:
                    print(f"‚ùå –ë–ª–æ–∫ 1: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
                    self.results['block1'] = False
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∞ 1: {str(e)}")
            self.results['block1'] = False
            return False
    
    async def test_block2_monetization(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∞ 2: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"""
        print("\nüí∞ –¢–ï–°–¢ –ë–õ–û–ö–ê 2: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è")
        print("-" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                payment_endpoints = [
                    "/api/v1/payments/",
                    "/api/v1/subscriptions/"
                ]
                
                working_payment_endpoints = 0
                for endpoint in payment_endpoints:
                    response = await client.get(f"{self.backend_url}{endpoint}")
                    if response.status_code in [200, 401, 403]:
                        working_payment_endpoints += 1
                        print(f"‚úÖ {endpoint}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print(f"‚ùå {endpoint}: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({response.status_code})")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
                if working_payment_endpoints == len(payment_endpoints):
                    print("‚úÖ –ë–ª–æ–∫ 2: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.results['block2'] = True
                    return True
                else:
                    print(f"‚ùå –ë–ª–æ–∫ 2: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π")
                    self.results['block2'] = False
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∞ 2: {str(e)}")
            self.results['block2'] = False
            return False
    
    async def test_block3_ml_business_logic(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∞ 3: Core Business Logic –∏ ML"""
        print("\nü§ñ –¢–ï–°–¢ –ë–õ–û–ö–ê 3: Core Business Logic –∏ ML")
        print("-" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                test_signal = {
                    "asset": "BTCUSDT",
                    "direction": "LONG",
                    "entry_price": 45000.0,
                    "target_price": 47000.0,
                    "stop_loss": 43000.0,
                    "channel_id": 1,
                    "channel_accuracy": 0.75,
                    "confidence": 0.8
                }
                
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json=test_signal
                )
                
                if response.status_code == 200:
                    prediction = response.json()
                    print(f"‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {prediction.get('recommendation', 'N/A')}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 'N/A')}")
                else:
                    print(f"‚ùå ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                response = await client.get(f"{self.ml_service_url}/api/v1/predictions/market-data/BTCUSDT")
                if response.status_code == 200:
                    market_data = response.json()
                    print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
                    print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${market_data.get('current_price', 'N/A')}")
                else:
                    print(f"‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {response.status_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
                response = await client.get(f"{self.ml_service_url}/api/v1/predictions/model/info")
                if response.status_code == 200:
                    model_info = response.json()
                    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
                    print(f"   –í–µ—Ä—Å–∏—è: {model_info.get('model_version', 'N/A')}")
                    print(f"   –¢–∏–ø: {model_info.get('model_type', 'N/A')}")
                else:
                    print(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                    return False
                
                print("‚úÖ –ë–ª–æ–∫ 3: ML –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
                self.results['block3'] = True
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∞ 3: {str(e)}")
            self.results['block3'] = False
            return False
    
    async def test_block4_integration(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∞ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("\nüîó –¢–ï–°–¢ –ë–õ–û–ö–ê 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("-" * 50)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                start_time = time.time()
                response = await client.get(f"{self.backend_url}/health")
                backend_time = time.time() - start_time
                
                start_time = time.time()
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                ml_time = time.time() - start_time
                
                print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
                print(f"   Backend: {backend_time:.3f}s")
                print(f"   ML Service: {ml_time:.3f}s")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
                response = await client.get(f"{self.backend_url}/api/v1/nonexistent/")
                if response.status_code == 404:
                    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫: {response.status_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json={"invalid": "data"}
                )
                if response.status_code in [422, 400]:
                    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {response.status_code}")
                    return False
                
                print("‚úÖ –ë–ª–æ–∫ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
                self.results['block4'] = True
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∞ 4: {str(e)}")
            self.results['block4'] = False
            return False
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*70)
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ë–õ–û–ö–û–í")
        print("="*70)
        
        total_blocks = len(self.results)
        passed_blocks = sum(1 for result in self.results.values() if result)
        success_rate = passed_blocks / total_blocks if total_blocks > 0 else 0
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_blocks}/{total_blocks} –±–ª–æ–∫–æ–≤ ({success_rate:.1%})")
        print()
        
        block_names = {
            'block0': '–ë–ª–æ–∫ 0: –ê—É–¥–∏—Ç –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è',
            'block1': '–ë–ª–æ–∫ 1: Frontend –∏ MVP',
            'block2': '–ë–ª–æ–∫ 2: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è',
            'block3': '–ë–ª–æ–∫ 3: Core Business Logic –∏ ML',
            'block4': '–ë–ª–æ–∫ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
        }
        
        for block_key, result in self.results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status} {block_names.get(block_key, block_key)}")
        
        print()
        
        if success_rate == 1.0:
            print("üéâ –í–°–ï –ë–õ–û–ö–ò –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
            print("   –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
            print("   –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –±–ª–æ–∫—É 5 (Auto-trading)")
        elif success_rate >= 0.8:
            print("‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ë–õ–û–ö–û–í –†–ê–ë–û–¢–ê–ï–¢")
            print("   –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        elif success_rate >= 0.6:
            print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ë–õ–û–ö–ê–ú–ò")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: all_blocks_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'results': self.results,
            'summary': {
                'total_blocks': total_blocks,
                'passed_blocks': passed_blocks,
                'success_rate': success_rate
            }
        }
        
        with open(f"all_blocks_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ß–ï–¢–´–†–ï–• –ë–õ–û–ö–û–í")
        print("="*70)
        
        tests = [
            self.test_block0_infrastructure,
            self.test_block1_frontend_mvp,
            self.test_block2_monetization,
            self.test_block3_ml_business_logic,
            self.test_block4_integration
        ]
        
        for test in tests:
            try:
                await test()
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
        
        self.generate_final_report()

async def main():
    tester = AllBlocksTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 