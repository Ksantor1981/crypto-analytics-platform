#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Celery
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))

def test_celery_tasks():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö Celery –∑–∞–¥–∞—á"""
    print("üîç –¢–µ—Å—Ç Celery –∑–∞–¥–∞—á...")
    
    try:
        from workers.tasks import (
            collect_telegram_signals,
            update_channel_statistics,
            check_signal_results,
            get_ml_predictions,
            monitor_prices,
            get_telegram_stats
        )
        
        print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
        tasks = [
            ("–°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤", collect_telegram_signals),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", update_channel_statistics),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", check_signal_results),
            ("ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", get_ml_predictions),
            ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω", monitor_prices),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram", get_telegram_stats)
        ]
        
        results = []
        for name, task in tasks:
            print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
            try:
                result = task()
                status = result.get('status', 'unknown')
                print(f"   ‚úÖ {name}: {status}")
                results.append((name, True, result))
            except Exception as e:
                print(f"   ‚ùå {name}: {e}")
                results.append((name, False, str(e)))
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return []

def test_periodic_tasks():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    print("\nüîç –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
    
    try:
        from workers.tasks import app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        periodic_tasks = app.conf.beat_schedule
        
        if periodic_tasks:
            print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
            for task_name, task_config in periodic_tasks.items():
                interval = task_config.get('schedule', 'unknown')
                print(f"   ‚Ä¢ {task_name}: –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥")
        else:
            print("‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}")
        return False

def test_worker_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è worker'–∞"""
    print("\nüîç –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è worker'–∞...")
    
    try:
        from workers.tasks import app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        broker_url = app.conf.broker_url
        backend_url = app.conf.result_backend
        
        print(f"‚úÖ Broker: {broker_url}")
        print(f"‚úÖ Backend: {backend_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
        import redis
        try:
            r = redis.from_url(broker_url)
            r.ping()
            print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò CELERY")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
    health_ok = test_worker_health()
    
    if health_ok:
        # –¢–µ—Å—Ç –∑–∞–¥–∞—á
        task_results = test_celery_tasks()
        
        # –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        periodic_ok = test_periodic_tasks()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        successful_tasks = sum(1 for _, success, _ in task_results if success)
        total_tasks = len(task_results)
        
        print(f"   –ó–∞–¥–∞—á–∏: {successful_tasks}/{total_tasks} —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"   –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏: {'‚úÖ' if periodic_ok else '‚ùå'}")
        print(f"   Worker –∑–¥–æ—Ä–æ–≤—å–µ: {'‚úÖ' if health_ok else '‚ùå'}")
        
        if successful_tasks == total_tasks and periodic_ok and health_ok:
            print("\nüéâ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø CELERY –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π")
            
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
        print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–∞–º:")
        for name, success, result in task_results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {name}: {status}")
            if success and isinstance(result, dict):
                details = result.get('status', 'unknown')
                print(f"      –°—Ç–∞—Ç—É—Å: {details}")
    else:
        print("\n‚ùå Worker –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    print("=" * 50)

if __name__ == "__main__":
    main()
