#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

async def test_telegram_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from workers.telegram.telegram_client import TelegramSignalCollector
        from workers.telegram.signal_processor import TelegramSignalProcessor
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        collector = TelegramSignalCollector(use_real_config=True)
        processor = TelegramSignalProcessor()
        
        print(f"‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"   API ID: {collector.api_id}")
        print(f"   –ö–∞–Ω–∞–ª–æ–≤: {len(collector.channels)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
        for i, channel in enumerate(collector.channels[:5], 1):
            print(f"   {i}. {channel['name']} (@{channel['username']})")
            print(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {channel['category']}")
            print(f"      –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {channel['success_rate']:.1%}")
            print(f"      –°–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å: {channel['avg_signals_per_day']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False

async def test_signal_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from workers.telegram.signal_processor import TelegramSignalProcessor
        
        processor = TelegramSignalProcessor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        test_signals = [
            {
                "text": "üöÄ BTC/USDT LONG\nEntry: 117,500\nTarget 1: 120,000\nTarget 2: 122,500\nStop Loss: 115,000\nLeverage: 10x",
                "channel": "@cryptosignals",
                "timestamp": datetime.now()
            },
            {
                "text": "üìâ ETH/USDT SHORT\n–í—Ö–æ–¥: 3,200\n–¶–µ–ª—å: 3,000\n–°—Ç–æ–ø: 3,300\n–ü–ª–µ—á–æ: 5x",
                "channel": "@binancesignals", 
                "timestamp": datetime.now()
            },
            {
                "text": "üî• SOL/USDT BUY\nEntry Price: $100\nTake Profit: $110\nStop Loss: $95\nConfidence: HIGH",
                "channel": "@cryptotradingview",
                "timestamp": datetime.now()
            }
        ]
        
        for i, signal in enumerate(test_signals, 1):
            print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ #{i}:")
            print(f"   –ö–∞–Ω–∞–ª: {signal['channel']}")
            print(f"   –¢–µ–∫—Å—Ç: {signal['text'][:50]}...")
            
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            parsed = processor.parse_signal(signal['text'], signal['channel'])
            
            if parsed:
                print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:")
                print(f"   –ê–∫—Ç–∏–≤: {parsed.get('asset', 'N/A')}")
                print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parsed.get('direction', 'N/A')}")
                print(f"   –í—Ö–æ–¥: ${parsed.get('entry_price', 'N/A')}")
                print(f"   –¶–µ–ª—å: ${parsed.get('target_price', 'N/A')}")
                print(f"   –°—Ç–æ–ø: ${parsed.get('stop_loss', 'N/A')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.get('confidence', 'N/A')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    from backend.app.database import get_db
                    from backend.app.models.signal import Signal
                    from backend.app.models.channel import Channel
                    
                    db = next(get_db())
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    channel = db.query(Channel).filter(Channel.url == signal['channel']).first()
                    if not channel:
                        channel = Channel(
                            name=signal['channel'].replace('@', ''),
                            platform="telegram",
                            url=signal['channel'],
                            category="crypto",
                            description=f"Telegram –∫–∞–Ω–∞–ª {signal['channel']}",
                            is_active=True
                        )
                        db.add(channel)
                        db.commit()
                        db.refresh(channel)
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
                    new_signal = Signal(
                        channel_id=channel.id,
                        asset=parsed.get('asset', 'UNKNOWN'),
                        direction=parsed.get('direction', 'LONG'),
                        entry_price=parsed.get('entry_price', 0),
                        tp1_price=parsed.get('target_price'),
                        stop_loss=parsed.get('stop_loss'),
                        original_text=signal['text'],
                        message_timestamp=signal['timestamp'],
                        status='PENDING',
                        confidence_score=parsed.get('confidence', 0.5)
                    )
                    
                    db.add(new_signal)
                    db.commit()
                    
                    print(f"üíæ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (ID: {new_signal.id})")
                    
                except Exception as db_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
            else:
                print(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

async def test_real_telegram_collection():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from workers.telegram.real_telegram_collector import RealTelegramCollector
        
        collector = RealTelegramCollector()
        
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã (–≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ)
        result = await collector.collect_signals_demo()
        
        if result['status'] == 'success':
            print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {result.get('total_signals', 0)}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processed', 0)}")
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result.get('saved', 0)}")
            
            if result.get('signals'):
                print("\nüìä –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
                for i, signal in enumerate(result['signals'][:3], 1):
                    print(f"   {i}. {signal.get('asset', 'N/A')} {signal.get('direction', 'N/A')}")
                    print(f"      –í—Ö–æ–¥: ${signal.get('entry_price', 'N/A')}")
                    print(f"      –ö–∞–Ω–∞–ª: {signal.get('channel', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –†–ï–ê–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        telegram_ok = await test_telegram_parsing()
        await test_signal_processing()
        await test_real_telegram_collection()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        
        if telegram_ok:
            print("üéØ Telegram –ø–∞—Ä—Å–∏–Ω–≥: –ì–û–¢–û–í")
        else:
            print("‚ö†Ô∏è Telegram –ø–∞—Ä—Å–∏–Ω–≥: –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò")
            
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
