#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API –ö—Ä–∏–ø—Ç–æ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
BACKEND_URL = "http://localhost:8000"
ML_SERVICE_URL = "http://localhost:8001"

def print_header(title):
    print("\n" + "="*60)
    print(f"üöÄ {title}")
    print("="*60)

def print_section(title):
    print(f"\nüìã {title}")
    print("-" * 40)

def test_backend_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Backend API"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ Backend API")
    try:
        response = requests.get(f"{BACKEND_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Backend API: {e}")
        return False

def test_ml_service_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ML Service"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ ML Service")
    try:
        response = requests.get(f"{ML_SERVICE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ ML Service —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå ML Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ML Service: {e}")
        return False

def test_ml_predictions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    print_section("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    test_signals = [
        {
            "asset": "BTC",
            "direction": "LONG",
            "entry_price": 45000.0,
            "target_price": 47000.0,
            "stop_loss": 43000.0,
            "channel_id": 1,
            "channel_accuracy": 0.85,
            "confidence": 0.8
        },
        {
            "asset": "ETH",
            "direction": "SHORT",
            "entry_price": 2800.0,
            "target_price": 2650.0,
            "stop_loss": 2900.0,
            "channel_id": 2,
            "channel_accuracy": 0.75,
            "confidence": 0.7
        },
        {
            "asset": "ADA",
            "direction": "LONG",
            "entry_price": 0.45,
            "target_price": 0.52,
            "stop_loss": 0.42,
            "channel_id": 3,
            "channel_accuracy": 0.70,
            "confidence": 0.6
        }
    ]
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    for i, signal in enumerate(test_signals, 1):
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/signal",
                json=signal,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                prediction = response.json()
                print(f"\n   –°–∏–≥–Ω–∞–ª {i}: {signal['asset']} {signal['direction']}")
                print(f"   üí° –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prediction['success_probability']:.1%}")
                print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {prediction['confidence']:.1%}")
                print(f"   üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {prediction['recommendation']}")
                print(f"   ‚ö†Ô∏è  –†–∏—Å–∫: {prediction['risk_score']:.1%}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {signal['asset']}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {signal['asset']}: {e}")
    
    # –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
    try:
        batch_request = {"signals": test_signals}
        response = requests.post(
            f"{ML_SERVICE_URL}/api/v1/predictions/batch",
            json=batch_request,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            batch_result = response.json()
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {batch_result['total_processed']}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {batch_result['processing_time_ms']:.2f}ms")
            
            for i, prediction in enumerate(batch_result['predictions'], 1):
                signal = test_signals[i-1]
                print(f"   üìà {signal['asset']}: {prediction['success_probability']:.1%} —É—Å–ø–µ—Ö–∞")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

def test_ml_model_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ML –º–æ–¥–µ–ª–∏"""
    print_section("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ML –ú–æ–¥–µ–ª–∏")
    try:
        response = requests.get(f"{ML_SERVICE_URL}/api/v1/predictions/model/info")
        if response.status_code == 200:
            model_info = response.json()
            print(f"üìã –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {model_info['model_version']}")
            print(f"üéØ –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {'–û–±—É—á–µ–Ω–∞' if model_info['is_trained'] else '–ù–µ –æ–±—É—á–µ–Ω–∞'}")
            print(f"üîß –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_info['model_type']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(model_info['feature_names'])}")
            print(f"üè∑Ô∏è  –ü—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(model_info['feature_names'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")

def demo_performance_metrics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print_section("–ú–µ—Ç—Ä–∏–∫–∏ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios = [
        ("–í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π BTC LONG", {"asset": "BTC", "direction": "LONG", "entry_price": 65000, "target_price": 70000, "channel_accuracy": 0.6}),
        ("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π ETH SHORT", {"asset": "ETH", "direction": "SHORT", "entry_price": 3000, "target_price": 2800, "channel_accuracy": 0.9}),
        ("–ê–ª—å—Ç–∫–æ–∏–Ω —Å–ø–µ–∫—É–ª—è—Ü–∏—è", {"asset": "DOGE", "direction": "LONG", "entry_price": 0.08, "target_price": 0.12, "channel_accuracy": 0.5})
    ]
    
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
    
    for scenario_name, signal_data in scenarios:
        # –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        signal_data.update({
            "stop_loss": signal_data["entry_price"] * 0.95,
            "channel_id": 1,
            "confidence": 0.7
        })
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/signal",
                json=signal_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                prediction = response.json()
                risk_level = "–ù–ò–ó–ö–ò–ô" if prediction['risk_score'] < 0.3 else "–°–†–ï–î–ù–ò–ô" if prediction['risk_score'] < 0.7 else "–í–´–°–û–ö–ò–ô"
                
                print(f"\n   üéØ {scenario_name}")
                print(f"      –£—Å–ø–µ—Ö: {prediction['success_probability']:.1%} | –†–∏—Å–∫: {risk_level} | {prediction['recommendation']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_name}': {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_name}': {e}")

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print_section("–ò—Ç–æ–≥–æ–≤—ã–π –û—Ç—á–µ—Ç")
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {current_time}")
    print(f"üîó Backend URL: {BACKEND_URL}")
    print(f"ü§ñ ML Service URL: {ML_SERVICE_URL}")
    
    print("\nüéØ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
    print("   ‚úÖ Backend API - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
    print("   ‚úÖ ML Service - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("   ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ - –û—Ü–µ–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
    print("   ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - KPI –∞–Ω–∞–ª–∏–∑")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   üì± Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Next.js)")
    print("   üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∏—Ä–∂–∞–º–∏")
    print("   ü§ñ –£–ª—É—á—à–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π")
    print("   üìà –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–†–ò–ü–¢–û –ê–ù–ê–õ–ò–¢–ò–ö–ò –ü–õ–ê–¢–§–û–†–ú–´")
    
    print("üéØ –¶–µ–ª—å: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    print("üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Backend API + ML Service + –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    backend_ok = test_backend_health()
    ml_ok = test_ml_service_health()
    
    if not backend_ok:
        print("\n‚ö†Ô∏è  Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        
    if not ml_ok:
        print("\n‚ö†Ô∏è  ML Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if ml_ok:
        test_ml_model_info()
        test_ml_predictions()
        demo_performance_metrics()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generate_report()
    
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("üéâ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ demo.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

if __name__ == "__main__":
    main() 