#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML —Å–µ—Ä–≤–∏—Å–∞
"""
import sys
import os
import asyncio

# Add workers to path
sys.path.append('workers')

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from workers.exchange.bybit_client import BybitClient
        print("   ‚úÖ BybitClient –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from workers.real_data_config import CRYPTO_SYMBOLS
        print(f"   ‚úÖ CRYPTO_SYMBOLS: {len(CRYPTO_SYMBOLS)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True, BybitClient
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False, None

async def test_bybit_connection(BybitClient):
    """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit...")
    
    try:
        async with BybitClient() as client:
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_ok = await client.test_connection()
            print(f"   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'OK' if connection_ok else 'FAILED'}")
            
            if connection_ok:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC
                market_data = await client.get_market_data(["BTCUSDT"])
                if "BTCUSDT" in market_data:
                    btc_data = market_data["BTCUSDT"]
                    print(f"   ‚úÖ BTC –¥–∞–Ω–Ω—ã–µ: ${btc_data.get('current_price', 'N/A')}")
                    return True
                else:
                    print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC")
                    return False
            else:
                return False
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

def test_ml_service_import_path():
    """–¢–µ—Å—Ç –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–∫ –≤ ML —Å–µ—Ä–≤–∏—Å–µ"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ ML —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫–∞–∫ –≤ ML —Å–µ—Ä–≤–∏—Å–µ
    ml_workers_path = os.path.join(os.path.dirname(__file__), 'workers')
    if ml_workers_path not in sys.path:
        sys.path.append(ml_workers_path)
    
    try:
        from workers.exchange.bybit_client import BybitClient
        from workers.real_data_config import CRYPTO_SYMBOLS
        print("   ‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ ML —Å–µ—Ä–≤–∏—Å–∞ –ø—É—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ML –ø—É—Ç–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    imports_ok, BybitClient = test_imports()
    
    # –¢–µ—Å—Ç 2: –ü—É—Ç—å ML —Å–µ—Ä–≤–∏—Å–∞
    ml_path_ok = test_ml_service_import_path()
    
    # –¢–µ—Å—Ç 3: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bybit
    if imports_ok and BybitClient:
        bybit_ok = await test_bybit_connection(BybitClient)
    else:
        bybit_ok = False
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"   ML –ø—É—Ç—å: {'‚úÖ' if ml_path_ok else '‚ùå'}")
    print(f"   Bybit: {'‚úÖ' if bybit_ok else '‚ùå'}")
    
    if imports_ok and ml_path_ok and bybit_ok:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò!")
        print("   REAL_DATA_AVAILABLE –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("   REAL_DATA_AVAILABLE –±—É–¥–µ—Ç False")
        
        if not imports_ok:
            print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
        if not ml_path_ok:
            print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ ML —Å–µ—Ä–≤–∏—Å–µ")
        if not bybit_ok:
            print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ Bybit")

if __name__ == "__main__":
    asyncio.run(main()) 