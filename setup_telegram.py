#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API –¥–ª—è —Å–±–æ—Ä–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sqlite3
from pathlib import Path

def setup_telegram_api():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API –¥–ª—è —Å–±–æ—Ä–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    print("\nüì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API_ID –∏ API_HASH")
    
    print("\n‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    
    api_id = input("API_ID: ").strip()
    api_hash = input("API_HASH: ").strip()
    phone = input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7): ").strip()
    
    if not all([api_id, api_hash, phone]):
        print("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['TELEGRAM_API_ID'] = api_id
    os.environ['TELEGRAM_API_HASH'] = api_hash
    os.environ['TELEGRAM_PHONE'] = phone
    
    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   API_ID: {api_id}")
    print(f"   API_HASH: {api_hash[:10]}...")
    print(f"   PHONE: {phone}")
    
    return True

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
    
    try:
        from telethon import TelegramClient
        from telethon.errors import SessionPasswordNeededError
        
        api_id = os.getenv('TELEGRAM_API_ID')
        api_hash = os.getenv('TELEGRAM_API_HASH')
        phone = os.getenv('TELEGRAM_PHONE')
        
        if not all([api_id, api_hash, phone]):
            print("‚ùå –î–∞–Ω–Ω—ã–µ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return False
        
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        client = TelegramClient('crypto_signals_session', api_id, api_hash)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        client.connect()
        
        if not client.is_user_authorized():
            print("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
            
            try:
                client.sign_in(phone, code)
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
                client.sign_in(password=password)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
        test_channels = [
            'CryptoPapa', 'FatPigSignals', 'WallstreetQueenOfficial',
            'RocketWalletSignals', 'BinanceKiller', 'WolfOfTrading'
        ]
        
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º:")
        for channel in test_channels:
            try:
                entity = client.get_entity(channel)
                messages = client.get_messages(entity, limit=1)
                if messages:
                    print(f"   ‚úÖ {channel} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"   ‚ö†Ô∏è {channel} - –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                print(f"   ‚ùå {channel} - –æ—à–∏–±–∫–∞: {str(e)[:50]}")
        
        client.disconnect()
        return True
        
    except ImportError:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def collect_real_data():
    """–°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from workers.real_data_collector import RealDataCollector
        import asyncio
        
        collector = RealDataCollector()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ Telegram
        print("üì° –°–±–æ—Ä –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
        telegram_signals = asyncio.run(collector.collect_from_telegram())
        
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {telegram_signals} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        conn = sqlite3.connect('workers/signals.db')
        cur = conn.cursor()
        
        cur.execute("SELECT COUNT(*) FROM signals WHERE signal_type = 'telegram_real'")
        real_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM signals WHERE signal_type = 'real_demo'")
        demo_count = cur.fetchone()[0]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤: {real_count}")
        print(f"   ‚Ä¢ –î–µ–º–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {demo_count}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {real_count + demo_count}")
        
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    if os.getenv('TELEGRAM_API_ID'):
        print("‚úÖ Telegram API —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        choice = input("–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å? (y/n): ").lower()
        if choice != 'y':
            pass
        else:
            if not setup_telegram_api():
                return
    else:
        if not setup_telegram_api():
            return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_telegram_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    choice = input("\n–°–æ–±—Ä–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å? (y/n): ").lower()
    if choice == 'y':
        if collect_real_data():
            print("\nüéâ –°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: python start_dashboard.py")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\nüìù –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("set TELEGRAM_API_ID=–≤–∞—à_api_id")
    print("set TELEGRAM_API_HASH=–≤–∞—à_api_hash") 
    print("set TELEGRAM_PHONE=–≤–∞—à_–Ω–æ–º–µ—Ä")

if __name__ == '__main__':
    main()
