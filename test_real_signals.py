#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import requests
import json
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ workers –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))

def test_telegram_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        from telegram.telegram_client import TelegramSignalCollector
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        collector = TelegramSignalCollector(use_real_config=True)
        
        print(f"‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"   API ID: {collector.api_id}")
        print(f"   –ö–∞–Ω–∞–ª–æ–≤: {len(collector.channels)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        for channel in collector.channels[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   üì∫ {channel['name']} (@{channel['username']})")
            print(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {channel['category']}")
            print(f"      –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {channel['success_rate']:.1%}")
            print(f"      –°–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å: {channel['avg_signals_per_day']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_signal_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    test_signals = [
        {
            "text": "üöÄ BTC/USDT LONG\nEntry: 117,500\nTarget 1: 120,000\nTarget 2: 122,500\nStop Loss: 115,000\nLeverage: 10x",
            "channel": "@cryptosignals",
            "expected": {
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 117500,
                "target_price": 120000,
                "stop_loss": 115000
            }
        },
        {
            "text": "üìâ ETH/USDT SHORT\n–í—Ö–æ–¥: 3,200\n–¶–µ–ª—å: 3,000\n–°—Ç–æ–ø: 3,300\n–ü–ª–µ—á–æ: 5x",
            "channel": "@binancesignals",
            "expected": {
                "asset": "ETH",
                "direction": "SHORT",
                "entry_price": 3200,
                "target_price": 3000,
                "stop_loss": 3300
            }
        },
        {
            "text": "üî• SOL/USDT BUY\nEntry Price: $100\nTake Profit: $110\nStop Loss: $95\nConfidence: HIGH",
            "channel": "@cryptotradingview",
            "expected": {
                "asset": "SOL",
                "direction": "BUY",
                "entry_price": 100,
                "target_price": 110,
                "stop_loss": 95
            }
        }
    ]
    
    try:
        from telegram.signal_processor import SignalProcessor
        
        processor = SignalProcessor()
        
        for i, signal in enumerate(test_signals, 1):
            print(f"\nüìä –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ #{i}:")
            print(f"   –ö–∞–Ω–∞–ª: {signal['channel']}")
            print(f"   –¢–µ–∫—Å—Ç: {signal['text'][:50]}...")
            
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            parsed = processor.parse_signal(signal['text'], signal['channel'])
            
            if parsed:
                print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:")
                print(f"   –ê–∫—Ç–∏–≤: {parsed.get('asset', 'N/A')}")
                print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parsed.get('direction', 'N/A')}")
                print(f"   –í—Ö–æ–¥: ${parsed.get('entry_price', 'N/A')}")
                print(f"   –¶–µ–ª—å: ${parsed.get('target_price', 'N/A')}")
                print(f"   –°—Ç–æ–ø: ${parsed.get('stop_loss', 'N/A')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.get('confidence', 'N/A')}")
            else:
                print(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

def test_backend_signals():
    """–¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ backend"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ backend...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    endpoints = [
        "http://localhost:8000/api/v1/signals",
        "http://localhost:8000/api/v1/channels",
        "http://localhost:8000/api/v1/positions"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(endpoint, timeout=5)
            print(f"üì° {endpoint}: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    print(f"   –ó–∞–ø–∏—Å–µ–π: {len(data)}")
                elif isinstance(data, dict):
                    print(f"   –ö–ª—é—á–∏: {list(data.keys())}")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text[:100]}")
                
        except Exception as e:
            print(f"‚ùå {endpoint}: {e}")

def test_ml_prediction_with_real_signal():
    """–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º"""
    print("\nüîç –¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
        response = requests.get("http://localhost:8001/api/v1/predictions/market-data/BTC")
        if response.status_code == 200:
            market_data = response.json()
            current_price = market_data['data']['price']
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal_data = {
                "asset": "BTC",
                "entry_price": current_price,
                "target_price": current_price * 1.03,  # +3%
                "stop_loss": current_price * 0.99,     # -1%
                "direction": "LONG"
            }
            
            print(f"üìà –†–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª:")
            print(f"   –ê–∫—Ç–∏–≤: {signal_data['asset']}")
            print(f"   –í—Ö–æ–¥: ${signal_data['entry_price']:.2f}")
            print(f"   –¶–µ–ª—å: ${signal_data['target_price']:.2f} (+3%)")
            print(f"   –°—Ç–æ–ø: ${signal_data['stop_loss']:.2f} (-1%)")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            response = requests.post(
                "http://localhost:8001/api/v1/predictions/predict",
                json=signal_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['prediction']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['expected_return']:.1f}%")
                print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result['risk_level']}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                if 'market_data' in result:
                    source = result['market_data'].get('source', 'unknown')
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
                
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        telegram_ok = test_telegram_integration()
        test_signal_parsing()
        test_backend_signals()
        test_ml_prediction_with_real_signal()
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        
        if telegram_ok:
            print("üéØ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ì–û–¢–û–í–ê")
        else:
            print("‚ö†Ô∏è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò")
            
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 50)

if __name__ == "__main__":
    main()
