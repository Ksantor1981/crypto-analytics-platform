#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
"""

import requests
import time
import sys
import json
from datetime import datetime

def test_backend_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Backend API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
    
    base_url = "http://127.0.0.1:8000"
    
    try:
        # –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        response = requests.get(f"{base_url}/docs", timeout=5)
        assert response.status_code == 200, f"Docs failed: {response.status_code}"
        print("‚úÖ Backend Docs: OK")
        
        # –¢–µ—Å—Ç OpenAPI —Å—Ö–µ–º—ã
        response = requests.get(f"{base_url}/openapi.json", timeout=5)
        assert response.status_code == 200, f"OpenAPI failed: {response.status_code}"
        print("‚úÖ Backend OpenAPI: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Backend API failed: {e}")
        return False

def test_ml_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML Service"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Service...")
    
    base_url = "http://127.0.0.1:8001"
    
    try:
        # –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        response = requests.get(f"{base_url}/docs", timeout=5)
        assert response.status_code == 200, f"ML Docs failed: {response.status_code}"
        print("‚úÖ ML Service Docs: OK")
        
        # –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint
        response = requests.get(f"{base_url}/", timeout=5)
        assert response.status_code == 200, f"ML Root failed: {response.status_code}"
        data = response.json()
        assert data["service"] == "Crypto Analytics ML Service", "Wrong service name"
        print("‚úÖ ML Service Root: OK")
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
        response = requests.get(f"{base_url}/api/v1/info", timeout=5)
        assert response.status_code == 200, f"ML Info failed: {response.status_code}"
        data = response.json()
        assert "ml-service" in data["service_name"], "Wrong service info"
        print("‚úÖ ML Service Info: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ML Service failed: {e}")
        return False

def test_ml_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML Health endpoints"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Health...")
    
    base_url = "http://127.0.0.1:8001/api/v1/health"
    
    try:
        # –ë–∞–∑–æ–≤—ã–π health check
        response = requests.get(f"{base_url}/", timeout=5)
        assert response.status_code == 200, f"Health failed: {response.status_code}"
        data = response.json()
        assert data["status"] == "healthy", f"Service not healthy: {data}"
        print("‚úÖ ML Health Basic: OK")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π health check
        response = requests.get(f"{base_url}/detailed", timeout=10)
        assert response.status_code == 200, f"Detailed health failed: {response.status_code}"
        data = response.json()
        assert "system_metrics" in data, "Missing system metrics"
        assert "model_status" in data, "Missing model status"
        print("‚úÖ ML Health Detailed: OK")
        
        # Readiness check
        response = requests.get(f"{base_url}/readiness", timeout=10)
        assert response.status_code == 200, f"Readiness failed: {response.status_code}"
        data = response.json()
        assert data["status"] == "ready", f"Service not ready: {data}"
        print("‚úÖ ML Health Readiness: OK")
        
        # Liveness check
        response = requests.get(f"{base_url}/liveness", timeout=5)
        assert response.status_code == 200, f"Liveness failed: {response.status_code}"
        data = response.json()
        assert data["status"] == "alive", f"Service not alive: {data}"
        print("‚úÖ ML Health Liveness: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ML Health failed: {e}")
        return False

def test_ml_predictions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML Predictions"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Predictions...")
    
    base_url = "http://127.0.0.1:8001/api/v1/predictions"
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        test_data = {
            "asset": "BTCUSDT",
            "entry_price": 45000.0,
            "target_price": 46000.0,
            "stop_loss": 44000.0,
            "direction": "LONG"
        }
        
        response = requests.post(f"{base_url}/predict", json=test_data, timeout=15)
        assert response.status_code == 200, f"Prediction failed: {response.status_code} - {response.text}"
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["asset", "prediction", "confidence", "expected_return", "risk_level", "recommendation"]
        for field in required_fields:
            assert field in data, f"Missing field: {field}"
        
        assert data["asset"] == "BTCUSDT", "Wrong asset in response"
        assert data["prediction"] in ["SUCCESS", "FAIL"], f"Invalid prediction: {data['prediction']}"
        assert 0 <= data["confidence"] <= 1, f"Invalid confidence: {data['confidence']}"
        assert data["risk_level"] in ["LOW", "MEDIUM", "HIGH"], f"Invalid risk level: {data['risk_level']}"
        
        print("‚úÖ ML Prediction Basic: OK")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {data['prediction']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.2f}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['recommendation']}")
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
        test_assets = ["ETHUSDT", "BNBUSDT", "ADAUSDT"]
        for asset in test_assets:
            test_data["asset"] = asset
            response = requests.post(f"{base_url}/predict", json=test_data, timeout=10)
            assert response.status_code == 200, f"Prediction failed for {asset}: {response.status_code}"
            data = response.json()
            assert data["asset"] == asset, f"Wrong asset in response for {asset}"
        
        print("‚úÖ ML Prediction Multiple Assets: OK")
        
        # –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        response = requests.get(f"{base_url}/supported-assets", timeout=5)
        assert response.status_code == 200, f"Supported assets failed: {response.status_code}"
        data = response.json()
        assert "supported_assets" in data, "Missing supported assets"
        print("‚úÖ ML Supported Assets: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ML Predictions failed: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã
        start_time = time.time()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend
        backend_response = requests.get("http://127.0.0.1:8000/docs", timeout=5)
        assert backend_response.status_code == 200
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º ML Service
        ml_response = requests.get("http://127.0.0.1:8001/api/v1/health/", timeout=5)
        assert ml_response.status_code == 200
        
        # 3. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction_data = {
            "asset": "BTCUSDT",
            "entry_price": 50000.0,
            "target_price": 52000.0,
            "stop_loss": 48000.0,
            "direction": "LONG"
        }
        
        prediction_response = requests.post(
            "http://127.0.0.1:8001/api/v1/predictions/predict", 
            json=prediction_data, 
            timeout=10
        )
        assert prediction_response.status_code == 200
        
        end_time = time.time()
        response_time = end_time - start_time
        
        print(f"‚úÖ Integration Test: OK (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}s)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        assert response_time < 20, f"Response time too slow: {response_time}s"
        print("‚úÖ Performance Test: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Integration failed: {e}")
        return False

def test_stress():
    """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üîç –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        success_count = 0
        total_requests = 10
        
        for i in range(total_requests):
            try:
                test_data = {
                    "asset": f"TEST{i}USDT",
                    "entry_price": 45000.0 + i * 100,
                    "target_price": 46000.0 + i * 100,
                    "stop_loss": 44000.0 + i * 100,
                    "direction": "LONG" if i % 2 == 0 else "SHORT"
                }
                
                response = requests.post(
                    "http://127.0.0.1:8001/api/v1/predictions/predict", 
                    json=test_data, 
                    timeout=5
                )
                
                if response.status_code == 200:
                    success_count += 1
                    
            except Exception as e:
                print(f"   Request {i+1} failed: {e}")
        
        success_rate = (success_count / total_requests) * 100
        print(f"‚úÖ Stress Test: {success_count}/{total_requests} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ({success_rate:.1f}%)")
        
        assert success_rate >= 80, f"Success rate too low: {success_rate}%"
        
        return True
        
    except Exception as e:
        print(f"‚ùå Stress test failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    print("=" * 60)
    
    tests = [
        ("Backend API", test_backend_api),
        ("ML Service", test_ml_service),
        ("ML Health", test_ml_health),
        ("ML Predictions", test_ml_predictions),
        ("Integration", test_integration),
        ("Stress Test", test_stress)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå {test_name} crashed: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name:20} : {status}")
    
    print("-" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total} ({(passed/total)*100:.1f}%)")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞.")
        return True
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 