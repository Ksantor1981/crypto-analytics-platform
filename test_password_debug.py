#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.app.core.security import get_password_hash, verify_password
from backend.app.core.database import get_db
from backend.app.models.user import User

def test_password_hashing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª–µ–π"""
    
    print("üîê –¢–ï–°–¢ –•–ï–®–ò–†–û–í–ê–ù–ò–Ø –ü–ê–†–û–õ–ï–ô")
    print("=" * 50)
    
    test_password = "testpass123"
    
    # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä–æ–ª—å: {test_password}")
    hashed = get_password_hash(test_password)
    print(f"üìù –•–µ—à: {hashed[:50]}...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    is_valid = verify_password(test_password, hashed)
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞: {'–ü–†–û–®–õ–ê' if is_valid else '–ù–ï –ü–†–û–®–õ–ê'}")
    
    # –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    wrong_password = "wrongpass123"
    is_wrong = verify_password(wrong_password, hashed)
    print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {'–ù–ï –ü–†–û–®–õ–ê' if not is_wrong else '–û–®–ò–ë–ö–ê!'}")
    
    return is_valid and not is_wrong

def test_user_in_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüìä –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î")
    print("=" * 50)
    
    db = next(get_db())
    
    try:
        user = db.query(User).filter(User.email == "test_debug@example.com").first()
        
        if user:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.email}")
            print(f"üìù ID: {user.id}")
            print(f"üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}")
            print(f"üìù –ê–∫—Ç–∏–≤–µ–Ω: {user.is_active}")
            print(f"üìù –•–µ—à –ø–∞—Ä–æ–ª—è: {user.hashed_password[:50]}...")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î
            test_password = "testpass123"
            is_valid = verify_password(test_password, user.hashed_password)
            print(f"üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î: {'–ü–†–û–®–õ–ê' if is_valid else '–ù–ï –ü–†–û–®–õ–ê'}")
            
            return is_valid
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False
    finally:
        db.close()

if __name__ == "__main__":
    hash_test = test_password_hashing()
    db_test = test_user_in_database()
    
    print(f"\nüìã –ò–¢–û–ì:")
    print(f"–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if hash_test else '‚ùå'}")
    print(f"–ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {'‚úÖ' if db_test else '‚ùå'}") 