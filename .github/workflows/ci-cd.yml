name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crypto_analytics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r ml-service/requirements.txt
        pip install -r workers/requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/crypto_analytics_test
    
    - name: Run ML service tests
      run: |
        cd ml-service
        python -m pytest tests/ -v
    
    - name: Run integration tests
      run: |
        python test_all_blocks.py
        python check_platform_health.py
    
    - name: Security audit
      run: |
        pip install safety
        safety check
    
    - name: Code quality check
      run: |
        pip install flake8 black isort
        flake8 backend/ ml-service/ workers/
        black --check backend/ ml-service/ workers/
        isort --check-only backend/ ml-service/ workers/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push ML Service image
      uses: docker/build-push-action@v5
      with:
        context: ./ml-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Workers image
      uses: docker/build-push-action@v5
      with:
        context: ./workers
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workers:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        helm upgrade --install crypto-analytics-staging ./helm \
          --namespace staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      run: |
        helm upgrade --install crypto-analytics ./helm \
          --namespace production \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=production
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/crypto-analytics-backend -n production
        kubectl wait --for=condition=available --timeout=300s deployment/crypto-analytics-ml-service -n production
        
        # Run health checks
        curl -f http://crypto-analytics-backend.production.svc.cluster.local/health/
        curl -f http://crypto-analytics-ml-service.production.svc.cluster.local/health/

  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, Discord, etc.)
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic here (Slack, Discord, etc.) 