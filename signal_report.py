#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –≤ –ë–î
"""
import sqlite3
import json
from datetime import datetime
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))
from price_utils import fetch_prices_usd

DB_PATH = 'workers/signals.db'

def generate_full_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    print("=" * 80)
    print("üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–ò–ì–ù–ê–õ–ê–ú")
    print("=" * 80)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute("SELECT COUNT(*) as total FROM signals")
    total_signals = cur.fetchone()['total']
    
    cur.execute("SELECT COUNT(*) as valid FROM signals WHERE is_valid = 1")
    valid_signals = cur.fetchone()['valid']
    
    cur.execute("SELECT COUNT(*) as verified FROM signals WHERE signal_quality = 'verified'")
    verified_signals = cur.fetchone()['verified']
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
    print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_signals}")
    print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: {verified_signals}")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    print("üì∫ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–ù–ê–õ–ê–ú:")
    cur.execute("""
        SELECT channel, COUNT(*) as cnt, 
               AVG(real_confidence) as avg_conf,
               SUM(CASE WHEN is_valid = 1 THEN 1 ELSE 0 END) as valid_cnt
        FROM signals 
        GROUP BY channel 
        ORDER BY cnt DESC
    """)
    
    for row in cur.fetchall():
        print(f"   {row['channel']}: {row['cnt']} —Å–∏–≥–Ω–∞–ª–æ–≤, "
              f"—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row['avg_conf']:.1f}%, "
              f"–≤–∞–ª–∏–¥–Ω—ã—Ö: {row['valid_cnt']}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
    print("üí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù:")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    cur.execute("SELECT DISTINCT asset FROM signals WHERE asset != 'UNKNOWN'")
    assets = [row['asset'] for row in cur.fetchall()]
    current_prices = fetch_prices_usd(assets)
    
    print("   –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:")
    for asset, price in current_prices.items():
        print(f"     {asset}: ${price:,.2f}")
    print()
    
    # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    print("üö® –ê–ù–û–ú–ê–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
    cur.execute("""
        SELECT asset, entry_price, target_price, stop_loss, channel, 
               real_confidence, signal_quality, is_valid
        FROM signals 
        WHERE entry_price IS NOT NULL 
        AND asset IN ('BTC', 'bitcoin', 'ETH', 'ethereum')
        ORDER BY entry_price ASC
    """)
    
    anomalies = []
    for signal in cur.fetchall():
        asset = signal['asset'].upper()
        entry = signal['entry_price']
        
        if asset in ['BTC', 'BITCOIN'] and entry < 1000:
            anomalies.append(signal)
        elif asset in ['ETH', 'ETHEREUM'] and entry < 100:
            anomalies.append(signal)
    
    for signal in anomalies[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∞–Ω–æ–º–∞–ª–∏–π
        print(f"     {signal['asset']} @ ${signal['entry_price']} -> ${signal['target_price']} "
              f"| {signal['channel']} | conf: {signal['real_confidence']}%")
    
    if len(anomalies) > 10:
        print(f"     ... –∏ –µ—â–µ {len(anomalies) - 10} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print()
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    print("üîç –ö–ê–ß–ï–°–¢–í–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:")
    cur.execute("""
        SELECT signal_quality, COUNT(*) as cnt
        FROM signals 
        GROUP BY signal_quality
    """)
    
    for row in cur.fetchall():
        print(f"   {row['signal_quality']}: {row['cnt']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    print()
    
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("üìà –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    cur.execute("""
        SELECT direction, COUNT(*) as cnt
        FROM signals 
        GROUP BY direction
    """)
    
    for row in cur.fetchall():
        print(f"   {row['direction']}: {row['cnt']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    print()
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    print("‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:")
    cur.execute("""
        SELECT timestamp, COUNT(*) as cnt
        FROM signals 
        WHERE timestamp IS NOT NULL
        GROUP BY DATE(timestamp)
        ORDER BY DATE(timestamp) DESC
        LIMIT 5
    """)
    
    for row in cur.fetchall():
        print(f"   {row['timestamp'][:10]}: {row['cnt']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –û—á–∏—Å—Ç–∏—Ç—å –ë–î –æ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("   2. –£–ª—É—á—à–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ü–µ–Ω –≤ EnhancedPriceExtractor")
    print("   3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
    print("   4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã: BTC >= $10,000, ETH >= $1,000")
    print("   5. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    conn.close()

if __name__ == '__main__':
    generate_full_report()
