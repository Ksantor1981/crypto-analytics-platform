#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∞ 4
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import httpx
import json
import time
from datetime import datetime
from typing import Dict, Any

class IntegrationTester:
    def __init__(self):
        self.backend_url = "http://localhost:8000"
        self.ml_service_url = "http://localhost:8001"
        self.frontend_url = "http://localhost:3000"
        self.results = {}
        
    async def test_backend_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞"""
        print("üîç –¢–µ—Å—Ç 1: Backend Health Check")
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.backend_url}/health")
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status', 'unknown')}")
                    self.results['backend_health'] = True
                    return True
                else:
                    print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                    self.results['backend_health'] = False
                    return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {str(e)}")
            self.results['backend_health'] = False
            return False
    
    async def test_ml_service_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è ML-—Å–µ—Ä–≤–∏—Å–∞"""
        print("üîç –¢–µ—Å—Ç 2: ML Service Health Check")
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ ML Service —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status', 'unknown')}")
                    self.results['ml_service_health'] = True
                    return True
                else:
                    print(f"   ‚ùå ML Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                    self.results['ml_service_health'] = False
                    return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ML Service: {str(e)}")
            self.results['ml_service_health'] = False
            return False
    
    async def test_database_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –¢–µ—Å—Ç 3: Database Connection")
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.backend_url}/api/v1/channels/")
                if response.status_code in [200, 401, 403]:  # 401/403 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                    self.results['database_connection'] = True
                    return True
                else:
                    print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                    self.results['database_connection'] = False
                    return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
            self.results['database_connection'] = False
            return False
    
    async def test_ml_prediction_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º"""
        print("üîç –¢–µ—Å—Ç 4: ML Prediction Integration")
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                test_signal = {
                    "asset": "BTCUSDT",
                    "direction": "LONG",
                    "entry_price": 45000.0,
                    "target_price": 47000.0,
                    "stop_loss": 43000.0,
                    "channel_id": 1,
                    "channel_accuracy": 0.75,
                    "confidence": 0.8
                }
                
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json=test_signal
                )
                
                if response.status_code == 200:
                    prediction = response.json()
                    print(f"   ‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                    print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {prediction.get('recommendation', 'N/A')}")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 'N/A')}")
                    self.results['ml_prediction'] = True
                    return True
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
                    self.results['ml_prediction'] = False
                    return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
            self.results['ml_prediction'] = False
            return False
    
    async def test_api_endpoints(self) -> bool:
        """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("üîç –¢–µ—Å—Ç 5: API Endpoints")
        endpoints = [
            "/api/v1/channels/",
            "/api/v1/signals/",
            "/api/v1/users/",
            "/api/v1/subscriptions/",
            "/api/v1/payments/"
        ]
        
        working_endpoints = 0
        async with httpx.AsyncClient(timeout=10.0) as client:
            for endpoint in endpoints:
                try:
                    response = await client.get(f"{self.backend_url}{endpoint}")
                    if response.status_code in [200, 401, 403, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                        working_endpoints += 1
                        print(f"   ‚úÖ {endpoint}: {response.status_code}")
                    else:
                        print(f"   ‚ùå {endpoint}: {response.status_code}")
                except Exception as e:
                    print(f"   ‚ùå {endpoint}: –æ—à–∏–±–∫–∞ - {str(e)}")
        
        success_rate = working_endpoints / len(endpoints)
        self.results['api_endpoints'] = success_rate >= 0.8
        print(f"   üìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {working_endpoints}/{len(endpoints)} ({success_rate:.1%})")
        return success_rate >= 0.8
    
    async def test_real_data_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print("üîç –¢–µ—Å—Ç 6: Real Data Integration")
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                response = await client.get(f"{self.ml_service_url}/api/v1/predictions/market-data/BTCUSDT")
                
                if response.status_code == 200:
                    market_data = response.json()
                    print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    print(f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${market_data.get('current_price', 'N/A')}")
                    self.results['real_data_integration'] = True
                    return True
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                    self.results['real_data_integration'] = False
                    return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {str(e)}")
            self.results['real_data_integration'] = False
            return False
    
    async def test_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üîç –¢–µ—Å—Ç 7: Performance Test")
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –±—ç–∫–µ–Ω–¥–∞
                start_time = time.time()
                response = await client.get(f"{self.backend_url}/health")
                backend_response_time = time.time() - start_time
                
                # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ ML-—Å–µ—Ä–≤–∏—Å–∞
                start_time = time.time()
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                ml_response_time = time.time() - start_time
                
                print(f"   üìä Backend response time: {backend_response_time:.3f}s")
                print(f"   üìä ML Service response time: {ml_response_time:.3f}s")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ (–º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥)
                performance_ok = backend_response_time < 2.0 and ml_response_time < 2.0
                self.results['performance'] = performance_ok
                
                if performance_ok:
                    print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
                else:
                    print("   ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–π")
                
                return performance_ok
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
            self.results['performance'] = False
            return False
    
    async def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üîç –¢–µ—Å—Ç 8: Error Handling")
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                response = await client.get(f"{self.backend_url}/api/v1/nonexistent/")
                if response.status_code == 404:
                    print("   ‚úÖ 404 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {response.status_code}")
                
                # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ JSON –≤ ML-—Å–µ—Ä–≤–∏—Å–µ
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json={"invalid": "data"}
                )
                if response.status_code in [422, 400]:
                    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                
                self.results['error_handling'] = True
                return True
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {str(e)}")
            self.results['error_handling'] = False
            return False
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() if result)
        success_rate = passed_tests / total_tests if total_tests > 0 else 0
        
        print(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} ({success_rate:.1%})")
        print()
        
        for test_name, result in self.results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status} {test_name}")
        
        print()
        
        if success_rate >= 0.8:
            print("üéâ –ë–õ–û–ö 4 –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            print("   –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif success_rate >= 0.6:
            print("‚ö†Ô∏è –ë–õ–û–ö 4 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            print("   –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        else:
            print("üö® –ë–õ–û–ö 4 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return f"integration_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–õ–û–ö–ê 4")
        print("="*60)
        
        tests = [
            self.test_backend_health,
            self.test_ml_service_health,
            self.test_database_connection,
            self.test_ml_prediction_integration,
            self.test_api_endpoints,
            self.test_real_data_integration,
            self.test_performance,
            self.test_error_handling
        ]
        
        for test in tests:
            try:
                await test()
                print()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
                print()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_file = self.generate_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'results': self.results,
                'summary': {
                    'total_tests': len(self.results),
                    'passed_tests': sum(1 for r in self.results.values() if r),
                    'success_rate': sum(1 for r in self.results.values() if r) / len(self.results)
                }
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")

async def main():
    tester = IntegrationTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 