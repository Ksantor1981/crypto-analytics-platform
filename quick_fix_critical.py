#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ PostgreSQL
"""

import os
import sys
import subprocess
import time

def force_postgresql_config():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL"""
    print("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê POSTGRESQL")
    
    # –ü—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    config_content = '''
from pydantic_settings import BaseSettings
from typing import List, Optional
import os

class Settings(BaseSettings):
    # API
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "Crypto Analytics Platform"
    VERSION: str = "1.0.0"
    
    # Database - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û PostgreSQL
    DATABASE_URL: str = "postgresql://postgres:postgres123@localhost:5432/crypto_analytics"
    
    # JWT
    SECRET_KEY: str = "crypto-analytics-secret-key-2024-development"
    JWT_ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # CORS
    BACKEND_CORS_ORIGINS: List[str] = ["*"]
    
    # Environment
    ENVIRONMENT: str = "development"
    DEBUG: bool = True
    
    # Redis
    REDIS_URL: str = "redis://localhost:6379/0"
    
    # ML Service
    ML_SERVICE_URL: str = "http://localhost:8001"
    
    # JWT Refresh tokens
    REFRESH_TOKEN_EXPIRE_DAYS: int = 30
    
    # Rate Limiting
    RATE_LIMIT_REQUESTS: int = 100
    RATE_LIMIT_WINDOW: int = 3600
    AUTH_RATE_LIMIT_REQUESTS: int = 5
    AUTH_RATE_LIMIT_WINDOW: int = 900
    
    class Config:
        case_sensitive = True

def get_settings() -> Settings:
    return Settings()
'''
    
    with open("backend/app/core/config.py", "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print("  ‚úÖ Config.py –ø–µ—Ä–µ–ø–∏—Å–∞–Ω —Å PostgreSQL")

def restart_all_services():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í")
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    subprocess.run(["taskkill", "/f", "/im", "python.exe"], capture_output=True)
    subprocess.run(["taskkill", "/f", "/im", "uvicorn.exe"], capture_output=True)
    time.sleep(2)
    
    # 2. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["DATABASE_URL"] = "postgresql://postgres:postgres123@localhost:5432/crypto_analytics"
    os.environ["SECRET_KEY"] = "crypto-analytics-secret-key-2024-development"
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü PostgreSQL...")
    try:
        import psycopg2
        conn = psycopg2.connect(
            host="localhost",
            database="crypto_analytics", 
            user="postgres",
            password="postgres123"
        )
        print("  ‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        conn.close()
    except Exception as e:
        print(f"  ‚ö†Ô∏è PostgreSQL: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Python
    try:
        os.chdir("backend")
        sys.path.insert(0, os.getcwd())
        
        from app.core.database import engine, Base
        from app.models import user, channel, signal, subscription, payment
        
        Base.metadata.drop_all(bind=engine)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        Base.metadata.create_all(bind=engine)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü—ã PostgreSQL —Å–æ–∑–¥–∞–Ω—ã")
        
        os.chdir("..")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        os.chdir("..")
    
    # 4. –ó–∞–ø—É—Å–∫ ML Service
    print("ü§ñ –ó–∞–ø—É—Å–∫ ML Service...")
    subprocess.Popen([sys.executable, "ml-service/main.py"], 
                     stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    time.sleep(3)
    
    # 5. –ó–∞–ø—É—Å–∫ Backend
    print("üöÄ –ó–∞–ø—É—Å–∫ Backend...")
    env = os.environ.copy()
    env["DATABASE_URL"] = "postgresql://postgres:postgres123@localhost:5432/crypto_analytics"
    env["SECRET_KEY"] = "crypto-analytics-secret-key-2024-development"
    
    subprocess.Popen([
        sys.executable, "-m", "uvicorn", "backend.app.main:app",
        "--host", "0.0.0.0", "--port", "8000", "--reload"
    ], env=env, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    time.sleep(5)
    print("  ‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")

def main():
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´")
    print("=" * 50)
    
    force_postgresql_config()
    restart_all_services()
    
    print("\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

if __name__ == "__main__":
    main() 