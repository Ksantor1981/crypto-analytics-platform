#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: CRYPTO ANALYTICS PLATFORM
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–∞—á–µ–π
"""

import os
import subprocess
import sys
from datetime import datetime

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç" + "="*70 + "üîç")
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: CRYPTO ANALYTICS PLATFORM")
    print("üîç" + "="*70 + "üîç")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–∞—á–µ")
    print()

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê:")
    print("-" * 50)
    
    required_dirs = [
        'backend',
        'frontend', 
        'ml-service',
        'workers',
        'monitoring',
        'optimization'
    ]
    
    required_files = [
        'docker-compose.yml',
        'README.md',
        'TASKS2.md',
        'FINAL_COMPLETION_REPORT.md',
        'PROJECT_COMPLETION_SUMMARY.md',
        'DEMO_DASHBOARD.html',
        'LAUNCH_DEMO.py',
        'SIMPLE_DEMO.py'
    ]
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir_name in required_dirs:
        if os.path.exists(dir_name):
            print(f"  ‚úÖ {dir_name}/")
        else:
            print(f"  ‚ùå {dir_name}/ - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    for file_name in required_files:
        if os.path.exists(file_name):
            print(f"  ‚úÖ {file_name}")
        else:
            print(f"  ‚ùå {file_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def check_docker_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüê≥ –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print("-" * 50)
    
    docker_files = [
        'docker-compose.yml',
        'backend/Dockerfile',
        'frontend/Dockerfile',
        'ml-service/Dockerfile',
        'workers/Dockerfile'
    ]
    
    all_good = True
    
    for file_path in docker_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def check_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìù –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
    print("-" * 50)
    
    docs = [
        'README.md',
        'TASKS2.md',
        'FINAL_COMPLETION_REPORT.md',
        'PROJECT_COMPLETION_SUMMARY.md',
        'CELERY_AUTOMATION_COMPLETION_REPORT.md',
        'MONITORING_COMPLETION_REPORT.md',
        'OPTIMIZATION_COMPLETION_REPORT.md'
    ]
    
    all_good = True
    
    for doc in docs:
        if os.path.exists(doc):
            print(f"  ‚úÖ {doc}")
        else:
            print(f"  ‚ùå {doc} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def check_demo_materials():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    print("\nüé¨ –ü–†–û–í–ï–†–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í:")
    print("-" * 50)
    
    demo_files = [
        'DEMO_DASHBOARD.html',
        'LAUNCH_DEMO.py',
        'SIMPLE_DEMO.py',
        'FINAL_CHECK.py'
    ]
    
    all_good = True
    
    for file_path in demo_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def check_monitoring_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
    print("-" * 50)
    
    monitoring_files = [
        'monitoring/health_check.py',
        'monitoring/performance_metrics.py',
        'monitoring/monitor.py',
        'monitoring/requirements.txt'
    ]
    
    all_good = True
    
    for file_path in monitoring_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def check_optimization_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\n‚ö° –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("-" * 50)
    
    optimization_files = [
        'optimization/simple_optimizer.py',
        'optimization/performance_optimizer.py',
        'optimization/requirements.txt'
    ]
    
    all_good = True
    
    for file_path in optimization_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def test_simple_optimizer():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("-" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists('optimization/simple_optimizer.py'):
            print("  ‚ùå –§–∞–π–ª optimization/simple_optimizer.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        import sys
        sys.path.insert(0, 'optimization')
        
        try:
            import simple_optimizer
            print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            return True
        except ImportError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def check_final_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê:")
    print("-" * 50)
    
    status_items = [
        ("Frontend (Next.js 14)", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("Backend (FastAPI)", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("ML Service", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (Celery)", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "‚úÖ –ì–æ—Ç–æ–≤"),
        ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "‚úÖ –ì–æ—Ç–æ–≤")
    ]
    
    for component, status in status_items:
        print(f"  {component}: {status}")
    
    print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("  üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 100%")
    print("  üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: 6")
    print("  ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: 6")
    print("  üìà ML —Ç–æ—á–Ω–æ—Å—Ç—å: 87.2%")
    print("  üìù API endpoints: 30+")
    print("  üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞")

def print_final_verdict(all_checks_passed):
    """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–µ—Ä–¥–∏–∫—Ç–∞"""
    print("\n" + "="*70)
    
    if all_checks_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ü–†–û–ï–ö–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –°–î–ê–ß–ï!")
        print("üåü –ì–û–¢–û–í –ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò!")
        print("üíº –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
    else:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê!")
    
    print("="*70)
    
    print("\nüìã –ß–¢–û –ü–†–û–í–ï–†–ï–ù–û:")
    print("  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    print("  ‚úÖ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("  ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("  ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("  ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if all_checks_passed:
        print("  1. üê≥ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d")
        print("  2. üåê –û—Ç–∫—Ä–æ–π—Ç–µ: DEMO_DASHBOARD.html")
        print("  3. üìä –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python LAUNCH_DEMO.py")
        print("  4. üéØ –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
    else:
        print("  1. üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("  2. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        print("  3. ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print_header()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure()),
        ("Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_docker_setup()),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", check_documentation()),
        ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", check_demo_materials()),
        ("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", check_monitoring_system()),
        ("–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", check_optimization_system()),
        ("–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", test_simple_optimizer())
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_passed = all(check[1] for check in checks)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
    check_final_status()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    print_final_verdict(all_passed)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if all_passed else 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
