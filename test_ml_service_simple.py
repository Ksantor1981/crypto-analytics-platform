#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import httpx
import json
from datetime import datetime

async def test_ml_service():
    """–¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Service...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
    test_signal = {
        "asset": "BTCUSDT",
        "direction": "LONG",
        "entry_price": 45000.0,
        "target_price": 47000.0,
        "stop_loss": 43000.0,
        "channel_id": 1,
        "channel_accuracy": 0.75,
        "confidence": 0.8
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –¢–µ—Å—Ç 1: Health check
            print("üìä –¢–µ—Å—Ç 1: Health Check")
            response = await client.get("http://localhost:8001/api/v1/health/")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            print()
            
            # –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
            print("üìä –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
            response = await client.get("http://localhost:8001/api/v1/predictions/model/info")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                model_info = response.json()
                print(f"   –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {model_info.get('model_version', 'N/A')}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info.get('features_count', 'N/A')}")
                print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_info.get('model_type', 'N/A')}")
            print()
            
            # –¢–µ—Å—Ç 3: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            print("üìä –¢–µ—Å—Ç 3: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞")
            response = await client.post(
                "http://localhost:8001/api/v1/predictions/signal",
                json=test_signal
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                prediction = response.json()
                print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prediction.get('success_probability', 'N/A'):.2%}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 'N/A'):.2%}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {prediction.get('recommendation', 'N/A')}")
                print(f"   –†–∏—Å–∫-—Å–∫–æ—Ä: {prediction.get('risk_score', 'N/A'):.2f}")
                print(f"   –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {prediction.get('model_version', 'N/A')}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                features_importance = prediction.get('features_importance', {})
                if features_importance:
                    print("   –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                    for feature, importance in features_importance.items():
                        print(f"     - {feature}: {importance:.2%}")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
            print()
            
            # –¢–µ—Å—Ç 4: –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            print("üìä –¢–µ—Å—Ç 4: –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
            batch_request = {
                "signals": [
                    test_signal,
                    {
                        "asset": "ETHUSDT",
                        "direction": "SHORT",
                        "entry_price": 3000.0,
                        "target_price": 2800.0,
                        "stop_loss": 3200.0,
                        "channel_id": 2,
                        "channel_accuracy": 0.65,
                        "confidence": 0.6
                    }
                ]
            }
            
            response = await client.post(
                "http://localhost:8001/api/v1/predictions/batch",
                json=batch_request
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                batch_result = response.json()
                predictions = batch_result.get('predictions', [])
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions)}")
                
                for i, pred in enumerate(predictions):
                    print(f"   –°–∏–≥–Ω–∞–ª {i+1}:")
                    print(f"     - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {pred.get('success_probability', 'N/A'):.2%}")
                    print(f"     - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {pred.get('recommendation', 'N/A')}")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return False
    
    print("=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Service –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return True

if __name__ == "__main__":
    asyncio.run(test_ml_service()) 