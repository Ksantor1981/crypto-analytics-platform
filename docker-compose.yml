services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto-analytics-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-crypto_analytics}
      - POSTGRES_USER=${POSTGRES_USER:-crypto_analytics_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_postgres_password_2024!}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "${POSTGRES_PORT:-5432}:5432"  # Настраиваемый порт
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto_analytics_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_analytics_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: crypto-analytics-redis
    command: redis-server
    ports:
      - "${REDIS_PORT:-6379}:6379"  # Настраиваемый порт
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_analytics_network
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: crypto-analytics-backend
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://crypto_analytics_user:secure_postgres_password_2024!@postgres:5432/crypto_analytics}
      - REDIS_URL=${REDIS_URL:-redis://:secure_redis_password_2024!@redis:6379/0}  # Добавлен пароль
      - SECRET_KEY=${SECRET_KEY:-very_long_and_complex_secret_key_for_jwt_2024_minimum_32_characters}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      # Добавляем ML service URL
      - ML_SERVICE_URL=${ML_SERVICE_URL:-http://ml-service:8001}
      # API Keys для бирж (если нужны)
      - BYBIT_API_KEY=${BYBIT_API_KEY:-}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs  # Логи
    networks:
      - crypto_analytics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crypto-analytics-frontend
    environment:
      # Добавляем переменные для подключения к backend
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_ML_API_URL=${NEXT_PUBLIC_ML_API_URL:-http://localhost:8001}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy  # Ждем готовности backend
    volumes:
      - ./frontend:/app  # Для development
      - /app/node_modules  # Исключаем node_modules
    networks:
      - crypto_analytics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: crypto-analytics-ml-service
    environment:
      - REDIS_URL=${REDIS_URL:-redis://:secure_redis_password_2024!@redis:6379/1}  # Отдельная DB
      - MODEL_CACHE_ENABLED=${MODEL_CACHE_ENABLED:-true}
    ports:
      - "${ML_SERVICE_PORT:-8001}:8001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./ml-service:/app
      - ml_models:/app/models  # Кэш моделей
      - ml_logs:/app/logs      # Логи ML
    networks:
      - crypto_analytics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Опциональный nginx для production
  nginx:
    image: nginx:alpine
    container_name: crypto-analytics-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ml-service
    networks:
      - crypto_analytics_network
    restart: unless-stopped
    profiles:
      - production  # Запускается только с --profile production

  # Celery worker для торговых задач
  trading-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: crypto-analytics-trading-worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://crypto_analytics_user:secure_postgres_password_2024!@postgres:5432/crypto_analytics}
      - REDIS_URL=${REDIS_URL:-redis://:secure_redis_password_2024!@redis:6379/0}
      - SECRET_KEY=${SECRET_KEY:-very_long_and_complex_secret_key_for_jwt_2024_minimum_32_characters}
      - TRADING_ENCRYPTION_KEY=${TRADING_ENCRYPTION_KEY:-a374187449d497776d6901fdc756137bcd9f1f554863898dc61ff9ff921368ff}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - trading_worker_logs:/app/logs
    networks:
      - crypto_analytics_network
    restart: unless-stopped

  # Celery worker для сбора сигналов
  signal-worker:
    build: 
      context: ./workers
      dockerfile: Dockerfile
    container_name: crypto-analytics-signal-worker
    command: celery -A tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://crypto_analytics_user:secure_postgres_password_2024!@postgres:5432/crypto_analytics
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=very_long_and_complex_secret_key_for_jwt_2024_minimum_32_characters
      - ML_SERVICE_URL=http://ml-service:8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    volumes:
      - ./workers:/app
      - signal_worker_logs:/app/logs
    networks:
      - crypto_analytics_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  trading_worker_logs:
  signal_worker_logs:
  ml_models:
  ml_logs:
  worker_logs:

networks:
  crypto_analytics_network:
    driver: bridge