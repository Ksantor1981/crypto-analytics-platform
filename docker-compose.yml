services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto-analytics-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-crypto_analytics}
      - POSTGRES_USER=${POSTGRES_USER:-crypto_analytics_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_postgres_password_2024!}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto_analytics_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_analytics_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: crypto-analytics-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password_2024!}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_analytics_network
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: crypto-analytics-backend
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://crypto_analytics_user:secure_postgres_password_2024!@postgres:5432/crypto_analytics}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - SECRET_KEY=${SECRET_KEY:-very_long_and_complex_secret_key_for_jwt_2024_minimum_32_characters}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - crypto_analytics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crypto-analytics-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - crypto_analytics_network
    restart: unless-stopped

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: crypto-analytics-ml-service
    ports:
      - "8001:8001"
    networks:
      - crypto_analytics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:

networks:
  crypto_analytics_network:
    driver: bridge
