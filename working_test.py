import requests
import json

def test_working_system():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã")
    
    # –¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è ML API
    ml_url = "http://localhost:8001/api/v1/predictions/signal"
    
    data = {
        "asset": "BTC",
        "direction": "LONG",
        "entry_price": 45000.0,
        "target_price": 47000.0,
        "stop_loss": 43000.0,
        "channel_id": 1,
        "channel_accuracy": 0.75,
        "confidence": 0.8
    }
    
    try:
        response = requests.post(ml_url, json=data)
        print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ ML —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   üí° –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {result['success_probability']:.1%}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {result['confidence']:.1%}")
            print(f"   üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']}")
            print(f"   ‚ö†Ô∏è  –†–∏—Å–∫: {result['risk_score']:.1%}")
            print(f"   üîß –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {result['model_version']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...")
    try:
        info_url = "http://localhost:8001/api/v1/predictions/model/info"
        response = requests.get(info_url)
        
        if response.status_code == 200:
            info = response.json()
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞!")
            print(f"   üìã –í–µ—Ä—Å–∏—è: {info['model_version']}")
            print(f"   üéØ –¢–∏–ø: {info['model_type']}")
            print(f"   üìä –û–±—É—á–µ–Ω–∞: {'–î–∞' if info['is_trained'] else '–ù–µ—Ç'}")
            print(f"   üè∑Ô∏è  –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(info['feature_names'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç Backend API
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
    try:
        backend_url = "http://localhost:8000/docs"
        response = requests.get(backend_url)
        
        if response.status_code == 200:
            print("‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("   üìñ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print("\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
    print("   ‚úÖ ML Service: –†–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ Backend API: –†–∞–±–æ—Ç–∞–µ—Ç") 
    print("   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: –†–∞–±–æ—Ç–∞—é—Ç")
    print("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –î–æ—Å—Ç—É–ø–Ω–∞")
    
    print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ demo.html –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

if __name__ == "__main__":
    test_working_system() 