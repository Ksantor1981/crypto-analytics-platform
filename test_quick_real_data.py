#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ Bybit)
"""
import asyncio
import sys
import os
sys.path.append('workers')

from workers.real_data_config import *
from workers.exchange.bybit_client import BybitClient
from workers.exchange.price_monitor import PriceMonitor

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç Bybit API
    print("üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bybit API...")
    try:
        async with BybitClient() as client:
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_ok = await client.test_connection()
            print(f"   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'OK' if connection_ok else 'FAILED'}")
            
            if connection_ok:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                prices = await client.get_current_prices(CRYPTO_SYMBOLS)
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω: {len(prices)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ü–µ–Ω
                for i, (symbol, price) in enumerate(list(prices.items())[:5]):
                    print(f"      {symbol}: ${price}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC
                market_data = await client.get_market_data(["BTCUSDT", "ETHUSDT"])
                print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(market_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                for symbol, data in market_data.items():
                    print(f"      {symbol}:")
                    print(f"        –¶–µ–Ω–∞: ${data.get('current_price', 'N/A')}")
                    print(f"        24h: {data.get('change_24h', 0):.2f}%")
                    print(f"        –û–±—ä–µ–º: {data.get('volume_24h', 0):.2f}")
                
                return True
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return False

async def test_price_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
    
    try:
        monitor = PriceMonitor(use_real_data=True)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä
        test_symbols = ["BTC/USDT", "ETH/USDT", "ADA/USDT", "SOL/USDT"]
        prices = {}
        
        for symbol in test_symbols:
            price = await monitor.get_current_price(symbol)
            if price:
                prices[symbol] = price
                print(f"   ‚úÖ {symbol}: ${price:.4f}")
        
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(prices)}/{len(test_symbols)} —Ü–µ–Ω")
        return len(prices) > 0
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ—Å—Ç Bybit
    bybit_ok = await quick_test()
    
    # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_ok = await test_price_monitor()
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 50)
    print(f"üè¶ Bybit API: {'‚úÖ OK' if bybit_ok else '‚ùå FAILED'}")
    print(f"üìä Price Monitor: {'‚úÖ OK' if monitor_ok else '‚ùå FAILED'}")
    
    if bybit_ok and monitor_ok:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("üìà –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML —Å–µ—Ä–≤–∏—Å–æ–º")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    return bybit_ok and monitor_ok

if __name__ == "__main__":
    asyncio.run(main()) 