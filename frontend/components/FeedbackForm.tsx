import React, { useState } from 'react';
import { Button, TextField, Select, MenuItem, FormControl, InputLabel, Alert, Box, Typography, Paper } from '@mui/material';

interface FeedbackFormData {
  feedback_type: 'question' | 'suggestion' | 'bug_report' | 'feature_request' | 'general';
  subject: string;
  message: string;
  user_email: string;
  user_telegram: string;
}

const FeedbackForm: React.FC = () => {
  const [formData, setFormData] = useState<FeedbackFormData>({
    feedback_type: 'general',
    subject: '',
    message: '',
    user_email: '',
    user_telegram: ''
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'success' | 'error' | null>(null);
  const [submitMessage, setSubmitMessage] = useState('');

  const handleInputChange = (field: keyof FeedbackFormData) => (
    event: React.ChangeEvent<HTMLInputElement | { value: unknown }>
  ) => {
    setFormData({
      ...formData,
      [field]: event.target.value
    });
  };

  const validateForm = (): boolean => {
    if (!formData.subject.trim()) {
      setSubmitMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è');
      setSubmitStatus('error');
      return false;
    }

    if (!formData.message.trim() || formData.message.length < 10) {
      setSubmitMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
      setSubmitStatus('error');
      return false;
    }

    if (formData.user_email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.user_email)) {
      setSubmitMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
      setSubmitStatus('error');
      return false;
    }

    return true;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      const response = await fetch('/api/feedback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          user_email: formData.user_email || undefined,
          user_telegram: formData.user_telegram || undefined,
        }),
      });

      if (response.ok) {
        setSubmitStatus('success');
        setSubmitMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({
          feedback_type: 'general',
          subject: '',
          message: '',
          user_email: '',
          user_telegram: ''
        });
      } else {
        const errorData = await response.json();
        setSubmitStatus('error');
        setSubmitMessage(errorData.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      }
    } catch (error) {
      setSubmitStatus('error');
      setSubmitMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const feedbackTypes = [
    { value: 'question', label: '‚ùì –í–æ–ø—Ä–æ—Å', description: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–µ' },
    { value: 'suggestion', label: 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', description: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è' },
    { value: 'bug_report', label: 'üêõ –û—à–∏–±–∫–∞', description: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ' },
    { value: 'feature_request', label: 'üöÄ –§—É–Ω–∫—Ü–∏—è', description: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é' },
    { value: 'general', label: 'üìù –û–±—â–µ–µ', description: '–õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }
  ];

  return (
    <Paper elevation={3} sx={{ p: 4, maxWidth: 600, mx: 'auto', mt: 4 }}>
      <Typography variant="h4" component="h2" gutterBottom align="center">
        üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      </Typography>
      
      <Typography variant="body1" color="text.secondary" align="center" sx={{ mb: 3 }}>
        –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –æ—Ç –≤–∞—Å!
      </Typography>

      {submitStatus && (
        <Alert severity={submitStatus} sx={{ mb: 3 }}>
          {submitMessage}
        </Alert>
      )}

      <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
        <FormControl fullWidth sx={{ mb: 3 }}>
          <InputLabel>–¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</InputLabel>
          <Select
            value={formData.feedback_type}
            label="–¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
            onChange={handleInputChange('feedback_type')}
          >
            {feedbackTypes.map((type) => (
              <MenuItem key={type.value} value={type.value}>
                <Box>
                  <Typography variant="body1">{type.label}</Typography>
                  <Typography variant="caption" color="text.secondary">
                    {type.description}
                  </Typography>
                </Box>
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <TextField
          fullWidth
          label="–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
          value={formData.subject}
          onChange={handleInputChange('subject')}
          required
          sx={{ mb: 3 }}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤"
        />

        <TextField
          fullWidth
          label="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
          value={formData.message}
          onChange={handleInputChange('message')}
          required
          multiline
          rows={6}
          sx={{ mb: 3 }}
          placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å!"
        />

        <TextField
          fullWidth
          label="Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          type="email"
          value={formData.user_email}
          onChange={handleInputChange('user_email')}
          sx={{ mb: 3 }}
          placeholder="your@email.com"
          helperText="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à email"
        />

        <TextField
          fullWidth
          label="Telegram username (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          value={formData.user_telegram}
          onChange={handleInputChange('user_telegram')}
          sx={{ mb: 3 }}
          placeholder="@username"
          helperText="–î–ª—è —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ Telegram"
        />

        <Button
          type="submit"
          fullWidth
          variant="contained"
          size="large"
          disabled={isSubmitting}
          sx={{ mt: 2 }}
        >
          {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'}
        </Button>
      </Box>

      <Box sx={{ mt: 4, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
        <Typography variant="body2" color="text.secondary">
          üí° <strong>–°–æ–≤–µ—Ç—ã:</strong>
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
          ‚Ä¢ –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å
        </Typography>
        <Typography variant="body2" color="text.secondary">
          ‚Ä¢ –ï—Å–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç–µ –æ–± –æ—à–∏–±–∫–µ, —É–∫–∞–∂–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –µ—ë –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        </Typography>
        <Typography variant="body2" color="text.secondary">
          ‚Ä¢ –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
        </Typography>
      </Box>
    </Paper>
  );
};

export default FeedbackForm;
