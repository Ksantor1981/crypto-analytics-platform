import React, { useState } from 'react';
import Head from 'next/head';
import { DashboardLayout } from '@/components/dashboard/DashboardLayout';
import { Card, CardHeader, CardBody } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Badge } from '@/components/ui/Badge';
import { useAuth } from '@/contexts/AuthContext';
import { useTheme } from '@/contexts/ThemeContext';
import { formatDate } from '@/lib/utils';

export default function ProfilePage() {
  const { user, updateUser } = useAuth();
  const { theme, toggleTheme } = useTheme();
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    full_name: user?.full_name || '',
    email: user?.email || '',
    telegram_username: user?.telegram_username || '',
    notification_settings: {
      email_notifications: true,
      telegram_notifications: true,
      signal_alerts: true,
      weekly_reports: true
    }
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleNotificationChange = (setting: string, value: boolean) => {
    setFormData(prev => ({
      ...prev,
      notification_settings: {
        ...prev.notification_settings,
        [setting]: value
      }
    }));
  };

  const handleSave = async () => {
    setIsLoading(true);
    try {
      await updateUser(formData);
      setIsEditing(false);
    } catch (error) {
      console.error('Error updating profile:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    setFormData({
      full_name: user?.full_name || '',
      email: user?.email || '',
      telegram_username: user?.telegram_username || '',
      notification_settings: {
        email_notifications: true,
        telegram_notifications: true,
        signal_alerts: true,
        weekly_reports: true
      }
    });
    setIsEditing(false);
  };

  return (
    <>
      <Head>
        <title>–ü—Ä–æ—Ñ–∏–ª—å - Crypto Analytics Platform</title>
        <meta name="description" content="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" />
      </Head>

      <DashboardLayout>
        <div className="space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">–ü—Ä–æ—Ñ–∏–ª—å</h1>
              <p className="text-gray-600">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <Button
                variant="outline"
                onClick={toggleTheme}
              >
                {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'} 
                {theme === 'light' ? '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞' : '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'}
              </Button>
              {!isEditing ? (
                <Button
                  variant="primary"
                  onClick={() => setIsEditing(true)}
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              ) : (
                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    onClick={handleCancel}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button
                    variant="primary"
                    onClick={handleSave}
                    disabled={isLoading}
                  >
                    {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </Button>
                </div>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Profile info */}
            <div className="lg:col-span-2 space-y-6">
              <Card>
                <CardHeader>
                  <h3 className="text-lg font-semibold text-gray-900">
                    –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </h3>
                </CardHeader>
                <CardBody className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ü–æ–ª–Ω–æ–µ –∏–º—è
                    </label>
                    {isEditing ? (
                      <Input
                        value={formData.full_name}
                        onChange={(e) => handleInputChange('full_name', e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      />
                    ) : (
                      <p className="text-gray-900">{user?.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Email
                    </label>
                    {isEditing ? (
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => handleInputChange('email', e.target.value)}
                        placeholder="your@email.com"
                      />
                    ) : (
                      <p className="text-gray-900">{user?.email}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Telegram username
                    </label>
                    {isEditing ? (
                      <Input
                        value={formData.telegram_username}
                        onChange={(e) => handleInputChange('telegram_username', e.target.value)}
                        placeholder="@username"
                      />
                    ) : (
                      <p className="text-gray-900">
                        {user?.telegram_username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    </label>
                    <p className="text-gray-900">
                      {user?.created_at ? formatDate(user.created_at) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </p>
                  </div>
                </CardBody>
              </Card>

              {/* Notification settings */}
              <Card>
                <CardHeader>
                  <h3 className="text-lg font-semibold text-gray-900">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </h3>
                </CardHeader>
                <CardBody className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                      <p className="text-sm text-gray-600">
                        –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.notification_settings.email_notifications}
                        onChange={(e) => handleNotificationChange('email_notifications', e.target.checked)}
                        className="sr-only peer"
                        disabled={!isEditing}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                      <p className="text-sm text-gray-600">
                        –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.notification_settings.telegram_notifications}
                        onChange={(e) => handleNotificationChange('telegram_notifications', e.target.checked)}
                        className="sr-only peer"
                        disabled={!isEditing}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö</h4>
                      <p className="text-sm text-gray-600">
                        –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.notification_settings.signal_alerts}
                        onChange={(e) => handleNotificationChange('signal_alerts', e.target.checked)}
                        className="sr-only peer"
                        disabled={!isEditing}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</h4>
                      <p className="text-sm text-gray-600">
                        –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.notification_settings.weekly_reports}
                        onChange={(e) => handleNotificationChange('weekly_reports', e.target.checked)}
                        className="sr-only peer"
                        disabled={!isEditing}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                </CardBody>
              </Card>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Account status */}
              <Card>
                <CardHeader>
                  <h3 className="text-lg font-semibold text-gray-900">
                    –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                  </h3>
                </CardHeader>
                <CardBody className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">–°—Ç–∞—Ç—É—Å</span>
                    <Badge variant="success">–ê–∫—Ç–∏–≤–µ–Ω</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">–ü–æ–¥–ø–∏—Å–∫–∞</span>
                    <Badge variant="warning">–ë–∞–∑–æ–≤–∞—è</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">–ö–∞–Ω–∞–ª–æ–≤</span>
                    <span className="font-medium">3</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">–°–∏–≥–Ω–∞–ª–æ–≤</span>
                    <span className="font-medium">127</span>
                  </div>
                </CardBody>
              </Card>

              {/* Quick actions */}
              <Card>
                <CardHeader>
                  <h3 className="text-lg font-semibold text-gray-900">
                    –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                  </h3>
                </CardHeader>
                <CardBody className="space-y-3">
                  <Button variant="outline" className="w-full justify-start">
                    üîê –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
                  </Button>
                  <Button variant="outline" className="w-full justify-start text-red-600 hover:text-red-700">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                  </Button>
                </CardBody>
              </Card>

              {/* Security */}
              <Card>
                <CardHeader>
                  <h3 className="text-lg font-semibold text-gray-900">
                    –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                  </h3>
                </CardHeader>
                <CardBody className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">2FA</span>
                    <Badge variant="secondary">–û—Ç–∫–ª—é—á–µ–Ω–æ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</span>
                    <span className="text-sm text-gray-500">–°–µ–≥–æ–¥–Ω—è</span>
                  </div>
                  <Button variant="outline" className="w-full">
                    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å 2FA
                  </Button>
                </CardBody>
              </Card>
            </div>
          </div>
        </div>
      </DashboardLayout>
    </>
  );
} 