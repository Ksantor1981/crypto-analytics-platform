import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Crown,
  Star,
  Zap,
  Check,
  X,
  TrendingUp,
  BarChart3,
  Shield,
  Infinity,
} from 'lucide-react';
import { PLANS, UserPlan } from '@/hooks/useUserLimits';

interface UpgradeModalProps {
  isOpen: boolean;
  onClose: () => void;
  currentPlan: UserPlan;
  limitType: 'channels' | 'ratings' | 'analytics' | 'api';
  title?: string;
  description?: string;
}

export function UpgradeModal({
  isOpen,
  onClose,
  currentPlan,
  limitType,
  title,
  description,
}: UpgradeModalProps) {
  const [selectedPlan, setSelectedPlan] = useState<string>('Premium');

  const getLimitMessage = () => {
    switch (limitType) {
      case 'channels':
        return {
          title: title || '–õ–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
          description:
            description ||
            `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ ${currentPlan.channelsLimit} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${currentPlan.name}. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤.`,
          icon: <BarChart3 className="h-12 w-12 text-blue-600" />,
        };
      case 'ratings':
        return {
          title: title || '–õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤',
          description:
            description ||
            `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–ø-${currentPlan.ratingsLimit} –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ç–∞—Ä–∏—Ñ–µ ${currentPlan.name}. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.`,
          icon: <TrendingUp className="h-12 w-12 text-green-600" />,
        };
      case 'analytics':
        return {
          title: title || '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
          description:
            description ||
            '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ ML-–ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Premium –∏ Pro —Ç–∞—Ä–∏—Ñ–∞—Ö.',
          icon: <Zap className="h-12 w-12 text-purple-600" />,
        };
      case 'api':
        return {
          title: title || 'API –¥–æ—Å—Ç—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          description:
            description ||
            'API –¥–æ—Å—Ç—É–ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Pro —Ç–∞—Ä–∏—Ñ–µ.',
          icon: <Shield className="h-12 w-12 text-red-600" />,
        };
      default:
        return {
          title: '–û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω',
          description:
            '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å Premium –∏–ª–∏ Pro —Ç–∞—Ä–∏—Ñ–æ–º.',
          icon: <Crown className="h-12 w-12 text-yellow-600" />,
        };
    }
  };

  const limitMessage = getLimitMessage();

  const planCards = Object.values(PLANS)
    .filter(plan => plan.name !== 'Free')
    .map(plan => (
      <Card
        key={plan.name}
        className={`cursor-pointer transition-all duration-200 ${
          selectedPlan === plan.name
            ? 'ring-2 ring-blue-500 border-blue-500'
            : 'hover:border-gray-300'
        }`}
        onClick={() => setSelectedPlan(plan.name)}
      >
        <CardHeader className="text-center pb-4">
          <div className="flex items-center justify-center mb-2">
            {plan.name === 'Premium' ? (
              <Star className="h-8 w-8 text-blue-600" />
            ) : (
              <Crown className="h-8 w-8 text-purple-600" />
            )}
          </div>
          <CardTitle className="text-xl">{plan.name}</CardTitle>
          <div className="text-3xl font-bold">
            {plan.price}‚ÇΩ
            <span className="text-sm font-normal text-gray-500">/–º–µ—Å—è—Ü</span>
          </div>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <Check className="h-4 w-4 text-green-600" />
              <span className="text-sm">
                {plan.channelsLimit === -1
                  ? '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'
                  : plan.channelsLimit}{' '}
                –∫–∞–Ω–∞–ª–æ–≤
              </span>
            </div>
            <div className="flex items-center gap-2">
              <Check className="h-4 w-4 text-green-600" />
              <span className="text-sm">
                {plan.ratingsLimit === -1
                  ? '–ü–æ–ª–Ω—ã–π'
                  : `–¢–æ–ø-${plan.ratingsLimit}`}{' '}
                —Ä–µ–π—Ç–∏–Ω–≥
              </span>
            </div>
            <div className="flex items-center gap-2">
              <Check className="h-4 w-4 text-green-600" />
              <span className="text-sm">–ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ —Ö—É–¥—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤</span>
            </div>
            {plan.hasAdvancedAnalytics ? (
              <div className="flex items-center gap-2">
                <Check className="h-4 w-4 text-green-600" />
                <span className="text-sm">–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è ML-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <X className="h-4 w-4 text-gray-400" />
                <span className="text-sm text-gray-400">
                  –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è ML-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                </span>
              </div>
            )}
            {plan.hasAPIAccess ? (
              <div className="flex items-center gap-2">
                <Check className="h-4 w-4 text-green-600" />
                <span className="text-sm">API –¥–æ—Å—Ç—É–ø</span>
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <X className="h-4 w-4 text-gray-400" />
                <span className="text-sm text-gray-400">API –¥–æ—Å—Ç—É–ø</span>
              </div>
            )}
          </div>
          {selectedPlan === plan.name && (
            <Badge className="w-full justify-center bg-blue-600">–í—ã–±—Ä–∞–Ω–æ</Badge>
          )}
        </CardContent>
      </Card>
    ));

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader className="text-center">
          <div className="flex justify-center mb-4">{limitMessage.icon}</div>
          <DialogTitle className="text-2xl">{limitMessage.title}</DialogTitle>
          <DialogDescription className="text-lg">
            {limitMessage.description}
          </DialogDescription>
        </DialogHeader>

        <div className="grid md:grid-cols-2 gap-6 mt-6">{planCards}</div>

        <div className="flex gap-4 mt-6">
          <Button variant="outline" onClick={onClose} className="flex-1">
            –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ Free
          </Button>
          <Button
            onClick={() => {
              // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
              console.log('Upgrading to:', selectedPlan);
              onClose();
            }}
            className="flex-1 bg-blue-600 hover:bg-blue-700"
          >
            –û–±–Ω–æ–≤–∏—Ç—å –¥–æ {selectedPlan}
          </Button>
        </div>

        <div className="text-center text-sm text-gray-500 mt-4">
          üí≥ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stripe ‚Ä¢ üîÑ –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
        </div>
      </DialogContent>
    </Dialog>
  );
}


