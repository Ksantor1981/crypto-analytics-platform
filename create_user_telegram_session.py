#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ USER —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram API (–Ω–µ bot)
–¢—Ä–µ–±—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import os
from telethon import TelegramClient

async def create_user_session():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Telegram"""
    
    # API –¥–∞–Ω–Ω—ã–µ –∏–∑ workers/telegram_config.env
    api_id = 21073808
    api_hash = "2e3adb8940912dd295fe20c1d2ce5368"
    session_name = "user_telegram_session"
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ USER —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram...")
    print("=" * 50)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7): ")
    
    if not phone.startswith('+'):
        phone = '+' + phone
    
    print(f"üìû –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä: {phone}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ USER (–Ω–µ bot)
    client = TelegramClient(session_name, api_id, api_hash)
    
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.start(phone=phone)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or 'no_username'})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º...")
        test_channels = ['crypto', 'bitcoin', 'ethereum']
        
        accessible_channels = []
        for channel in test_channels:
            try:
                entity = await client.get_entity(channel)
                print(f"  ‚úÖ @{channel} - –¥–æ—Å—Ç—É–ø–µ–Ω ({entity.title})")
                accessible_channels.append(channel)
            except Exception as e:
                print(f"  ‚ùå @{channel} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)[:50]}")
        
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(accessible_channels)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if accessible_channels:
            test_channel = accessible_channels[0]
            print(f"\nüì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @{test_channel}...")
            try:
                messages = await client.get_messages(test_channel, limit=3)
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                for i, msg in enumerate(messages[:2], 1):
                    if msg.text:
                        preview = msg.text[:60].replace('\n', ' ')
                        print(f"  {i}. {preview}...")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        await client.disconnect()
        
        print(f"\n‚úÖ USER —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {session_name}.session")
        print("üìã –¢–µ–ø–µ—Ä—å —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:")
        print(f"   docker cp {session_name}.session crypto-analytics-backend:/app/telegram_session.session")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        await client.disconnect()
        return False

if __name__ == "__main__":
    print("üì± –°–û–ó–î–ê–ù–ò–ï TELEGRAM USER SESSION")
    print("=" * 50)
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç:")
    print("   - –î–æ—Å—Ç—É–ø –∫ SMS/–∑–≤–æ–Ω–∫–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
    print("   - –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram")
    print("   - –í–æ–∑–º–æ–∂–Ω–æ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)")
    print("=" * 50)
    
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
    if confirm.lower() in ['y', 'yes', '–¥–∞']:
        asyncio.run(create_user_session())
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
