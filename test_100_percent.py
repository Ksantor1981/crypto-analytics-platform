#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç 100% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import httpx
import json
import time
from datetime import datetime
from typing import Dict, List, Any

class PlatformTester:
    def __init__(self):
        self.backend_url = "http://localhost:8000"
        self.ml_service_url = "http://localhost:8001"
        self.results = []
        
    async def test_backend_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Backend API"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
        
        tests = [
            ("GET", "/docs", "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
            ("GET", "/openapi.json", "OpenAPI —Å—Ö–µ–º–∞"),
        ]
        
        results = []
        async with httpx.AsyncClient(timeout=10.0) as client:
            for method, endpoint, description in tests:
                try:
                    url = f"{self.backend_url}{endpoint}"
                    response = await client.request(method, url)
                    
                    success = response.status_code == 200
                    results.append({
                        "test": description,
                        "url": url,
                        "status": "‚úÖ –ü–†–û–ô–î–ï–ù" if success else f"‚ùå –û–®–ò–ë–ö–ê {response.status_code}",
                        "response_time": response.elapsed.total_seconds(),
                        "success": success
                    })
                except Exception as e:
                    results.append({
                        "test": description,
                        "url": f"{self.backend_url}{endpoint}",
                        "status": f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}",
                        "success": False
                    })
        
        return {
            "component": "Backend API",
            "tests": results,
            "success_rate": sum(1 for r in results if r["success"]) / len(results)
        }
    
    async def test_ml_service_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ML Service"""
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Service...")
        
        tests = [
            ("GET", "/docs", "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
            ("GET", "/api/v1/health/", "Health check"),
            ("GET", "/api/v1/predictions/model/info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"),
        ]
        
        results = []
        async with httpx.AsyncClient(timeout=10.0) as client:
            for method, endpoint, description in tests:
                try:
                    url = f"{self.ml_service_url}{endpoint}"
                    response = await client.request(method, url)
                    
                    success = response.status_code == 200
                    results.append({
                        "test": description,
                        "url": url,
                        "status": "‚úÖ –ü–†–û–ô–î–ï–ù" if success else f"‚ùå –û–®–ò–ë–ö–ê {response.status_code}",
                        "response_time": response.elapsed.total_seconds(),
                        "success": success
                    })
                except Exception as e:
                    results.append({
                        "test": description,
                        "url": f"{self.ml_service_url}{endpoint}",
                        "status": f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}",
                        "success": False
                    })
        
        return {
            "component": "ML Service",
            "tests": results,
            "success_rate": sum(1 for r in results if r["success"]) / len(results)
        }
    
    async def test_ml_predictions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        
        test_signal = {
            "asset": "BTCUSDT",
            "direction": "LONG",
            "entry_price": 45000.0,
            "target_price": 47000.0,
            "stop_loss": 43000.0
        }
        
        tests = [
            ("POST", "/api/v1/predictions/predict", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞", test_signal),
            ("GET", "/api/v1/predictions/model/info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", None)
        ]
        
        results = []
        async with httpx.AsyncClient(timeout=30.0) as client:
            for method, endpoint, description, data in tests:
                try:
                    url = f"{self.ml_service_url}{endpoint}"
                    if data:
                        response = await client.request(method, url, json=data)
                    else:
                        response = await client.request(method, url)
                    
                    success = response.status_code == 200
                    prediction_data = None
                    
                    if success:
                        prediction_data = response.json()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                        if endpoint == "/api/v1/predictions/predict":
                            required_fields = ["prediction", "confidence", "recommendation"]
                            success = all(field in prediction_data for field in required_fields)
                        elif endpoint == "/api/v1/predictions/model/info":
                            required_fields = ["model_version", "model_type"]
                            success = all(field in prediction_data for field in required_fields)
                    
                    results.append({
                        "test": description,
                        "url": url,
                        "status": "‚úÖ –ü–†–û–ô–î–ï–ù" if success else f"‚ùå –û–®–ò–ë–ö–ê {response.status_code}",
                        "response_time": response.elapsed.total_seconds(),
                        "success": success,
                        "prediction_data": prediction_data
                    })
                except Exception as e:
                    results.append({
                        "test": description,
                        "url": f"{self.ml_service_url}{endpoint}",
                        "status": f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}",
                        "success": False
                    })
        
        return {
            "component": "ML Predictions",
            "tests": results,
            "success_rate": sum(1 for r in results if r["success"]) / len(results)
        }
    
    async def test_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        tests = [
            ("GET", "/api/v1/ml/health", "ML Service Health —á–µ—Ä–µ–∑ Backend"),
            ("GET", "/api/v1/ml/model/info", "ML Model Info —á–µ—Ä–µ–∑ Backend"),
        ]
        
        results = []
        async with httpx.AsyncClient(timeout=10.0) as client:
            for method, endpoint, description in tests:
                try:
                    url = f"{self.backend_url}{endpoint}"
                    response = await client.request(method, url)
                    
                    # –î–ª—è —ç—Ç–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ–∂–∏–¥–∞–µ–º –ª–∏–±–æ 200, –ª–∏–±–æ 401 (–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                    success = response.status_code in [200, 401]
                    results.append({
                        "test": description,
                        "url": url,
                        "status": "‚úÖ –ü–†–û–ô–î–ï–ù" if success else f"‚ùå –û–®–ò–ë–ö–ê {response.status_code}",
                        "response_time": response.elapsed.total_seconds(),
                        "success": success
                    })
                except Exception as e:
                    results.append({
                        "test": description,
                        "url": f"{self.backend_url}{endpoint}",
                        "status": f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}",
                        "success": False
                    })
        
        return {
            "component": "Service Integration",
            "tests": results,
            "success_rate": sum(1 for r in results if r["success"]) / len(results)
        }
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–õ–ê–¢–§–û–†–ú–´")
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_results = await asyncio.gather(
            self.test_backend_health(),
            self.test_ml_service_health(),
            self.test_ml_predictions(),
            self.test_integration()
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 80)
        
        total_success_rate = 0
        total_components = len(test_results)
        
        for result in test_results:
            component = result["component"]
            success_rate = result["success_rate"]
            total_success_rate += success_rate
            
            print(f"\nüîß {component}: {success_rate:.1%} —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
            
            for test in result["tests"]:
                print(f"   {test['status']} {test['test']}")
                if 'response_time' in test:
                    print(f"      –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test['response_time']:.3f}s")
                if test.get('prediction_data') and 'success_probability' in test['prediction_data']:
                    pred = test['prediction_data']
                    print(f"      –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {pred['success_probability']:.1%} –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, {pred['recommendation']}")
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        overall_success_rate = total_success_rate / total_components
        
        print("\n" + "=" * 80)
        print(f"üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {overall_success_rate:.1%} –ì–û–¢–û–í–ù–û–°–¢–ò –ü–õ–ê–¢–§–û–†–ú–´")
        
        if overall_success_rate >= 0.9:
            print("‚úÖ –ü–õ–ê–¢–§–û–†–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print("üöÄ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif overall_success_rate >= 0.7:
            print("‚ö†Ô∏è  –ü–õ–ê–¢–§–û–†–ú–ê –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–ê")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("‚ùå –ü–õ–ê–¢–§–û–†–ú–ê –ù–ï –ì–û–¢–û–í–ê")
            print("üõ†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print("=" * 80)
        
        return overall_success_rate

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlatformTester()
    success_rate = await tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if success_rate >= 0.9:
        exit(0)  # –£—Å–ø–µ—Ö
    else:
        exit(1)  # –û—à–∏–±–∫–∞

if __name__ == "__main__":
    asyncio.run(main()) 