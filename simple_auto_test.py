#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
import time
from datetime import datetime

def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
        sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))
        
        print("‚úÖ –ü—É—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_telegram_client():
    """–¢–µ—Å—Ç Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        from workers.telegram.telegram_client import TelegramSignalCollector
        
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        collector = TelegramSignalCollector(use_real_config=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–ª—è —Ç–µ—Å—Ç–∞
        print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"   –ö–∞–Ω–∞–ª–æ–≤: {len(collector.channels)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def test_signal_processor():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from workers.telegram.signal_processor import TelegramSignalProcessor
        
        processor = TelegramSignalProcessor()
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
        return False

def test_ml_service():
    """–¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML —Å–µ—Ä–≤–∏—Å–∞
        response = requests.get("http://localhost:8001/health", timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ ML —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå ML —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ML —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        import sqlite3
        
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"   –¢–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        cursor.execute("SELECT COUNT(*) FROM signals")
        signals_count = cursor.fetchone()[0]
        print(f"   –°–∏–≥–Ω–∞–ª–æ–≤: {signals_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_simple_collection():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from workers.telegram.telegram_client import collect_telegram_signals_sync
        
        print("üì° –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = collect_telegram_signals_sync()
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"   –°–∏–≥–Ω–∞–ª–æ–≤: {result.get('total_signals', 0)}")
        
        if result.get('signals'):
            print(f"   –ü—Ä–∏–º–µ—Ä: {result['signals'][0].get('asset', 'N/A')} {result['signals'][0].get('direction', 'N/A')}")
        
        return result.get('status') == 'success'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ë–û–†–ê")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results.append(("–ò–º–ø–æ—Ä—Ç—ã", test_basic_imports()))
    results.append(("Telegram –∫–ª–∏–µ–Ω—Ç", test_telegram_client()))
    results.append(("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤", test_signal_processor()))
    results.append(("ML —Å–µ—Ä–≤–∏—Å", test_ml_service()))
    results.append(("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database()))
    results.append(("–°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤", test_simple_collection()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    success_count = 0
    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {name}: {status}")
        if result:
            success_count += 1
    
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {success_count}/{len(results)} ({success_count/len(results)*100:.1f}%)")
    
    if success_count == len(results):
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
    elif success_count >= len(results) * 0.8:
        print("‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
    
    print("=" * 50)

if __name__ == "__main__":
    main()
