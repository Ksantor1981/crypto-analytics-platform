#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
Crypto Analytics Platform - –ó–∞–¥–∞—á–∞ 0.4.3
"""

import sys
import json
import time
import psutil
import subprocess
import requests
from datetime import datetime
from typing import Dict, List, Any, Tuple
import os
import socket

class ComponentChecker:
    def __init__(self):
        self.results = {}
        self.start_time = time.time()
        self.errors = []
        self.warnings = []
        
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("=" * 80)
        print(f"üîç {title}")
        print("=" * 80)
    
    def print_step(self, step: str):
        """–ü–µ—á–∞—Ç—å —ç—Ç–∞–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print(f"\nüìã {step}")
        print("-" * 60)
    
    def check_status(self, name: str, status: bool, details: str = ""):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        print(f"  {icon} {name}: {'OK' if status else 'FAILED'}")
        if details:
            print(f"     {details}")
        
        self.results[name] = {
            "status": status,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        
        if not status:
            self.errors.append(f"{name}: {details}")
        
        return status
    
    def check_docker_containers(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Desktop
            result = subprocess.run(['docker', '--version'], 
                                 capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                self.check_status("Docker Desktop", False, "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            self.check_status("Docker Desktop", True, f"–í–µ—Ä—Å–∏—è: {result.stdout.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            result = subprocess.run(['docker', 'ps', '--format', 'json'], 
                                 capture_output=True, text=True, timeout=15)
            
            if result.returncode != 0:
                self.check_status("Docker Containers", False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
                return False
            
            containers = []
            if result.stdout.strip():
                for line in result.stdout.strip().split('\n'):
                    try:
                        container = json.loads(line)
                        containers.append(container)
                    except:
                        continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            required_containers = [
                'crypto-analytics-postgres',
                'crypto-analytics-redis',
                'crypto_analytics_ml'
            ]
            
            running_containers = [c.get('Names', '') for c in containers]
            all_running = True
            
            for container_name in required_containers:
                is_running = any(container_name in name for name in running_containers)
                if not self.check_status(f"Container {container_name}", is_running,
                                        "–†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "–ù–µ –∑–∞–ø—É—â–µ–Ω"):
                    all_running = False
            
            return all_running
            
        except subprocess.TimeoutExpired:
            self.check_status("Docker Check", False, "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker")
            return False
        except Exception as e:
            self.check_status("Docker Check", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def check_network_ports(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–´–• –ü–û–†–¢–û–í")
        
        ports_to_check = {
            5432: "PostgreSQL Database",
            6379: "Redis Cache", 
            8001: "ML Service",
            8080: "Web Demo Server"
        }
        
        all_ports_ok = True
        
        for port, service in ports_to_check.items():
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                    sock.settimeout(3)
                    result = sock.connect_ex(('localhost', port))
                    is_open = result == 0
                    
                    self.check_status(f"Port {port} ({service})", is_open,
                                    "–î–æ—Å—Ç—É–ø–µ–Ω" if is_open else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    if not is_open:
                        all_ports_ok = False
                        
            except Exception as e:
                self.check_status(f"Port {port} ({service})", False, f"–û—à–∏–±–∫–∞: {str(e)}")
                all_ports_ok = False
        
        return all_ports_ok
    
    def check_api_endpoints(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê API ENDPOINTS")
        
        endpoints = {
            "http://localhost:8001/api/v1/health/": "ML Service Health",
            "http://localhost:8080/api/status": "Web Demo Status"
        }
        
        all_endpoints_ok = True
        
        for url, name in endpoints.items():
            try:
                response = requests.get(url, timeout=10)
                is_ok = response.status_code == 200
                
                details = f"HTTP {response.status_code}"
                if is_ok:
                    try:
                        data = response.json()
                        if 'status' in data:
                            details += f", Status: {data['status']}"
                    except:
                        pass
                
                self.check_status(name, is_ok, details)
                if not is_ok:
                    all_endpoints_ok = False
                    
            except requests.exceptions.RequestException as e:
                self.check_status(name, False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
                all_endpoints_ok = False
            except Exception as e:
                self.check_status(name, False, f"–û—à–∏–±–∫–∞: {str(e)}")
                all_endpoints_ok = False
        
        return all_endpoints_ok
    
    def check_database_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        try:
            import psycopg2
            
            conn_params = {
                'host': 'localhost',
                'port': 5432,
                'database': 'crypto_analytics',
                'user': 'postgres',
                'password': 'postgres123'
            }
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            conn = psycopg2.connect(**conn_params)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            self.check_status("PostgreSQL Connection", True, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT current_database();")
            db_name = cursor.fetchone()[0]
            self.check_status("Database Exists", True, f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_schema = 'public';
            """)
            table_count = cursor.fetchone()[0]
            self.check_status("Database Tables", table_count > 0, f"–¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {table_count}")
            
            cursor.close()
            conn.close()
            
            return True
            
        except ImportError:
            self.check_status("PostgreSQL Driver", False, "psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            self.check_status("Database Connection", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def check_redis_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê REDIS")
        
        try:
            import redis
            
            r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
            
            # –¢–µ—Å—Ç ping
            result = r.ping()
            self.check_status("Redis Connection", result, "Ping —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = "health_check_test"
            test_value = "test_value_" + str(int(time.time()))
            
            r.set(test_key, test_value, ex=10)  # Expire —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            read_value = r.get(test_key)
            
            write_read_ok = read_value == test_value
            self.check_status("Redis Read/Write", write_read_ok, 
                            "–ó–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" if write_read_ok else "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            r.delete(test_key)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis
            info = r.info()
            memory_usage = info.get('used_memory_human', 'Unknown')
            self.check_status("Redis Info", True, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}")
            
            return result and write_read_ok
            
        except ImportError:
            self.check_status("Redis Driver", False, "redis-py –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            self.check_status("Redis Connection", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def check_python_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê PYTHON –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
        
        required_packages = [
            'requests',
            'psycopg2',
            'redis',
            'psutil',
            'numpy',
            'pandas',
            'scikit-learn',
            'fastapi',
            'uvicorn'
        ]
        
        all_installed = True
        
        for package in required_packages:
            try:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è scikit-learn
                if package == 'scikit-learn':
                    import sklearn
                else:
                    __import__(package.replace('-', '_'))
                self.check_status(f"Package {package}", True, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                self.check_status(f"Package {package}", False, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                all_installed = False
        
        return all_installed
    
    def check_file_structure(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´")
        
        required_files = [
            'quick_demo_0_4_1_fixed.py',
            'web_demo_0_4_2.html',
            'web_server_demo.py',
            'auto_check_components.py',
            'docker-compose.yml',
            'backend/requirements.txt',
            'ml-service/requirements.txt',
            'workers/requirements.txt'
        ]
        
        required_dirs = [
            'backend',
            'ml-service', 
            'workers',
            'frontend'
        ]
        
        all_files_ok = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        for file_path in required_files:
            exists = os.path.exists(file_path)
            size = ""
            if exists:
                size = f"({os.path.getsize(file_path)} bytes)"
            
            self.check_status(f"File {file_path}", exists, 
                            f"–°—É—â–µ—Å—Ç–≤—É–µ—Ç {size}" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            if not exists:
                all_files_ok = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_path in required_dirs:
            exists = os.path.isdir(dir_path)
            self.check_status(f"Directory {dir_path}", exists,
                            "–°—É—â–µ—Å—Ç–≤—É–µ—Ç" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            if not exists:
                all_files_ok = False
        
        return all_files_ok
    
    def check_system_resources(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –†–ï–°–£–†–°–û–í")
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_ok = cpu_percent < 90
        self.check_status("CPU Usage", cpu_ok, f"{cpu_percent:.1f}%")
        
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        memory_ok = memory.percent < 90
        self.check_status("Memory Usage", memory_ok, 
                         f"{memory.percent:.1f}% ({memory.used // 1024 // 1024}MB used)")
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('.')
        disk_ok = disk.percent < 90
        self.check_status("Disk Usage", disk_ok, f"{disk.percent:.1f}%")
        
        return cpu_ok and memory_ok and disk_ok
    
    def run_end_to_end_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ end-to-end —Ç–µ—Å—Ç–∞"""
        self.print_step("END-TO-END –¢–ï–°–¢")
        
        try:
            # –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            result = subprocess.run([sys.executable, 'quick_demo_0_4_1_fixed.py'], 
                                 capture_output=True, text=True, timeout=60)
            
            success = result.returncode == 0
            details = "–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ" if success else f"–û—à–∏–±–∫–∞: {result.stderr}"
            
            self.check_status("End-to-End Test", success, details)
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                output = result.stdout
                has_telegram = "–≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram" in output
                has_parsing = "–≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤" in output
                has_market = "–≠–¢–ê–ü 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" in output
                has_ml = "–≠–¢–ê–ü 4: ML –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è" in output
                has_results = "–≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" in output
                has_completion = "–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê" in output
                
                all_stages = all([has_telegram, has_parsing, has_market, has_ml, has_results, has_completion])
                self.check_status("Pipeline Stages", all_stages, 
                                f"–í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {all_stages}")
                
                return success and all_stages
            
            return success
            
        except subprocess.TimeoutExpired:
            self.check_status("End-to-End Test", False, "–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞ (60 —Å–µ–∫—É–Ω–¥)")
            return False
        except Exception as e:
            self.check_status("End-to-End Test", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_step("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        
        total_checks = len(self.results)
        passed_checks = len([r for r in self.results.values() if r['status']])
        failed_checks = total_checks - passed_checks
        
        success_rate = (passed_checks / total_checks * 100) if total_checks > 0 else 0
        
        execution_time = time.time() - self.start_time
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "execution_time": execution_time,
            "total_checks": total_checks,
            "passed_checks": passed_checks,
            "failed_checks": failed_checks,
            "success_rate": success_rate,
            "overall_status": "PASS" if failed_checks == 0 else "FAIL",
            "results": self.results,
            "errors": self.errors,
            "warnings": self.warnings
        }
        
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 50)
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}/{total_checks} ({success_rate:.1f}%)")
        print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_checks}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['overall_status']}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        
        return report
    
    def run_all_checks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        self.print_header("CRYPTO ANALYTICS PLATFORM - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("üéØ –ó–∞–¥–∞—á–∞ 0.4.3 - –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("‚è±Ô∏è –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫
        checks = [
            ("System Resources", self.check_system_resources),
            ("File Structure", self.check_file_structure),
            ("Python Dependencies", self.check_python_dependencies),
            ("Docker Containers", self.check_docker_containers),
            ("Network Ports", self.check_network_ports),
            ("Database Connection", self.check_database_connection),
            ("Redis Connection", self.check_redis_connection),
            ("API Endpoints", self.check_api_endpoints),
            ("End-to-End Test", self.run_end_to_end_test)
        ]
        
        for check_name, check_func in checks:
            try:
                check_func()
            except Exception as e:
                self.check_status(f"{check_name} (Exception)", False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        return self.generate_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = ComponentChecker()
    
    try:
        report = checker.run_all_checks()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"component_check_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
        
        print("\n" + "=" * 80)
        if report['overall_status'] == 'PASS':
            print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ó–∞–¥–∞—á–∞ 0.4.3 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        print("=" * 80)
        
        return report['overall_status'] == 'PASS'
        
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 