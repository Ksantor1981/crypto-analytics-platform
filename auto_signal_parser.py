#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
import sqlite3
import time
import random
from datetime import datetime, timedelta

def generate_realistic_signals():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ)
    current_prices = {
        'BTC': 117500,
        'ETH': 3200,
        'SOL': 100,
        'BNB': 400,
        'ADA': 0.5,
        'DOT': 7,
        'LINK': 15,
        'UNI': 8
    }
    
    # –®–∞–±–ª–æ–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_templates = [
        {
            "template": "üöÄ {asset}/USDT LONG\nEntry: {entry}\nTarget 1: {target1}\nTarget 2: {target2}\nStop Loss: {sl}\nLeverage: {leverage}x",
            "direction": "LONG",
            "leverage_range": (5, 20)
        },
        {
            "template": "üìâ {asset}/USDT SHORT\n–í—Ö–æ–¥: {entry}\n–¶–µ–ª—å: {target}\n–°—Ç–æ–ø: {sl}\n–ü–ª–µ—á–æ: {leverage}x",
            "direction": "SHORT", 
            "leverage_range": (3, 15)
        },
        {
            "template": "üî• {asset}/USDT BUY\nEntry Price: ${entry}\nTake Profit: ${target}\nStop Loss: ${sl}\nConfidence: HIGH",
            "direction": "BUY",
            "leverage_range": (1, 10)
        },
        {
            "template": "‚ö° {asset}/USDT SELL\nEntry: ${entry}\nTP: ${target}\nSL: ${sl}\nRisk: MEDIUM",
            "direction": "SELL",
            "leverage_range": (1, 8)
        }
    ]
    
    # –ö–∞–Ω–∞–ª—ã
    channels = [
        "@cryptosignals",
        "@binancesignals", 
        "@cryptotradingview",
        "@cryptowhales",
        "@bitcoinsignals",
        "@altcoinsignals"
    ]
    
    signals = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5-10 —Å–∏–≥–Ω–∞–ª–æ–≤
    num_signals = random.randint(5, 10)
    
    for i in range(num_signals):
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–∫—Ç–∏–≤
        asset = random.choice(list(current_prices.keys()))
        current_price = current_prices[asset]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
        template = random.choice(signal_templates)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
        if template['direction'] in ['LONG', 'BUY']:
            entry_price = current_price * random.uniform(0.98, 1.02)  # ¬±2%
            target_price = entry_price * random.uniform(1.02, 1.08)   # +2-8%
            stop_loss = entry_price * random.uniform(0.95, 0.99)      # -1-5%
        else:  # SHORT, SELL
            entry_price = current_price * random.uniform(0.98, 1.02)  # ¬±2%
            target_price = entry_price * random.uniform(0.92, 0.98)   # -2-8%
            stop_loss = entry_price * random.uniform(1.01, 1.05)      # +1-5%
        
        # –ü–ª–µ—á–æ
        leverage = random.randint(*template['leverage_range'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
        if template['direction'] in ['LONG', 'BUY']:
            target1 = entry_price * 1.03
            target2 = entry_price * 1.06
            signal_text = template['template'].format(
                asset=asset,
                entry=f"{entry_price:,.0f}" if entry_price >= 100 else f"{entry_price:.2f}",
                target1=f"{target1:,.0f}" if target1 >= 100 else f"{target1:.2f}",
                target2=f"{target2:,.0f}" if target2 >= 100 else f"{target2:.2f}",
                target=f"{target_price:,.0f}" if target_price >= 100 else f"{target_price:.2f}",
                sl=f"{stop_loss:,.0f}" if stop_loss >= 100 else f"{stop_loss:.2f}",
                leverage=leverage
            )
        else:
            signal_text = template['template'].format(
                asset=asset,
                entry=f"{entry_price:,.0f}" if entry_price >= 100 else f"{entry_price:.2f}",
                target=f"{target_price:,.0f}" if target_price >= 100 else f"{target_price:.2f}",
                sl=f"{stop_loss:,.0f}" if stop_loss >= 100 else f"{stop_loss:.2f}",
                leverage=leverage
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
        signal = {
            "text": signal_text,
            "channel": random.choice(channels),
            "asset": asset,
            "direction": template['direction'],
            "entry_price": entry_price,
            "target_price": target_price,
            "stop_loss": stop_loss,
            "leverage": leverage,
            "confidence": random.uniform(0.6, 0.9),
            "timestamp": datetime.now() - timedelta(minutes=random.randint(1, 60))
        }
        
        signals.append(signal)
    
    return signals

def parse_signal(text, channel):
    """–ü–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤"""
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    patterns = {
        'asset': r'([A-Z]{2,6})/?(?:USDT|USD|BTC)',
        'direction': r'\b(LONG|SHORT|BUY|SELL)\b',
        'entry': r'(?:entry|–≤—Ö–æ–¥|—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞|enter at)[:\s]*([0-9,]+)',
        'target': r'(?:target|tp|—Ü–µ–ª—å|—Ç–ø|take profit)[:\s]*([0-9,]+)',
        'stop_loss': r'(?:sl|stop.?loss|—Å—Ç–æ–ø|—Å—Ç–æ–ø.?–ª–æ—Å—Å|stop at)[:\s]*([0-9,]+)',
        'leverage': r'(?:leverage|–ø–ª–µ—á–æ)[:\s]*([0-9]+)x?'
    }
    
    result = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç–∏–≤
    asset_match = re.search(patterns['asset'], text, re.IGNORECASE)
    if asset_match:
        result['asset'] = asset_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    direction_match = re.search(patterns['direction'], text, re.IGNORECASE)
    if direction_match:
        result['direction'] = direction_match.group(1).upper()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
    entry_match = re.search(patterns['entry'], text, re.IGNORECASE)
    if entry_match:
        result['entry_price'] = float(entry_match.group(1).replace(',', ''))
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        entry_match = re.search(r'Entry Price: \$?([0-9,]+)', text, re.IGNORECASE)
        if entry_match:
            result['entry_price'] = float(entry_match.group(1).replace(',', ''))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å
    target_match = re.search(patterns['target'], text, re.IGNORECASE)
    if target_match:
        result['target_price'] = float(target_match.group(1).replace(',', ''))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
    sl_match = re.search(patterns['stop_loss'], text, re.IGNORECASE)
    if sl_match:
        result['stop_loss'] = float(sl_match.group(1).replace(',', ''))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–µ—á–æ
    leverage_match = re.search(patterns['leverage'], text, re.IGNORECASE)
    if leverage_match:
        result['leverage'] = int(leverage_match.group(1))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    result['channel'] = channel
    result['confidence'] = 0.7
    result['timestamp'] = datetime.now()
    
    return result if result.get('asset') and result.get('direction') else None

def save_to_database(signal_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª
        cursor.execute("SELECT id FROM channels WHERE url = ?", (signal_data['channel'],))
        channel_result = cursor.fetchone()
        
        if channel_result:
            channel_id = channel_result[0]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            cursor.execute("""
                INSERT INTO channels (name, platform, url, category, is_active, created_at, owner_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                signal_data['channel'].replace('@', ''),
                'telegram',
                signal_data['channel'],
                'crypto',
                True,
                datetime.now(),
                1  # Default owner_id
            ))
            channel_id = cursor.lastrowid
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        cursor.execute("""
            INSERT INTO signals (
                channel_id, asset, direction, entry_price, tp1_price, stop_loss,
                original_text, message_timestamp, status, confidence_score, created_at, symbol
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            channel_id,
            signal_data['asset'],
            signal_data['direction'],
            signal_data['entry_price'],
            signal_data.get('target_price'),
            signal_data.get('stop_loss'),
            signal_data.get('text', f"Parsed signal for {signal_data['asset']}"),
            signal_data['timestamp'],
            'PENDING',
            signal_data['confidence'],
            datetime.now(),
            f"{signal_data['asset']}/USDT"
        ))
        
        signal_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return signal_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–°–ï–† –†–ï–ê–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    print("=" * 60)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        signals = generate_realistic_signals()
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
        processed = 0
        saved = 0
        
        for i, signal in enumerate(signals, 1):
            print(f"\nüìà –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ #{i}:")
            print(f"   –ö–∞–Ω–∞–ª: {signal['channel']}")
            print(f"   –ê–∫—Ç–∏–≤: {signal['asset']}")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']}")
            print(f"   –í—Ö–æ–¥: ${signal['entry_price']:.2f}")
            
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            parsed = parse_signal(signal['text'], signal['channel'])
            
            if parsed:
                print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                signal_id = save_to_database(parsed)
                if signal_id:
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (ID: {signal_id})")
                    saved += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            else:
                print(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            
            processed += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            time.sleep(0.5)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {saved/processed*100:.1f}%")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM signals")
        total_signals = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM channels")
        total_channels = cursor.fetchone()[0]
        conn.close()
        
        print(f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î: {total_signals}")
        print(f"üì∫ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î: {total_channels}")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 60)

if __name__ == "__main__":
    main()
