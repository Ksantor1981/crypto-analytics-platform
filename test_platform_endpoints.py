#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Crypto Analytics Platform
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import requests
import json
import time
from datetime import datetime

def test_endpoint(url, description, method="GET", data=None, headers=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoints"""
    try:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
        print(f"   URL: {url}")
        
        if method == "GET":
            response = requests.get(url, headers=headers)
        elif method == "POST":
            response = requests.post(url, json=data, headers=headers)
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code < 300:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            try:
                result = response.json()
                if isinstance(result, dict) and len(str(result)) < 200:
                    print(f"   –û—Ç–≤–µ—Ç: {result}")
                else:
                    print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
                return True, result
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                return True, response.text
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}")
            return False, response.text
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        return False, str(e)

def main():
    print("=" * 70)
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRYPTO ANALYTICS PLATFORM")
    print("=" * 70)
    
    # Backend endpoints
    backend_base = "http://127.0.0.1:8000"
    ml_base = "http://127.0.0.1:8001"
    
    results = {}
    
    # 1. Backend Health Check
    success, data = test_endpoint(f"{backend_base}/health", "Backend Health Check")
    results["backend_health"] = success
    
    # 2. Backend Channels
    success, data = test_endpoint(f"{backend_base}/api/v1/channels/", "Channels List")
    results["channels"] = success
    
    # 3. ML Service Health
    success, data = test_endpoint(f"{ml_base}/api/v1/health/", "ML Service Health")
    results["ml_health"] = success
    
    # 4. ML Prediction Test
    test_data = {
        "symbol": "BTCUSDT",
        "current_price": 45000.0,
        "volume_24h": 1000000.0,
        "price_change_24h": 2.5
    }
    success, data = test_endpoint(
        f"{ml_base}/api/v1/predictions/predict/", 
        "ML Prediction Test", 
        method="POST", 
        data=test_data
    )
    results["ml_prediction"] = success
    
    # 5. Backend Signals (–º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    success, data = test_endpoint(f"{backend_base}/api/v1/signals/", "Signals List")
    results["signals"] = success
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    total_tests = len(results)
    passed_tests = sum(1 for v in results.values() if v)
    
    for test_name, status in results.items():
        status_emoji = "‚úÖ" if status else "‚ùå"
        print(f"{status_emoji} {test_name}: {'–ü–†–û–®–ï–õ' if status else '–ù–ï –ü–†–û–®–ï–õ'}")
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    success_rate = (passed_tests / total_tests) * 100
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    print("\n" + "=" * 70)
    print("üéØ –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ü–õ–ê–¢–§–û–†–ú–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 70)
    
    if results.get("backend_health", False):
        print("‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê")
    
    if results.get("ml_health", False):
        print("‚úÖ ML Service —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå ML Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if results.get("channels", False):
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if results.get("ml_prediction", False):
        print("‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    else:
        print("‚ùå ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    if success_rate >= 80:
        print("\nüü¢ –ü–õ–ê–¢–§–û–†–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print("   –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    elif success_rate >= 60:
        print("\nüü° –ü–õ–ê–¢–§–û–†–ú–ê –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–ê")
        print("   –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        print("\nüî¥ –ü–õ–ê–¢–§–û–†–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print("   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print(f"\n–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 