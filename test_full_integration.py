#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
Backend + ML Service + Frontend
"""

import requests
import json
import time
from datetime import datetime

def test_backend():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Backend API"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
    
    base_url = "http://localhost:8000"
    endpoints = [
        ("/health", "GET"),
        ("/api/v1/health", "GET"),
        ("/api/v1/channels/", "GET"),
        ("/api/v1/signals/", "GET"),
        ("/api/v1/users/register", "POST"),
        ("/api/v1/users/login", "POST"),
        ("/api/v1/ml/health", "GET"),
        ("/api/v1/telegram/health", "GET")
    ]
    
    results = {}
    
    for endpoint, method in endpoints:
        try:
            if method == "POST":
                response = requests.post(f"{base_url}{endpoint}", 
                                       json={"test": "data"}, 
                                       timeout=5)
            else:
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
            
            if response.status_code in [200, 422, 403]:  # 422 - –≤–∞–ª–∏–¥–∞—Ü–∏—è, 403 - –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                print(f"‚úÖ {endpoint}: {response.status_code}")
                results[endpoint] = True
            else:
                print(f"‚ùå {endpoint}: {response.status_code}")
                results[endpoint] = False
                
        except Exception as e:
            print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")
            results[endpoint] = False
    
    return results

def test_ml_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML Service"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML Service...")
    
    base_url = "http://localhost:8001/api/v1"
    endpoints = [
        ("/health/", "GET"),
        ("/predictions/model/info", "GET"),
        ("/price-validation/health", "GET"),
        ("/price-validation/supported-symbols", "GET"),
        ("/price-validation/current-prices", "POST"),
        ("/price-validation/market-summary", "POST")
    ]
    
    results = {}
    
    for endpoint, method in endpoints:
        try:
            if method == "POST":
                if "current-prices" in endpoint:
                    data = {"symbols": ["BTCUSDT", "ETHUSDT"]}
                elif "market-summary" in endpoint:
                    data = {"symbols": ["BTCUSDT"]}
                else:
                    data = {"test": "data"}
                    
                response = requests.post(f"{base_url}{endpoint}", 
                                       json=data, 
                                       timeout=10)
            else:
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
            
            if response.status_code in [200, 422]:
                print(f"‚úÖ {endpoint}: {response.status_code}")
                results[endpoint] = True
            else:
                print(f"‚ùå {endpoint}: {response.status_code}")
                results[endpoint] = False
                
        except Exception as e:
            print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")
            results[endpoint] = False
    
    return results

def test_frontend():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Frontend"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend...")
    
    base_url = "http://localhost:3000"
    endpoints = [
        ("/", "GET"),
        ("/dashboard", "GET"),
        ("/channels", "GET"),
        ("/signals", "GET"),
        ("/auth/login", "GET"),
        ("/auth/register", "GET")
    ]
    
    results = {}
    
    for endpoint, method in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=5)
            
            if response.status_code in [200, 404]:  # 404 - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
                print(f"‚úÖ {endpoint}: {response.status_code}")
                results[endpoint] = True
            else:
                print(f"‚ùå {endpoint}: {response.status_code}")
                results[endpoint] = False
                
        except Exception as e:
            print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")
            results[endpoint] = False
    
    return results

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    results = {}
    
    # –¢–µ—Å—Ç Backend -> ML Service
    try:
        response = requests.get("http://localhost:8000/api/v1/ml/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend -> ML Service: OK")
            results["backend_ml"] = True
        else:
            print(f"‚ùå Backend -> ML Service: {response.status_code}")
            results["backend_ml"] = False
    except Exception as e:
        print(f"‚ùå Backend -> ML Service: {e}")
        results["backend_ml"] = False
    
    # –¢–µ—Å—Ç Frontend -> Backend
    try:
        response = requests.get("http://localhost:3000", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω: OK")
            results["frontend_available"] = True
        else:
            print(f"‚ùå Frontend: {response.status_code}")
            results["frontend_available"] = False
    except Exception as e:
        print(f"‚ùå Frontend: {e}")
        results["frontend_available"] = False
    
    return results

def generate_comprehensive_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –°–ï–†–í–ò–°–û–í –ü–õ–ê–¢–§–û–†–ú–´")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    backend_results = test_backend()
    ml_results = test_ml_service()
    frontend_results = test_frontend()
    integration_results = test_integration()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    backend_success = sum(backend_results.values())
    backend_total = len(backend_results)
    backend_percent = (backend_success / backend_total) * 100 if backend_total > 0 else 0
    
    ml_success = sum(ml_results.values())
    ml_total = len(ml_results)
    ml_percent = (ml_success / ml_total) * 100 if ml_total > 0 else 0
    
    frontend_success = sum(frontend_results.values())
    frontend_total = len(frontend_results)
    frontend_percent = (frontend_success / frontend_total) * 100 if frontend_total > 0 else 0
    
    integration_success = sum(integration_results.values())
    integration_total = len(integration_results)
    integration_percent = (integration_success / integration_total) * 100 if integration_total > 0 else 0
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    print(f"üîß Backend API: {backend_success}/{backend_total} ({backend_percent:.1f}%)")
    print(f"ü§ñ ML Service: {ml_success}/{ml_total} ({ml_percent:.1f}%)")
    print(f"üé® Frontend: {frontend_success}/{frontend_total} ({frontend_percent:.1f}%)")
    print(f"üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_success}/{integration_total} ({integration_percent:.1f}%)")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    total_success = backend_success + ml_success + frontend_success + integration_success
    total_endpoints = backend_total + ml_total + frontend_total + integration_total
    overall_percent = (total_success / total_endpoints) * 100 if total_endpoints > 0 else 0
    
    print(f"\nüìà –û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨: {overall_percent:.1f}%")
    
    # –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if overall_percent >= 90:
        grade = "A+"
        status = "–û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞"
    elif overall_percent >= 80:
        grade = "A"
        status = "–û–ß–ï–ù–¨ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
    elif overall_percent >= 70:
        grade = "B+"
        status = "–•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    elif overall_percent >= 60:
        grade = "B"
        status = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    else:
        grade = "C"
        status = "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    
    print(f"üèÜ –û–¶–ï–ù–ö–ê: {grade}")
    print(f"üìã –°–¢–ê–¢–£–°: {status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if backend_percent < 100:
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Backend API endpoints")
    if ml_percent < 100:
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ML Service endpoints")
    if frontend_percent < 100:
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Frontend —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    if integration_percent < 100:
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    
    if overall_percent >= 80:
        print("   - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        print("   - –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 1 (Frontend MVP)")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ URL
    print("\nüîó –î–û–°–¢–£–ü–ù–´–ï URL:")
    print("   - Frontend: http://localhost:3000")
    print("   - Backend API: http://localhost:8000")
    print("   - ML Service: http://localhost:8001")
    print("   - Backend Health: http://localhost:8000/health")
    print("   - ML Health: http://localhost:8001/api/v1/health/")

if __name__ == "__main__":
    generate_comprehensive_report() 