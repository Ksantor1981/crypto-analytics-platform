#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import psutil
import time
import os
from datetime import datetime

def analyze_system():
    """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    print("üìä –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´:")
    print("=" * 40)
    print(f"CPU: {cpu_percent:.1f}%")
    print(f"–ü–∞–º—è—Ç—å: {memory.percent:.1f}%")
    print(f"–î–∏—Å–∫: {(disk.used / disk.total) * 100:.1f}%")
    
    recommendations = []
    
    if cpu_percent > 80:
        recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU")
    
    if memory.percent > 85:
        recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    
    if (disk.used / disk.total) * 100 > 90:
        recommendations.append("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
    
    if recommendations:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in recommendations:
            print(f"  {rec}")
    else:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    
    return {
        'cpu': cpu_percent,
        'memory': memory.percent,
        'disk': (disk.used / disk.total) * 100,
        'recommendations': recommendations
    }

def cleanup_logs():
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í:")
    
    log_files = [
        'monitoring/monitoring.log',
        'backend/logs/app.log'
    ]
    
    cleaned = 0
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                size = os.path.getsize(log_file)
                if size > 1024 * 1024:  # 1MB
                    with open(log_file, 'w') as f:
                        f.write('')
                    print(f"  ‚úÖ –û—á–∏—â–µ–Ω {log_file}")
                    cleaned += 1
            except:
                pass
    
    if cleaned == 0:
        print("  ‚ÑπÔ∏è –õ–æ–≥–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ—á–∏—Å—Ç–∫–∏")
    
    return cleaned

def main():
    print("üöÄ –ü–†–û–°–¢–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    analysis = analyze_system()
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    cleaned = cleanup_logs()
    
    print("\n" + "=" * 50)
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    return analysis

if __name__ == "__main__":
    main()
