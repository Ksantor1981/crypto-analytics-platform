#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Price Checker –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ ML Service
"""

import asyncio
import requests
import json
from datetime import datetime, timedelta

def test_ml_service_price_validation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ price validation –≤ ML —Å–µ—Ä–≤–∏—Å–µ
    """
    
    base_url = "http://localhost:8001"
    
    print("üîÑ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û PRICE CHECKER –í ML SERVICE")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è price validation
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è price validation...")
    try:
        response = requests.get(f"{base_url}/api/v1/price-validation/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check: {data.get('status', 'unknown')}")
            print(f"   Test price BTC/USDT: {data.get('test_price', 'N/A')}")
            print(f"   Supported symbols: {data.get('supported_symbols_count', 0)}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
    try:
        response = requests.get(f"{base_url}/api/v1/price-validation/supported-symbols")
        if response.status_code == 200:
            data = response.json()
            symbols = data.get('data', {}).get('symbols', [])
            print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {symbols[:5]}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω...")
    try:
        test_symbols = ["BTC/USDT", "ETH/USDT", "BNB/USDT"]
        response = requests.post(
            f"{base_url}/api/v1/price-validation/current-prices",
            json={
                "symbols": test_symbols,
                "preferred_exchange": "binance"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            prices = data.get('data', {})
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(prices)} —Å–∏–º–≤–æ–ª–æ–≤:")
            for symbol, price in prices.items():
                status = "‚úÖ" if price else "‚ùå"
                print(f"   {status} {symbol}: {price}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {response.status_code}")
            print(f"   Response: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
    
    # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    print("\n4Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        test_signal = {
            "id": "test_signal_001",
            "symbol": "BTC/USDT",
            "direction": "long",
            "entry_price": 45000.0,
            "targets": [46000.0, 47000.0, 48000.0],
            "stop_loss": 44000.0,
            "timestamp": datetime.now().isoformat()
        }
        
        response = requests.post(
            f"{base_url}/api/v1/price-validation/validate-signal",
            json=test_signal
        )
        
        if response.status_code == 200:
            data = response.json()
            result = data.get('data', {})
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω:")
            print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result.get('current_price', 'N/A')}")
            print(f"   P&L: {result.get('pnl_percentage', 0):.2f}%")
            print(f"   –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ü–µ–ª–∏: {result.get('hit_targets', [])}")
            print(f"   Confidence score: {result.get('confidence_score', 0):.3f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {response.status_code}")
            print(f"   Response: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    # 5. Batch –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\n5Ô∏è‚É£ Batch –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")
    try:
        batch_signals = [
            {
                "id": "batch_signal_001",
                "symbol": "ETH/USDT",
                "direction": "long",
                "entry_price": 3000.0,
                "targets": [3100.0, 3200.0],
                "stop_loss": 2900.0,
                "timestamp": datetime.now().isoformat()
            },
            {
                "id": "batch_signal_002", 
                "symbol": "BNB/USDT",
                "direction": "short",
                "entry_price": 600.0,
                "targets": [590.0, 580.0],
                "stop_loss": 610.0,
                "timestamp": datetime.now().isoformat()
            }
        ]
        
        response = requests.post(
            f"{base_url}/api/v1/price-validation/validate-batch",
            json=batch_signals
        )
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('data', [])
            print(f"‚úÖ Batch –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(results)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
            
            for result in results:
                print(f"   üìä {result.get('signal_id', 'unknown')}:")
                print(f"      Symbol: {result.get('symbol', 'unknown')}")
                print(f"      Status: {result.get('status', 'unknown')}")
                print(f"      P&L: {result.get('pnl_percentage', 0):.2f}%")
                print(f"      Confidence: {result.get('confidence_score', 0):.3f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ batch –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {response.status_code}")
            print(f"   Response: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ batch –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # 6. Market summary
    print("\n6Ô∏è‚É£ Market summary...")
    try:
        response = requests.post(
            f"{base_url}/api/v1/price-validation/market-summary",
            json={
                "symbols": ["BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT", "SOL/USDT"]
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            summary = data.get('data', {})
            markets = summary.get('markets', {})
            
            print(f"‚úÖ Market summary –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {summary.get('total_symbols', 0)}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {summary.get('active_symbols', 0)}")
            print(f"   –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {summary.get('timestamp', 'unknown')}")
            
            active_count = 0
            for symbol, info in markets.items():
                if info.get('status') == 'active':
                    active_count += 1
                    print(f"   ‚úÖ {symbol}: ${info.get('current_price', 'N/A')}")
                else:
                    print(f"   ‚ùå {symbol}: {info.get('status', 'unknown')}")
            
            print(f"\n   üìà –ê–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è: {active_count}/{len(markets)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ market summary: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ market summary: {e}")
    
    print("\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("‚úÖ Price Checker —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ ML Service")
    print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ multiple exchanges —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    print("‚úÖ Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ Market summary –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä—ã–Ω–∫–∞")
    print("\nüöÄ –ó–∞–¥–∞—á–∞ 0.3.1 –í–´–ü–û–õ–ù–ï–ù–ê!")

def test_integration_with_existing_ml():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ML API
    """
    
    base_url = "http://localhost:8001"
    
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú ML API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
    try:
        test_request = {
            "symbol": "BTC/USDT",
            "signal_data": {
                "direction": "long",
                "entry_price": 45000,
                "targets": [46000, 47000, 48000],
                "stop_loss": 44000,
                "confidence": 0.85
            }
        }
        
        response = requests.post(
            f"{base_url}/api/v1/predictions/predict",
            json=test_request
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:")
            print(f"   Success probability: {data.get('success_probability', 'N/A')}")
            print(f"   Risk score: {data.get('risk_score', 'N/A')}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data.get('recommendation', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
    
    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç price validation –¥–ª—è —Ç–æ–≥–æ –∂–µ —Å–∏–≥–Ω–∞–ª–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç price validation —Ç–æ–≥–æ –∂–µ —Å–∏–≥–Ω–∞–ª–∞...")
    try:
        validation_request = {
            "id": "ml_integration_test",
            "symbol": "BTC/USDT",
            "direction": "long",
            "entry_price": 45000.0,
            "targets": [46000.0, 47000.0, 48000.0],
            "stop_loss": 44000.0,
            "timestamp": datetime.now().isoformat()
        }
        
        response = requests.post(
            f"{base_url}/api/v1/price-validation/validate-signal",
            json=validation_request
        )
        
        if response.status_code == 200:
            data = response.json()
            result = data.get('data', {})
            print(f"‚úÖ Price validation –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result.get('current_price', 'N/A')}")
            print(f"   –¢–µ–∫—É—â–∏–π P&L: {result.get('pnl_percentage', 0):.2f}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ price validation: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ price validation: {e}")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ML –∏ Price Validation —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í ENHANCED PRICE CHECKER")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã price validation
    test_ml_service_price_validation()
    
    # –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    test_integration_with_existing_ml()
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("üìã –ó–∞–¥–∞—á–∞ 0.3.1 - –ü–µ—Ä–µ–Ω–æ—Å —Ä–∞–±–æ—á–µ–≥–æ price_checker.py —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ - –í–´–ü–û–õ–ù–ï–ù–ê") 