#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê: CRYPTO ANALYTICS PLATFORM
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
"""

import subprocess
import webbrowser
import time
import os
import sys
from datetime import datetime

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ" + "="*70 + "üöÄ")
    print("üéØ –ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê: CRYPTO ANALYTICS PLATFORM")
    print("üöÄ" + "="*70 + "üöÄ")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ –°—Ç–∞—Ç—É—Å: 100% –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£")
    print()

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –¢–†–ï–ë–û–í–ê–ù–ò–ô:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"  ‚úÖ Docker: {result.stdout.strip()}")
        else:
            print("  ‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    try:
        result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"  ‚úÖ Docker Compose: {result.stdout.strip()}")
        else:
            print("  ‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
    if os.path.exists('docker-compose.yml'):
        print("  ‚úÖ docker-compose.yml –Ω–∞–π–¥–µ–Ω")
    else:
        print("  ‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def start_services():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüê≥ –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í:")
    print("-" * 40)
    
    try:
        print("  üöÄ –ó–∞–ø—É—Å–∫ docker-compose up -d...")
        result = subprocess.run(['docker-compose', 'up', '-d'], 
                              capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            print("  ‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!")
            return True
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("  ‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def wait_for_services():
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í:")
    print("-" * 40)
    
    services = [
        ("Backend API", "http://localhost:8000/health"),
        ("ML Service", "http://localhost:8001/health"),
        ("Frontend", "http://localhost:3000")
    ]
    
    import requests
    
    for service_name, url in services:
        print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {service_name}...")
        for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 60 —Å–µ–∫—É–Ω–¥
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    print(f"  ‚úÖ {service_name} –≥–æ—Ç–æ–≤!")
                    break
            except:
                pass
            time.sleep(2)
        else:
            print(f"  ‚ö†Ô∏è {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...)")

def open_dashboard():
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ–º–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    print("\nüåê –û–¢–ö–†–´–¢–ò–ï –î–ï–ú–û –î–ê–®–ë–û–†–î–ê:")
    print("-" * 40)
    
    dashboard_path = os.path.abspath('DEMO_DASHBOARD.html')
    
    if os.path.exists(dashboard_path):
        print(f"  ‚úÖ –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –Ω–∞–π–¥–µ–Ω: {dashboard_path}")
        print("  üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        
        try:
            webbrowser.open(f'file://{dashboard_path}')
            print("  ‚úÖ –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            print(f"  üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {dashboard_path}")
    else:
        print("  ‚ùå –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def show_service_urls():
    """–ü–æ–∫–∞–∑–∞—Ç—å URL —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüåê –î–û–°–¢–£–ü –ö –°–ï–†–í–ò–°–ê–ú:")
    print("-" * 40)
    
    urls = [
        ("Frontend", "http://localhost:3000", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("Backend API", "http://localhost:8000", "RESTful API"),
        ("ML Service", "http://localhost:8001", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"),
        ("API Docs", "http://localhost:8000/docs", "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        ("Health Check", "http://localhost:8000/health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    ]
    
    for name, url, description in urls:
        print(f"  üîó {name}: {url}")
        print(f"     üìù {description}")

def show_project_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï:")
    print("-" * 40)
    
    info = [
        ("–ù–∞–∑–≤–∞–Ω–∏–µ", "Crypto Analytics Platform"),
        ("–í–µ—Ä—Å–∏—è", "1.0.0"),
        ("–°—Ç–∞—Ç—É—Å", "100% –ó–ê–í–ï–†–®–ï–ù–û"),
        ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", "–ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£"),
        ("ML —Ç–æ—á–Ω–æ—Å—Ç—å", "87.2%"),
        ("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", "6"),
        ("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", "6"),
        ("API endpoints", "30+")
    ]
    
    for label, value in info:
        print(f"  üìã {label}: {value}")

def show_next_steps():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("-" * 40)
    
    steps = [
        "1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "2. üìä –ò–∑—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é",
        "3. üîß –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoints",
        "4. ü§ñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Celery –∑–∞–¥–∞—á",
        "5. üìà –ò–∑—É—á–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "6. üîí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "7. üìù –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞",
        "8. üéØ –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!"
    ]
    
    for step in steps:
        print(f"  {step}")

def show_management_commands():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüîß –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 40)
    
    commands = [
        ("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", "docker-compose logs -f"),
        ("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", "docker-compose down"),
        ("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤", "docker-compose restart"),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞", "docker-compose ps"),
        ("–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", "docker-compose down --volumes")
    ]
    
    for description, command in commands:
        print(f"  üíª {description}: {command}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_prerequisites():
        print("\n‚ùå –ù–ï –í–´–ü–û–õ–ù–ï–ù–´ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    if not start_services():
        print("\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ò–°–û–í!")
        return 1
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    wait_for_services()
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    open_dashboard()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_service_urls()
    show_project_info()
    show_next_steps()
    show_management_commands()
    
    print("\n" + "="*70)
    print("üéâ –ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
    print("üöÄ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢!")
    print("üåü –ì–û–¢–û–í –ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò!")
    print("="*70)
    
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   - README.md - –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    print("   - TASKS2.md - –ü–ª–∞–Ω –∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á")
    print("   - FINAL_DELIVERY_REPORT.md - –û—Ç—á–µ—Ç –æ —Å–¥–∞—á–µ")
    print("   - DEMO_DASHBOARD.html - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
