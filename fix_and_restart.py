#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import sys
import subprocess
import time
import signal

def kill_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ taskkill (Windows)
        subprocess.run(["taskkill", "/f", "/im", "uvicorn.exe"], capture_output=True)
        subprocess.run(["taskkill", "/f", "/im", "python.exe"], capture_output=True)
        print("  ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except:
        pass

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_vars = {
        "DATABASE_URL": "postgresql://postgres:postgres123@localhost:5432/crypto_analytics",
        "SECRET_KEY": "crypto-analytics-secret-key-2024-development",
        "REDIS_URL": "redis://localhost:6379/0",
        "ML_SERVICE_URL": "http://localhost:8001",
        "ENVIRONMENT": "development",
        "DEBUG": "true"
    }
    
    for key, value in env_vars.items():
        os.environ[key] = value
    
    print("  ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def start_ml_service():
    """–ó–∞–ø—É—Å–∫ ML Service"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ ML Service...")
    
    try:
        os.chdir("ml-service")
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
        proc = subprocess.Popen([
            sys.executable, "main.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        
        time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        import requests
        resp = requests.get("http://localhost:8001/api/v1/health", timeout=5)
        if resp.status_code == 200:
            print("  ‚úÖ ML Service –∑–∞–ø—É—â–µ–Ω")
            os.chdir("..")
            return True
        else:
            print(f"  ‚ùå ML Service –æ—à–∏–±–∫–∞: {resp.status_code}")
            os.chdir("..")
            return False
            
    except Exception as e:
        print(f"  ‚ùå ML Service –æ—à–∏–±–∫–∞: {e}")
        os.chdir("..")
        return False

def start_backend():
    """–ó–∞–ø—É—Å–∫ Backend"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Backend...")
    
    try:
        os.chdir("backend")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è subprocess
        env = os.environ.copy()
        env.update({
            "DATABASE_URL": "postgresql://postgres:postgres123@localhost:5432/crypto_analytics",
            "SECRET_KEY": "crypto-analytics-secret-key-2024-development"
        })
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
        proc = subprocess.Popen([
            sys.executable, "-m", "uvicorn", "app.main:app", 
            "--host", "0.0.0.0", "--port", "8000", "--reload"
        ], env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        
        time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        import requests
        resp = requests.get("http://localhost:8000/health", timeout=10)
        if resp.status_code == 200:
            print("  ‚úÖ Backend –∑–∞–ø—É—â–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML endpoints
            resp = requests.get("http://localhost:8000/api/v1/ml/health", timeout=5)
            if resp.status_code == 200:
                print("  ‚úÖ ML endpoints –¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"  ‚ö†Ô∏è ML endpoints –ø—Ä–æ–±–ª–µ–º–∞: {resp.status_code}")
            
            os.chdir("..")
            return True
        else:
            print(f"  ‚ùå Backend –æ—à–∏–±–∫–∞: {resp.status_code}")
            os.chdir("..")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Backend –æ—à–∏–±–∫–∞: {e}")
        os.chdir("..")
        return False

def run_full_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    try:
        result = subprocess.run([sys.executable, "test_full_integration.py"], 
                              capture_output=True, text=True)
        
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:")
        print(result.stdout)
        
        if "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò" in result.stdout:
            return True
        elif "–û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –†–ê–ë–û–¢–ê–ï–¢" in result.stdout:
            return True
        else:
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö")
    print("=" * 45)
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    kill_processes()
    time.sleep(2)
    
    # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    try:
        os.chdir("backend")
        sys.path.insert(0, os.getcwd())
        
        from app.core.database import engine, Base
        from app.models import user, channel, signal, subscription, payment
        
        Base.metadata.create_all(bind=engine)
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        os.chdir("..")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã: {e}")
        os.chdir("..")
    
    # 4. –ó–∞–ø—É—Å–∫ ML Service
    ml_ok = start_ml_service()
    
    # 5. –ó–∞–ø—É—Å–∫ Backend
    backend_ok = start_backend()
    
    if ml_ok and backend_ok:
        print("\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–©–ï–ù–´!")
        
        # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        test_ok = run_full_test()
        
        if test_ok:
            print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
            print("\nüéØ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É:")
            print("   - Frontend: http://localhost:3000")
            print("   - Backend API: http://localhost:8000/docs")
            print("   - ML Service: http://localhost:8001/docs")
        else:
            print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    
    print("\n" + "=" * 45)
    if success:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...") 