#!/usr/bin/env python3
"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–µ—Ä–≤–∏—Å–∞
"""
import requests
import threading
import time
from datetime import datetime

ML_SERVICE_URL = "http://localhost:8001/api/v1/predictions/predict"

TEST_DATA = [
    {"asset": "BTC", "entry_price": 50000, "direction": "LONG"},
    {"asset": "ETH", "entry_price": 3000, "direction": "LONG"},
    {"asset": "SOL", "entry_price": 100, "direction": "LONG"},
]

THREADS = 5
REQUESTS_PER_THREAD = 10

def make_requests(thread_id, results):
    for i in range(REQUESTS_PER_THREAD):
        data = TEST_DATA[i % len(TEST_DATA)]
        start = time.time()
        try:
            resp = requests.post(ML_SERVICE_URL, json=data, timeout=10)
            elapsed = time.time() - start
            results.append({
                "thread": thread_id,
                "status": resp.status_code,
                "elapsed": elapsed,
                "ok": resp.status_code == 200
            })
        except Exception as e:
            elapsed = time.time() - start
            results.append({
                "thread": thread_id,
                "status": "EXC",
                "elapsed": elapsed,
                "ok": False,
                "error": str(e)
            })

def main():
    print(f"üöÄ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–µ—Ä–≤–∏—Å–∞ ({THREADS*REQUESTS_PER_THREAD} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
    results = []
    threads = []
    start_time = time.time()
    for t in range(THREADS):
        thread = threading.Thread(target=make_requests, args=(t, results))
        threads.append(thread)
        thread.start()
    for thread in threads:
        thread.join()
    total_time = time.time() - start_time
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    success = [r for r in results if r["ok"]]
    failed = [r for r in results if not r["ok"]]
    if success:
        avg_time = sum(r["elapsed"] for r in success) / len(success)
        max_time = max(r["elapsed"] for r in success)
        min_time = min(r["elapsed"] for r in success)
    else:
        avg_time = max_time = min_time = 0
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(results)}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {len(success)}")
    print(f"  –û—à–∏–±–æ–∫: {len(failed)}")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.3f} —Å–µ–∫")
    print(f"  –ú–∞–∫—Å. –≤—Ä–µ–º—è: {max_time:.3f} —Å–µ–∫")
    print(f"  –ú–∏–Ω. –≤—Ä–µ–º—è: {min_time:.3f} —Å–µ–∫")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {total_time:.2f} —Å–µ–∫")
    if failed:
        print("\n‚ùå –û—à–∏–±–∫–∏:")
        for r in failed:
            print(f"  [–ü–æ—Ç–æ–∫ {r['thread']}] –°—Ç–∞—Ç—É—Å: {r['status']} –í—Ä–µ–º—è: {r['elapsed']:.3f} –û—à–∏–±–∫–∞: {r.get('error','')}")
    print("\n‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

if __name__ == "__main__":
    main() 