"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ML-—Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import requests
import json
import time
from datetime import datetime
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1/ml-prediction"


def print_section(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


def print_result(test_name: str, success: bool, details: str = ""):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
    print(f"{status} | {test_name}")
    if details:
        print(f"    {details}")


def test_health_check() -> bool:
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{API_BASE}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print_result("Health Check", True, f"–°—Ç–∞—Ç—É—Å: {data.get('status')}")
            return True
        else:
            print_result("Health Check", False, f"HTTP {response.status_code}")
            return False
    except Exception as e:
        print_result("Health Check", False, str(e))
        return False


def test_model_status() -> bool:
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.get(f"{API_BASE}/model-status", timeout=10)
        if response.status_code == 200:
            data = response.json()
            status_data = data.get('data', {})
            is_trained = status_data.get('is_trained', False)
            accuracy = status_data.get('model_accuracy', 0.0)
            
            print_result("Model Status", True, 
                        f"–û–±—É—á–µ–Ω–∞: {is_trained}, –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")
            return True
        else:
            print_result("Model Status", False, f"HTTP {response.status_code}")
            return False
    except Exception as e:
        print_result("Model Status", False, str(e))
        return False


def test_model_training() -> bool:
    """–¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    try:
        print("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        response = requests.post(f"{API_BASE}/train", timeout=60)
        
        if response.status_code == 200:
            data = response.json()
            training_data = data.get('data', {})
            
            if training_data.get('success', False):
                accuracy = training_data.get('accuracy', 0.0)
                training_samples = training_data.get('training_samples', 0)
                test_samples = training_data.get('test_samples', 0)
                
                print_result("Model Training", True, 
                            f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}, "
                            f"–û–±—É—á–∞—é—â–∏—Ö: {training_samples}, "
                            f"–¢–µ—Å—Ç–æ–≤—ã—Ö: {test_samples}")
                
                # –í—ã–≤–æ–¥–∏–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                feature_importance = training_data.get('feature_importance', {})
                if feature_importance:
                    print("\nüìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                    for feature, importance in sorted(
                        feature_importance.items(), 
                        key=lambda x: x[1], 
                        reverse=True
                    )[:5]:
                        print(f"    {feature}: {importance:.3f}")
                
                return True
            else:
                error = training_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print_result("Model Training", False, error)
                return False
        else:
            print_result("Model Training", False, f"HTTP {response.status_code}")
            return False
    except Exception as e:
        print_result("Model Training", False, str(e))
        return False


def test_single_prediction() -> bool:
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        status_response = requests.get(f"{API_BASE}/model-status", timeout=10)
        if status_response.status_code != 200:
            print_result("Single Prediction", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏")
            return False
        
        status_data = status_response.json().get('data', {})
        if not status_data.get('is_trained', False):
            print_result("Single Prediction", False, "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID 1 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
        signal_id = 1
        response = requests.post(f"{API_BASE}/predict/{signal_id}", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            prediction_data = data.get('prediction', {})
            
            if prediction_data.get('success', False):
                prediction = prediction_data.get('prediction')
                confidence = prediction_data.get('confidence', 0.0)
                model_accuracy = prediction_data.get('model_accuracy', 0.0)
                
                result_text = "–£–°–ü–ï–®–ï–ù" if prediction == 1 else "–ù–ï–£–°–ü–ï–®–ï–ù"
                print_result("Single Prediction", True, 
                            f"–°–∏–≥–Ω–∞–ª {signal_id}: {result_text}, "
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}, "
                            f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {model_accuracy:.3f}")
                return True
            else:
                error = prediction_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print_result("Single Prediction", False, error)
                return False
        elif response.status_code == 404:
            print_result("Single Prediction", False, "–°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î)")
            return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        else:
            print_result("Single Prediction", False, f"HTTP {response.status_code}")
            return False
    except Exception as e:
        print_result("Single Prediction", False, str(e))
        return False


def test_batch_prediction() -> bool:
    """–¢–µ—Å—Ç batch –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º batch –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_ids = [1, 2, 3, 4, 5]
        
        response = requests.post(
            f"{API_BASE}/batch-predict",
            json=signal_ids,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            predictions = data.get('predictions', [])
            total_signals = data.get('total_signals', 0)
            
            print_result("Batch Prediction", True, 
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            successful_predictions = 0
            for pred in predictions:
                signal_id = pred.get('signal_id')
                prediction_data = pred.get('prediction', {})
                
                if prediction_data.get('success', False):
                    successful_predictions += 1
                    prediction = prediction_data.get('prediction')
                    confidence = prediction_data.get('confidence', 0.0)
                    result_text = "–£–°–ü–ï–®–ï–ù" if prediction == 1 else "–ù–ï–£–°–ü–ï–®–ï–ù"
                    print(f"    –°–∏–≥–Ω–∞–ª {signal_id}: {result_text} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
                else:
                    error = prediction_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"    –°–∏–≥–Ω–∞–ª {signal_id}: –û–®–ò–ë–ö–ê - {error}")
            
            print(f"    –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {successful_predictions}/{total_signals}")
            return True
        elif response.status_code == 404:
            print_result("Batch Prediction", False, "–°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î)")
            return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        else:
            print_result("Batch Prediction", False, f"HTTP {response.status_code}")
            return False
    except Exception as e:
        print_result("Batch Prediction", False, str(e))
        return False


def test_feature_importance() -> bool:
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    try:
        response = requests.get(f"{API_BASE}/feature-importance", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            feature_importance = data.get('feature_importance', {})
            model_accuracy = data.get('model_accuracy', 0.0)
            
            print_result("Feature Importance", True, 
                        f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {model_accuracy:.3f}")
            
            if feature_importance:
                print("\nüìä –¢–æ–ø-5 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                for i, (feature, importance) in enumerate(
                    sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:5], 1
                ):
                    print(f"    {i}. {feature}: {importance:.3f}")
            
            return True
        elif response.status_code == 400:
            error_data = response.json()
            error_msg = error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print_result("Feature Importance", False, error_msg)
            return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        else:
            print_result("Feature Importance", False, f"HTTP {response.status_code}")
            return False
    except Exception as e:
        print_result("Feature Importance", False, str(e))
        return False


def test_model_save_load() -> bool:
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        save_response = requests.post(f"{API_BASE}/save-model", timeout=10)
        
        if save_response.status_code == 200:
            print_result("Model Save", True, "–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            load_response = requests.post(f"{API_BASE}/load-model", timeout=10)
            
            if load_response.status_code == 200:
                print_result("Model Load", True, "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            else:
                print_result("Model Load", False, f"HTTP {load_response.status_code}")
                return False
        else:
            print_result("Model Save", False, f"HTTP {save_response.status_code}")
            return False
    except Exception as e:
        print_result("Model Save/Load", False, str(e))
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_section("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML-–°–ï–†–í–ò–°–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í")
    print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Health Check", test_health_check),
        ("Model Status", test_model_status),
        ("Model Training", test_model_training),
        ("Single Prediction", test_single_prediction),
        ("Batch Prediction", test_batch_prediction),
        ("Feature Importance", test_feature_importance),
        ("Model Save/Load", test_model_save_load),
    ]
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    results = []
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print_result(test_name, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_section("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    successful_tests = sum(1 for _, success in results if success)
    total_tests = len(results)
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
    
    if successful_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ ML-—Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - successful_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    print(f"\nüìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == "__main__":
    main() 