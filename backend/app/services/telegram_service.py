"""
Service for Telegram channel discovery and signal validation
"""
import asyncio
import re
import logging
from typing import List, Dict, Optional, Tuple
from sqlalchemy.orm import Session
from app import models, schemas

logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self, db: Session):
        self.db = db
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        self.signal_keywords = [
            'crypto', 'bitcoin', 'btc', 'eth', 'ethereum', 'trading', 'signals',
            'binance', 'bybit', 'kucoin', 'long', 'short', 'buy', 'sell',
            'altcoin', 'defi', 'nft', 'moon', 'pump', 'dump', 'bull', 'bear'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        self.signal_patterns = [
            r'(\w+)/(\w+)\s*(\w+)\s*(\d+\.?\d*)',  # BTC/USDT LONG 45000
            r'(\w+)\s*(\w+)\s*(\d+\.?\d*)',        # BTC LONG 45000
            r'(\w+)\s*(\d+\.?\d*)\s*(\w+)',        # BTC 45000 LONG
            r'(\w+)\s*(\w+)\s*(\d+\.?\d*)\s*(\d+\.?\d*)',  # BTC LONG 45000 48000
        ]

    async def discover_channels_with_signals(self) -> Dict:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª–∞–º–∏
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        
        try:
            # 1. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram API
            potential_channels = await self._search_telegram_channels()
            
            # 2. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            channels_with_signals = []
            total_signals_found = 0
            
            for channel in potential_channels:
                logger.info(f"üì∫ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª: {channel['username']}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                messages = await self._get_channel_messages(channel['username'])
                
                # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                signals = self._extract_signals_from_messages(messages)
                
                if signals:
                    channel['signals'] = signals
                    channel['signal_count'] = len(signals)
                    channels_with_signals.append(channel)
                    total_signals_found += len(signals)
                    
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel['username']}")
                else:
                    logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ {channel['username']}")
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            added_channels = await self._add_channels_to_database(channels_with_signals)
            
            result = {
                "total_channels_discovered": len(potential_channels),
                "channels_with_signals": len(channels_with_signals),
                "total_signals_found": total_signals_found,
                "added_channels": added_channels,
                "search_method": "automatic_telegram_api",
                "keywords_used": self.signal_keywords,
                "patterns_used": len(self.signal_patterns)
            }
            
            logger.info(f"üéØ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['channels_with_signals']} –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
            raise

    async def _search_telegram_channels(self) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram API –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        """
        channels = []
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram API
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Telegram API
        for keyword in self.signal_keywords[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info(f"üîç –ò—â—É –∫–∞–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            mock_channels = self._get_mock_search_results(keyword)
            channels.extend(mock_channels)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_channels = []
        seen_usernames = set()
        
        for channel in channels:
            if channel['username'] not in seen_usernames:
                unique_channels.append(channel)
                seen_usernames.add(channel['username'])
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_channels)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        return unique_channels

    def _get_mock_search_results(self, keyword: str) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        """
        base_channels = [
            {
                "username": f"crypto_signals_{keyword}",
                "title": f"Crypto Signals {keyword.upper()}",
                "description": f"Professional {keyword} trading signals and analysis",
                "member_count": 15000 + hash(keyword) % 10000,
                "type": "telegram",
                "language": "en",
                "verified": True
            },
            {
                "username": f"{keyword}_trading_pro",
                "title": f"{keyword.upper()} Trading Pro",
                "description": f"Expert {keyword} trading signals and market analysis",
                "member_count": 8000 + hash(keyword) % 5000,
                "type": "telegram",
                "language": "en",
                "verified": False
            },
            {
                "username": f"binance_{keyword}_signals",
                "title": f"Binance {keyword.upper()} Signals",
                "description": f"Binance {keyword} trading signals and alerts",
                "member_count": 25000 + hash(keyword) % 15000,
                "type": "telegram",
                "language": "en",
                "verified": True
            }
        ]
        
        return base_channels

    async def _get_channel_messages(self, username: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        """
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Telegram API
        mock_messages = [
            f"üöÄ {username.upper()} SIGNAL: BTC/USDT LONG 45000 ‚Üí 48000 üéØ",
            f"üìà {username.upper()}: ETH/USDT SHORT 3200 ‚Üí 3000 ‚ö°",
            f"üî• {username.upper()} ALERT: SOL/USDT LONG 120 ‚Üí 140 üöÄ",
            f"üíé {username.upper()}: ADA/USDT BUY 0.45 ‚Üí 0.52 üìä",
            f"‚ö° {username.upper()} SIGNAL: DOT/USDT LONG 6.5 ‚Üí 7.2 üéØ",
            f"üìä {username.upper()}: LINK/USDT SHORT 15.5 ‚Üí 14.2 ‚ö°",
            f"üöÄ {username.upper()} ALERT: MATIC/USDT LONG 0.85 ‚Üí 0.95 üíé",
            f"üî• {username.upper()}: AVAX/USDT BUY 25.5 ‚Üí 28.0 üìà"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        import random
        selected_messages = random.sample(mock_messages, random.randint(3, 6))
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(selected_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}")
        return selected_messages

    def _extract_signals_from_messages(self, messages: List[str]) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        signals = []
        
        for message in messages:
            # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for pattern in self.signal_patterns:
                matches = re.findall(pattern, message, re.IGNORECASE)
                
                for match in matches:
                    if len(match) >= 3:
                        signal = self._parse_signal_match(match, message)
                        if signal:
                            signals.append(signal)
                            logger.info(f"üìä –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal['symbol']} {signal['signal_type']} {signal['entry_price']}")
        
        return signals

    def _parse_signal_match(self, match: tuple, original_message: str) -> Optional[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        try:
            if len(match) == 3:
                # –§–æ—Ä–º–∞—Ç: BTC LONG 45000
                symbol, signal_type, price = match
            elif len(match) == 4:
                # –§–æ—Ä–º–∞—Ç: BTC/USDT LONG 45000
                if '/' in match[0]:
                    symbol = f"{match[0]}/{match[1]}"
                    signal_type = match[2]
                    price = match[3]
                else:
                    # –§–æ—Ä–º–∞—Ç: BTC LONG 45000 48000
                    symbol = match[0]
                    signal_type = match[1]
                    price = match[2]
            else:
                return None
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = symbol.upper().replace('/', '')
            signal_type = signal_type.upper()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if signal_type not in ['LONG', 'SHORT', 'BUY', 'SELL']:
                return None
            
            if not price.replace('.', '').isdigit():
                return None
            
            entry_price = float(price)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã
            if signal_type in ['LONG', 'BUY']:
                target_price = entry_price * 1.05  # +5%
                stop_loss = entry_price * 0.97    # -3%
            else:
                target_price = entry_price * 0.95  # -5%
                stop_loss = entry_price * 1.03    # +3%
            
            return {
                "symbol": symbol,
                "signal_type": signal_type.lower(),
                "entry_price": entry_price,
                "target_price": round(target_price, 2),
                "stop_loss": round(stop_loss, 2),
                "confidence": 0.85,
                "source": "telegram_auto_discovery",
                "message": original_message[:100] + "..." if len(original_message) > 100 else original_message
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    async def _add_channels_to_database(self, channels_with_signals: List[Dict]) -> List[Dict]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        """
        added_channels = []
        
        for channel_data in channels_with_signals:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤ –ë–î
                existing_channel = self.db.query(models.Channel).filter(
                    models.Channel.username == channel_data['username']
                ).first()
                
                if existing_channel:
                    logger.info(f"üì∫ –ö–∞–Ω–∞–ª {channel_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                new_channel = models.Channel(
                    name=channel_data['title'],
                    username=channel_data['username'],
                    description=channel_data['description'],
                    type=channel_data['type'],
                    member_count=channel_data['member_count'],
                    is_verified=channel_data.get('verified', False),
                    is_active=True
                )
                
                self.db.add(new_channel)
                self.db.commit()
                self.db.refresh(new_channel)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                signals = channel_data.get('signals', [])
                for signal_data in signals:
                    new_signal = models.Signal(
                        channel_id=new_channel.id,
                        symbol=signal_data['symbol'],
                        signal_type=signal_data['signal_type'],
                        entry_price=signal_data['entry_price'],
                        target_price=signal_data['target_price'],
                        stop_loss=signal_data['stop_loss'],
                        confidence=signal_data['confidence'],
                        source=signal_data['source'],
                        status='active'
                    )
                    self.db.add(new_signal)
                
                self.db.commit()
                
                added_channels.append({
                    "id": new_channel.id,
                    "name": new_channel.name,
                    "username": new_channel.username,
                    "type": new_channel.type,
                    "signals_count": len(signals)
                })
                
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_data['username']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å {len(signals)} —Å–∏–≥–Ω–∞–ª–∞–º–∏")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_data['username']}: {e}")
                self.db.rollback()
                continue
        
        return added_channels

    def discover_and_add_channels_with_signals(self) -> Dict:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        """
        return asyncio.run(self.discover_channels_with_signals()) 