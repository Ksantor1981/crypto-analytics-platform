"""
Service for validating crypto signals in channels
"""
from typing import List, Dict, Any, Optional
import re
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class SignalValidationService:
    """Service for validating crypto trading signals."""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        self.signal_patterns = [
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–æ–≤
            r'(?i)(long|buy|–ø–æ–∫—É–ø–∫–∞|–ª–æ–Ω–≥).*?(\w+usdt).*?entry.*?(\d+\.?\d*).*?target.*?(\d+\.?\d*).*?stop.*?(\d+\.?\d*)',
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
            r'(?i)(short|sell|–ø—Ä–æ–¥–∞–∂–∞|—à–æ—Ä—Ç).*?(\w+usdt).*?entry.*?(\d+\.?\d*).*?target.*?(\d+\.?\d*).*?stop.*?(\d+\.?\d*)',
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª—é–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            r'(\w+usdt).*?(long|short|buy|sell).*?(\d+\.?\d*).*?(\d+\.?\d*).*?(\d+\.?\d*)',
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å —ç–º–æ–¥–∑–∏
            r'üöÄ.*?(\w+usdt).*?(\d+\.?\d*).*?(\d+\.?\d*).*?(\d+\.?\d*)',
            r'üìâ.*?(\w+usdt).*?(\d+\.?\d*).*?(\d+\.?\d*).*?(\d+\.?\d*)'
        ]
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä
        self.supported_pairs = [
            'BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOGEUSDT',
            'BNBUSDT', 'XRPUSDT', 'DOTUSDT', 'LINKUSDT', 'MATICUSDT',
            'AVAXUSDT', 'UNIUSDT', 'ATOMUSDT', 'LTCUSDT', 'BCHUSDT'
        ]
    
    def extract_signals_from_text(self, text: str) -> List[Dict[str, Any]]:
        """
        Extract trading signals from text content.
        """
        signals = []
        
        if not text:
            return signals
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern in self.signal_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE | re.DOTALL)
            
            for match in matches:
                try:
                    signal = self._parse_signal_match(match, text)
                    if signal:
                        signals.append(signal)
                except Exception as e:
                    logger.warning(f"Error parsing signal match: {e}")
                    continue
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_signals = []
        seen = set()
        
        for signal in signals:
            signal_key = f"{signal['symbol']}_{signal['signal_type']}_{signal['entry_price']}"
            if signal_key not in seen:
                seen.add(signal_key)
                unique_signals.append(signal)
        
        return unique_signals
    
    def _parse_signal_match(self, match, original_text: str) -> Optional[Dict[str, Any]]:
        """
        Parse a regex match into a signal dictionary.
        """
        try:
            groups = match.groups()
            
            if len(groups) >= 5:
                # –ü–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                direction = groups[0].lower()
                symbol = groups[1].upper()
                entry_price = float(groups[2])
                target_price = float(groups[3])
                stop_loss = float(groups[4])
            elif len(groups) >= 4:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                symbol = groups[0].upper()
                direction = groups[1].lower()
                entry_price = float(groups[2])
                target_price = float(groups[3])
                stop_loss = float(groups[4]) if len(groups) > 4 else entry_price * 0.98
            else:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            if direction in ['long', 'buy', '–ø–æ–∫—É–ø–∫–∞', '–ª–æ–Ω–≥']:
                signal_type = 'long'
            elif direction in ['short', 'sell', '–ø—Ä–æ–¥–∞–∂–∞', '—à–æ—Ä—Ç']:
                signal_type = 'short'
            else:
                signal_type = 'long'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
            if symbol not in self.supported_pairs:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω
            if entry_price <= 0 or target_price <= 0 or stop_loss <= 0:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            confidence = self._calculate_confidence(entry_price, target_price, stop_loss, signal_type)
            
            return {
                'symbol': symbol,
                'signal_type': signal_type,
                'entry_price': entry_price,
                'target_price': target_price,
                'stop_loss': stop_loss,
                'confidence': confidence,
                'original_text': original_text,
                'metadata': {
                    'extracted_at': datetime.utcnow().isoformat(),
                    'pattern_matched': True
                }
            }
            
        except (ValueError, IndexError) as e:
            logger.warning(f"Error parsing signal: {e}")
            return None
    
    def _calculate_confidence(self, entry_price: float, target_price: float, 
                            stop_loss: float, signal_type: str) -> float:
        """
        Calculate confidence level for a signal based on various factors.
        """
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
            if signal_type == 'long':
                risk = entry_price - stop_loss
                reward = target_price - entry_price
            else:  # short
                risk = stop_loss - entry_price
                reward = entry_price - target_price
            
            if risk > 0:
                risk_reward_ratio = reward / risk
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
                if risk_reward_ratio >= 3.0:
                    confidence += 0.3
                elif risk_reward_ratio >= 2.0:
                    confidence += 0.2
                elif risk_reward_ratio >= 1.5:
                    confidence += 0.1
                elif risk_reward_ratio < 0.5:
                    confidence -= 0.2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω
            if signal_type == 'long':
                if target_price > entry_price and stop_loss < entry_price:
                    confidence += 0.1
                else:
                    confidence -= 0.3
            else:  # short
                if target_price < entry_price and stop_loss > entry_price:
                    confidence += 0.1
                else:
                    confidence -= 0.3
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = max(0.1, min(0.95, confidence))
            
        except ZeroDivisionError:
            confidence = 0.3
        
        return round(confidence, 2)
    
    def validate_channel_content(self, channel_content: List[str]) -> List[Dict[str, Any]]:
        """
        Validate channel content for trading signals.
        """
        all_signals = []
        
        for content in channel_content:
            signals = self.extract_signals_from_text(content)
            all_signals.extend(signals)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        unique_signals = []
        seen = set()
        
        for signal in all_signals:
            signal_key = f"{signal['symbol']}_{signal['signal_type']}_{signal['entry_price']}"
            if signal_key not in seen:
                seen.add(signal_key)
                unique_signals.append(signal)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
        unique_signals.sort(key=lambda x: x['confidence'], reverse=True)
        
        return unique_signals
    
    def is_valid_signal(self, signal: Dict[str, Any]) -> bool:
        """
        Check if a signal is valid.
        """
        required_fields = ['symbol', 'signal_type', 'entry_price', 'target_price', 'stop_loss']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in signal:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
        if signal['symbol'] not in self.supported_pairs:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω
        if (signal['entry_price'] <= 0 or 
            signal['target_price'] <= 0 or 
            signal['stop_loss'] <= 0):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if signal['signal_type'] not in ['long', 'short']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ü–µ–Ω
        if signal['signal_type'] == 'long':
            if signal['target_price'] <= signal['entry_price'] or signal['stop_loss'] >= signal['entry_price']:
                return False
        else:  # short
            if signal['target_price'] >= signal['entry_price'] or signal['stop_loss'] <= signal['entry_price']:
                return False
        
        return True
