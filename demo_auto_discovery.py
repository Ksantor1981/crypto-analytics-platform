#!/usr/bin/env python3
"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –ö–ê–ù–ê–õ–û–í
============================================
"""

import requests
import json
import time

def demo_automatic_discovery():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –ö–ê–ù–ê–õ–û–í")
    print("="*60)
    print()
    
    print("üìã –ß–¢–û –î–ï–õ–ê–ï–¢ –°–ò–°–¢–ï–ú–ê:")
    print("   1. üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    print("   2. üì∫ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª")
    print("   3. üìä –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("   4. ‚úÖ –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("   5. üìà –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print()
    
    url = "http://localhost:8002/api/v1/channels/discover"
    
    try:
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê...")
        print("‚è≥ –°–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç –∫–∞–Ω–∞–ª—ã —Å –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        
        start_time = time.time()
        
        response = requests.post(
            url,
            headers={"Content-Type": "application/json"},
            json={},
            timeout=30
        )
        
        end_time = time.time()
        search_duration = round(end_time - start_time, 2)
        
        if response.status_code == 200:
            result = response.json()
            data = result.get('data', {})
            
            print("‚úÖ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!")
            print()
            
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê:")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_duration} —Å–µ–∫—É–Ω–¥")
            print(f"   üîç –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {data.get('total_channels_discovered', 0)}")
            print(f"   ‚úÖ –ö–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –Ω–∞–π–¥–µ–Ω–æ: {data.get('channels_with_signals', 0)}")
            print(f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {data.get('total_signals_found', 0)}")
            print(f"   ü§ñ –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: {data.get('search_method', 'unknown')}")
            print()
            
            print("üîë –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –ü–û–ò–°–ö–ê:")
            keywords = data.get('keywords_used', [])
            for i, keyword in enumerate(keywords, 1):
                print(f"   {i}. {keyword}")
            print()
            
            print("üì∫ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´ –° –°–ò–ì–ù–ê–õ–ê–ú–ò:")
            added_channels = data.get('added_channels', [])
            for i, channel in enumerate(added_channels[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {i}. {channel['name']} (@{channel['username']})")
                print(f"      üìä –°–∏–≥–Ω–∞–ª–æ–≤: {channel['signals_count']}")
                print(f"      üîó –¢–∏–ø: {channel['type']}")
                print()
            
            if len(added_channels) > 5:
                print(f"   ... –∏ –µ—â–µ {len(added_channels) - 5} –∫–∞–Ω–∞–ª–æ–≤")
                print()
            
            print("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:")
            print("   ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            print("   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
            print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            print()
            
            print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print("   –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
            print("   - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
            print("   - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            print("   - –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö")
            print("   - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤")
            
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {response.status_code}")
            try:
                error = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error}")
            except:
                print(f"   –¢–µ–∫—Å—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

if __name__ == "__main__":
    success = demo_automatic_discovery()
    exit(0 if success else 1) 