#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit
"""

import requests
import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ workers
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))

async def test_bybit_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Bybit API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bybit...")
    
    try:
        from workers.exchange.bybit_client import BybitClient
        from workers.real_data_config import CRYPTO_SYMBOLS
        
        async with BybitClient() as client:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            test_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
            
            market_data = await client.get_market_data(test_symbols)
            
            for symbol in test_symbols:
                if symbol in market_data:
                    data = market_data[symbol]
                    print(f"‚úÖ {symbol}: ${data.get('current_price', 'N/A')} "
                          f"({data.get('change_24h', 'N/A')}% –∑–∞ 24—á)")
                else:
                    print(f"‚ùå {symbol}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            return len(market_data) > 0
            
    except ImportError as e:
        print(f"‚ùå Bybit –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Bybit API: {e}")
        return False

def test_ml_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cases = [
            {
                "asset": "BTCUSDT",
                "entry_price": 45000.0,
                "target_price": 47000.0,
                "stop_loss": 43000.0,
                "direction": "LONG"
            },
            {
                "asset": "ETHUSDT", 
                "entry_price": 2500.0,
                "target_price": 2600.0,
                "stop_loss": 2400.0,
                "direction": "LONG"
            },
            {
                "asset": "BNBUSDT",
                "entry_price": 300.0,
                "target_price": 310.0,
                "stop_loss": 290.0,
                "direction": "LONG"
            }
        ]
        
        successful_predictions = 0
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìä –¢–µ—Å—Ç {i}: {test_case['asset']}")
            
            response = requests.post(
                "http://127.0.0.1:8001/api/v1/predictions/predict",
                json=test_case,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {data.get('prediction', 'N/A')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 'N/A'):.3f}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data.get('expected_return', 'N/A'):.2f}%")
                print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {data.get('risk_level', 'N/A')}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data.get('recommendation', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                market_data = data.get('market_data', {})
                if market_data.get('source') == 'bybit_real':
                    print(f"   ‚úÖ –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${market_data.get('current_price', 'N/A')}")
                    print(f"   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.get('change_24h', 'N/A')}%")
                    successful_predictions += 1
                else:
                    print(f"   ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    successful_predictions += 0.5  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
                    
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        
        success_rate = (successful_predictions / len(test_cases)) * 100
        print(f"\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {success_rate:.1f}%")
        
        return success_rate >= 70  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML: {e}")
        return False

def test_market_data_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        test_assets = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
        
        for asset in test_assets:
            response = requests.get(
                f"http://127.0.0.1:8001/api/v1/predictions/market-data/{asset}",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {asset}: {data.get('status', 'unknown')}")
                
                if 'market_data' in data:
                    market_info = data['market_data']
                    print(f"   –¶–µ–Ω–∞: ${market_info.get('current_price', 'N/A')}")
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {market_info.get('source', 'N/A')}")
            else:
                print(f"‚ùå {asset}: –û—à–∏–±–∫–∞ {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è market data: {e}")
        return False

def test_supported_assets():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤...")
    
    try:
        response = requests.get(
            "http://127.0.0.1:8001/api/v1/predictions/supported-assets",
            timeout=5
        )
        
        if response.status_code == 200:
            data = response.json()
            supported_assets = data.get('supported_assets', [])
            
            print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(supported_assets)} –∞–∫—Ç–∏–≤–æ–≤")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(supported_assets[:5])}")
            
            return len(supported_assets) > 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 70)
    
    tests = [
        ("Bybit Integration", test_bybit_integration()),
        ("ML with Real Data", test_ml_with_real_data()),
        ("Market Data Endpoint", test_market_data_endpoint()),
        ("Supported Assets", test_supported_assets())
    ]
    
    results = {}
    
    for test_name, test_coro in tests:
        print(f"\nüìã {test_name}")
        print("-" * 50)
        
        try:
            if asyncio.iscoroutine(test_coro):
                results[test_name] = await test_coro
            else:
                results[test_name] = test_coro
        except Exception as e:
            print(f"‚ùå {test_name} crashed: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 70)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name:25} : {status}")
    
    print("-" * 70)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total} ({(passed/total)*100:.1f}%)")
    
    if passed >= total * 0.75:  # 75% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! ML —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        return True
    else:
        print("‚ö†Ô∏è  –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API.")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 