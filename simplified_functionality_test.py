#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Crypto Analytics Platform
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç backend –º–æ–¥—É–ª–µ–π
"""

import asyncio
import sys
import json
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

class SimplifiedFunctionalityTest:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.test_results = {
            'file_structure': {},
            'telegram': {},
            'reddit': {},
            'feedback': {},
            'channel_discovery': {},
            'signal_processing': {},
            'frontend': {},
            'ocr': {},
            'overall': {}
        }
        self.start_time = time.time()
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        
        print("üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        print("="*100)
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
        print("="*100)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
        await self.test_file_structure()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await self.test_telegram_functionality()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Reddit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await self.test_reddit_functionality()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        await self.test_feedback_functionality()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        await self.test_channel_discovery()
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        await self.test_signal_processing()
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self.test_frontend_functionality()
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ OCR —Å–∏—Å—Ç–µ–º—ã
        await self.test_ocr_functionality()
        
        # 9. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        await self.generate_final_report()
    
    async def test_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        
        print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        directories = [
            'backend',
            'frontend', 
            'workers',
            'database',
            'docs'
        ]
        
        existing_dirs = []
        for dir_name in directories:
            if Path(dir_name).exists():
                existing_dirs.append(dir_name)
                self.test_results['file_structure'][f'directory_{dir_name}'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –Ω–∞–π–¥–µ–Ω–∞'
                }
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['file_structure'][f'directory_{dir_name}'] = {
                    'status': '‚ùå –û–®–ò–ë–ö–ê',
                    'message': f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }
                print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: –û–®–ò–ë–ö–ê")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        key_files = [
            'README.md',
            'TASKS2.md',
            'docker-compose.yml',
            'backend/requirements.txt',
            'frontend/package.json'
        ]
        
        existing_files = []
        for file_path in key_files:
            if Path(file_path).exists():
                existing_files.append(file_path)
                self.test_results['file_structure'][f'file_{file_path.replace("/", "_")}'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': f'–§–∞–π–ª {file_path} –Ω–∞–π–¥–µ–Ω'
                }
                print(f"‚úÖ –§–∞–π–ª {file_path}: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['file_structure'][f'file_{file_path.replace("/", "_")}'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                print(f"‚ö†Ô∏è –§–∞–π–ª {file_path}: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
    
    async def test_telegram_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("\nüì± –ü–†–û–í–ï–†–ö–ê TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Å–∫—Ä–∞–ø–µ—Ä–∞
            from workers.telegram.telegram_scraper import TelegramSignalScraper
            
            self.test_results['telegram']['scraper'] = {
                'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                'message': 'Telegram —Å–∫—Ä–∞–ø–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'
            }
            print("‚úÖ Telegram —Å–∫—Ä–∞–ø–µ—Ä: –£–°–ü–ï–®–ù–û")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Selenium —Å–∫—Ä–∞–ø–µ—Ä–∞
            try:
                from workers.telegram.selenium_scraper import SeleniumTelegramScraper
                self.test_results['telegram']['selenium'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': 'Selenium —Å–∫—Ä–∞–ø–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'
                }
                print("‚úÖ Selenium —Å–∫—Ä–∞–ø–µ—Ä: –£–°–ü–ï–®–ù–û")
            except Exception as e:
                self.test_results['telegram']['selenium'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'Selenium —Å–∫—Ä–∞–ø–µ—Ä: {e}'
                }
                print(f"‚ö†Ô∏è Selenium —Å–∫—Ä–∞–ø–µ—Ä: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            try:
                from workers.telegram_feedback_bot import TelegramFeedbackBot
                self.test_results['telegram']['feedback_bot'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': '–ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–æ—Å—Ç—É–ø–µ–Ω'
                }
                print("‚úÖ –ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –£–°–ü–ï–®–ù–û")
            except Exception as e:
                self.test_results['telegram']['feedback_bot'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'–ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}'
                }
                print(f"‚ö†Ô∏è –ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - {e}")
            
        except Exception as e:
            self.test_results['telegram']['overall'] = {
                'status': '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
                'message': f'Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}'
            }
            print(f"‚ùå Telegram: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    async def test_reddit_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Reddit —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("\nüî¥ –ü–†–û–í–ï–†–ö–ê REDDIT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Reddit –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
            from workers.reddit_collector import RedditSignalCollector
            
            self.test_results['reddit']['collector'] = {
                'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                'message': 'Reddit –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'
            }
            print("‚úÖ Reddit –∫–æ–ª–ª–µ–∫—Ç–æ—Ä: –£–°–ü–ï–®–ù–û")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try:
                collector = RedditSignalCollector()
                self.test_results['reddit']['configuration'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': 'Reddit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
                }
                print("‚úÖ Reddit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –£–°–ü–ï–®–ù–û")
            except Exception as e:
                self.test_results['reddit']['configuration'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'Reddit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}'
                }
                print(f"‚ö†Ô∏è Reddit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - {e}")
            
        except Exception as e:
            self.test_results['reddit']['overall'] = {
                'status': '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
                'message': f'Reddit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}'
            }
            print(f"‚ùå Reddit: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    async def test_feedback_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        print("\nüìù –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_files = [
            'backend/app/models/feedback.py',
            'backend/app/schemas/feedback.py',
            'backend/app/api/endpoints/feedback.py',
            'workers/telegram_feedback_bot.py',
            'frontend/components/FeedbackForm.tsx',
            'frontend/pages/feedback.tsx'
        ]
        
        existing_feedback_files = []
        for file_path in feedback_files:
            if Path(file_path).exists():
                existing_feedback_files.append(file_path)
                self.test_results['feedback'][f'file_{file_path.replace("/", "_")}'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': f'–§–∞–π–ª {file_path} –Ω–∞–π–¥–µ–Ω'
                }
                print(f"‚úÖ –§–∞–π–ª {file_path}: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['feedback'][f'file_{file_path.replace("/", "_")}'] = {
                    'status': '‚ùå –û–®–ò–ë–ö–ê',
                    'message': f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                print(f"‚ùå –§–∞–π–ª {file_path}: –û–®–ò–ë–ö–ê")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_report = Path('FEEDBACK_SYSTEM_REPORT.md')
        if feedback_report.exists():
            self.test_results['feedback']['report'] = {
                'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                'message': '–û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–π–¥–µ–Ω'
            }
            print("‚úÖ –û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –£–°–ü–ï–®–ù–û")
        else:
            self.test_results['feedback']['report'] = {
                'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                'message': '–û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
            print("‚ö†Ô∏è –û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
    
    async def test_channel_discovery(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–í")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            from workers.channel_discovery_system import ChannelDiscoverySystem
            
            self.test_results['channel_discovery']['system'] = {
                'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                'message': '–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞'
            }
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: –£–°–ü–ï–®–ù–û")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            try:
                from workers.enhanced_channel_analyzer import EnhancedChannelAnalyzer
                self.test_results['channel_discovery']['analyzer'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': '–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω'
                }
                print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤: –£–°–ü–ï–®–ù–û")
            except Exception as e:
                self.test_results['channel_discovery']['analyzer'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {e}'
                }
                print(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
            try:
                discovery_system = ChannelDiscoverySystem()
                telegram_channels = len(discovery_system.known_channels['telegram'])
                reddit_channels = len(discovery_system.known_channels['reddit'])
                
                self.test_results['channel_discovery']['configuration'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {telegram_channels} Telegram, {reddit_channels} Reddit'
                }
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤: –£–°–ü–ï–®–ù–û ({telegram_channels} Telegram, {reddit_channels} Reddit)")
            except Exception as e:
                self.test_results['channel_discovery']['configuration'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}'
                }
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - {e}")
            
        except Exception as e:
            self.test_results['channel_discovery']['overall'] = {
                'status': '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
                'message': f'–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}'
            }
            print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    async def test_signal_processing(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–ò–ì–ù–ê–õ–û–í")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            from workers.signal_patterns import SIGNAL_PATTERNS, extract_signal_info
            
            self.test_results['signal_processing']['patterns'] = {
                'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                'message': f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(SIGNAL_PATTERNS)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤'
            }
            print(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤: –£–°–ü–ï–®–ù–û ({len(SIGNAL_PATTERNS)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_files = [
                'workers/signal_patterns.py',
                'workers/run_signal_scraping.py',
                'workers/telegram/telegram_collector_migrated.py',
                'workers/shared/parsers/signal_extractor_migrated.py'
            ]
            
            existing_signal_files = []
            for file_path in signal_files:
                if Path(file_path).exists():
                    existing_signal_files.append(file_path)
                    self.test_results['signal_processing'][f'file_{file_path.replace("/", "_")}'] = {
                        'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                        'message': f'–§–∞–π–ª {file_path} –Ω–∞–π–¥–µ–Ω'
                    }
                    print(f"‚úÖ –§–∞–π–ª {file_path}: –£–°–ü–ï–®–ù–û")
                else:
                    self.test_results['signal_processing'][f'file_{file_path.replace("/", "_")}'] = {
                        'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                        'message': f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    }
                    print(f"‚ö†Ô∏è –§–∞–π–ª {file_path}: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
            
        except Exception as e:
            self.test_results['signal_processing']['overall'] = {
                'status': '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
                'message': f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}'
            }
            print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    async def test_frontend_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("\nüåê –ü–†–û–í–ï–†–ö–ê FRONTEND –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback_form_path = Path("frontend/components/FeedbackForm.tsx")
            if feedback_form_path.exists():
                self.test_results['frontend']['feedback_form'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–π–¥–µ–Ω'
                }
                print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['frontend']['feedback_form'] = {
                    'status': '‚ùå –û–®–ò–ë–ö–ê',
                    'message': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –û–®–ò–ë–ö–ê")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback_page_path = Path("frontend/pages/feedback.tsx")
            if feedback_page_path.exists():
                self.test_results['frontend']['feedback_page'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–π–¥–µ–Ω–∞'
                }
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['frontend']['feedback_page'] = {
                    'status': '‚ùå –û–®–ò–ë–ö–ê',
                    'message': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }
                print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –û–®–ò–ë–ö–ê")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            main_pages = [
                "frontend/pages/index.tsx",
                "frontend/pages/signals.tsx",
                "frontend/pages/analytics.tsx"
            ]
            
            existing_pages = []
            for page in main_pages:
                if Path(page).exists():
                    existing_pages.append(page.split('/')[-1])
            
            if len(existing_pages) >= 2:
                self.test_results['frontend']['main_pages'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': f'–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã: {existing_pages}'
                }
                print(f"‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –£–°–ü–ï–®–ù–û ({existing_pages})")
            else:
                self.test_results['frontend']['main_pages'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(existing_pages)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü'
                }
                print(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ({existing_pages})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
            package_json_path = Path("frontend/package.json")
            if package_json_path.exists():
                self.test_results['frontend']['package_json'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': 'package.json –Ω–∞–π–¥–µ–Ω'
                }
                print("‚úÖ package.json: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['frontend']['package_json'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': 'package.json –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                print("‚ö†Ô∏è package.json: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
            
        except Exception as e:
            self.test_results['frontend']['overall'] = {
                'status': '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
                'message': f'Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}'
            }
            print(f"‚ùå Frontend: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    async def test_ocr_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("\nüëÅÔ∏è –ü–†–û–í–ï–†–ö–ê OCR –°–ò–°–¢–ï–ú–´")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ OCR
        ocr_files = [
            'backend/app/services/ocr_service.py',
            'backend/app/api/endpoints/ocr_integration.py',
            'backend/app/schemas/ocr.py',
            'workers/shared/ocr/enhanced_ocr_pipeline.py'
        ]
        
        existing_ocr_files = []
        for file_path in ocr_files:
            if Path(file_path).exists():
                existing_ocr_files.append(file_path)
                self.test_results['ocr'][f'file_{file_path.replace("/", "_")}'] = {
                    'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                    'message': f'–§–∞–π–ª {file_path} –Ω–∞–π–¥–µ–Ω'
                }
                print(f"‚úÖ –§–∞–π–ª {file_path}: –£–°–ü–ï–®–ù–û")
            else:
                self.test_results['ocr'][f'file_{file_path.replace("/", "_")}'] = {
                    'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                    'message': f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
                print(f"‚ö†Ô∏è –§–∞–π–ª {file_path}: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± OCR
        ocr_report = Path('OCR_ACTIVATION_REPORT.md')
        if ocr_report.exists():
            self.test_results['ocr']['report'] = {
                'status': '‚úÖ –£–°–ü–ï–®–ù–û',
                'message': '–û—Ç—á–µ—Ç –æ–± OCR –Ω–∞–π–¥–µ–Ω'
            }
            print("‚úÖ –û—Ç—á–µ—Ç –æ–± OCR: –£–°–ü–ï–®–ù–û")
        else:
            self.test_results['ocr']['report'] = {
                'status': '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
                'message': '–û—Ç—á–µ—Ç –æ–± OCR –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
            print("‚ö†Ô∏è –û—Ç—á–µ—Ç –æ–± OCR: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
    
    async def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        print("\n" + "="*100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        print("="*100)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = 0
        successful_tests = 0
        warning_tests = 0
        failed_tests = 0
        
        for category, tests in self.test_results.items():
            if category == 'overall':
                continue
                
            for test_name, result in tests.items():
                total_tests += 1
                status = result['status']
                
                if '‚úÖ' in status:
                    successful_tests += 1
                elif '‚ö†Ô∏è' in status:
                    warning_tests += 1
                elif '‚ùå' in status:
                    failed_tests += 1
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        warning_rate = (warning_tests / total_tests * 100) if total_tests > 0 else 0
        failure_rate = (failed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - self.start_time
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests} ({success_rate:.1f}%)")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_tests} ({warning_rate:.1f}%)")
        print(f"   –û—à–∏–±–æ–∫: {failed_tests} ({failure_rate:.1f}%)")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        print(f"\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        for category, tests in self.test_results.items():
            if category == 'overall':
                continue
                
            print(f"\n   {category.upper()}:")
            for test_name, result in tests.items():
                status_icon = "‚úÖ" if "‚úÖ" in result['status'] else "‚ö†Ô∏è" if "‚ö†Ô∏è" in result['status'] else "‚ùå"
                print(f"     {status_icon} {test_name}: {result['message']}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 90:
            overall_status = "üöÄ –û–¢–õ–ò–ß–ù–û"
            overall_message = "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
        elif success_rate >= 80:
            overall_status = "‚úÖ –•–û–†–û–®–û"
            overall_message = "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"
        elif success_rate >= 70:
            overall_status = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            overall_message = "–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º"
        else:
            overall_status = "‚ùå –ö–†–ò–¢–ò–ß–ù–û"
            overall_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
        
        self.test_results['overall'] = {
            'status': overall_status,
            'message': overall_message,
            'statistics': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'warning_tests': warning_tests,
                'failed_tests': failed_tests,
                'success_rate': success_rate,
                'execution_time': execution_time
            }
        }
        
        print(f"\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"   {overall_status}: {overall_message}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_filename = f"simplified_test_report_{timestamp}.json"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_filename}")
        print(f"\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    tester = SimplifiedFunctionalityTest()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
