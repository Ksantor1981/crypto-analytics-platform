#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞
"""

import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤—ã–π URL ML —Å–µ—Ä–≤–∏—Å–∞
ML_SERVICE_URL = "http://localhost:8001"

def test_health():
    """–¢–µ—Å—Ç health endpoints"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π health
    response = requests.get(f"{ML_SERVICE_URL}/")
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π health: {response.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
    
    # Health predictions
    response = requests.get(f"{ML_SERVICE_URL}/api/v1/predictions/health")
    print(f"‚úÖ Predictions health: {response.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
    
    # Health backtesting
    response = requests.get(f"{ML_SERVICE_URL}/api/v1/backtesting/health")
    print(f"‚úÖ Backtesting health: {response.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
    
    # Health risk analysis
    response = requests.get(f"{ML_SERVICE_URL}/api/v1/risk-analysis/health")
    print(f"‚úÖ Risk analysis health: {response.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response.json()}")

def test_model_info():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...")
    
    response = requests.get(f"{ML_SERVICE_URL}/api/v1/predictions/model/info")
    print(f"‚úÖ Model info: {response.status_code}")
    data = response.json()
    print(f"   –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {data['model_version']}")
    print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {data['model_type']}")
    print(f"   –û–±—É—á–µ–Ω–∞: {data['is_trained']}")
    print(f"   –ü—Ä–∏–∑–Ω–∞–∫–∏: {data['feature_names']}")

def test_market_data():
    """–¢–µ—Å—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    assets = ["BTC", "ETH", "BNB", "SOL"]
    
    for asset in assets:
        response = requests.get(f"{ML_SERVICE_URL}/api/v1/predictions/market-data/{asset}")
        print(f"‚úÖ Market data {asset}: {response.status_code}")
        data = response.json()
        print(f"   –¶–µ–Ω–∞: ${data['data']['price']:.2f}")
        print(f"   –û–±—ä–µ–º: {data['data']['volume']:.0f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {data['data']['change_24h']:.2f}%")
        print(f"   RSI: {data['data']['rsi']:.2f}")

def test_prediction():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            "asset": "BTC",
            "entry_price": 50000,
            "target_price": 55000,
            "stop_loss": 48000,
            "direction": "LONG"
        },
        {
            "asset": "ETH",
            "entry_price": 3000,
            "target_price": 3300,
            "stop_loss": 2850,
            "direction": "LONG"
        },
        {
            "asset": "SOL",
            "entry_price": 100,
            "target_price": 90,
            "stop_loss": 110,
            "direction": "SHORT"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìä –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è #{i}:")
        print(f"   –ê–∫—Ç–∏–≤: {test_case['asset']}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {test_case['direction']}")
        print(f"   –í—Ö–æ–¥: ${test_case['entry_price']}")
        print(f"   –¶–µ–ª—å: ${test_case['target_price']}")
        print(f"   –°—Ç–æ–ø: ${test_case['stop_loss']}")
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=test_case,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {data['prediction']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.2f}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['expected_return']:.2f}%")
                print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {data['risk_level']}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['recommendation']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_backtesting():
    """–¢–µ—Å—Ç –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
    
    backtest_request = {
        "asset": "BTC",
        "start_date": "2024-01-01",
        "end_date": "2024-12-31",
        "strategy": "simple",
        "initial_capital": 10000
    }
    
    try:
        response = requests.post(
            f"{ML_SERVICE_URL}/api/v1/backtesting/run",
            json=backtest_request,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            print(f"   –ê–∫—Ç–∏–≤: {data['asset']}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {data['period']}")
            print(f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['results']['total_return']:.2f}%")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {data['results']['sharpe_ratio']:.2f}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {data['results']['max_drawdown']:.2f}%")
            print(f"   –í–∏–Ω—Ä–µ–π—Ç: {data['results']['win_rate']:.2f}%")
            print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {data['results']['total_trades']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_risk_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤...")
    
    risk_request = {
        "asset": "BTC",
        "position_size": 1000,
        "entry_price": 50000,
        "stop_loss": 48000,
        "take_profit": 55000,
        "direction": "LONG",
        "risk_tolerance": "MEDIUM"
    }
    
    try:
        response = requests.post(
            f"{ML_SERVICE_URL}/api/v1/risk-analysis/analyze",
            json=risk_request,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —É—Å–ø–µ—à–µ–Ω!")
            print(f"   –ê–∫—Ç–∏–≤: {data['asset']}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {data['risk_level']}")
            print(f"   –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {data['risk_score']:.2f}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {data['recommendations']}")
            print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {data['warnings']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –°–ï–†–í–ò–°–ê")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    print(f"URL —Å–µ—Ä–≤–∏—Å–∞: {ML_SERVICE_URL}")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        test_health()
        test_model_info()
        test_market_data()
        test_prediction()
        test_backtesting()
        test_risk_analysis()
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 50)

if __name__ == "__main__":
    main() 