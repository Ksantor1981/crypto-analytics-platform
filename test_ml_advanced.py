#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç ML-—Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ML_SERVICE_URL = "http://localhost:8001"

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = {
        "asset": "BTC",
        "direction": "LONG",
        "entry_price": 50000,
        "channel_accuracy": 0.8,
        "confidence": 0.7
    }
    
    start_time = time.time()
    successful_requests = 0
    total_requests = 10
    
    for i in range(total_requests):
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=test_data,
                headers={'Content-Type': 'application/json'},
                timeout=5
            )
            
            if response.status_code == 200:
                successful_requests += 1
            else:
                print(f"   ‚ùå –ó–∞–ø—Ä–æ—Å {i+1} –Ω–µ –ø—Ä–æ—à–µ–ª: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {i+1}: {e}")
    
    end_time = time.time()
    total_time = end_time - start_time
    avg_time = total_time / total_requests
    
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"      –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{total_requests}")
    print(f"      –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
    print(f"      –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_time:.3f} —Å–µ–∫")
    print(f"      RPS (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É): {total_requests/total_time:.1f}")
    
    return successful_requests == total_requests

def test_different_assets():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã...")
    
    assets = ["BTC", "ETH", "BNB", "ADA", "SOL", "DOT", "LINK", "UNI"]
    results = {}
    
    for asset in assets:
        test_data = {
            "asset": asset,
            "direction": "LONG",
            "entry_price": 1000,
            "channel_accuracy": 0.7,
            "confidence": 0.6
        }
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=test_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                recommendation = data.get('recommendation', 'N/A')
                confidence = data.get('confidence', 0)
                results[asset] = {
                    'recommendation': recommendation,
                    'confidence': confidence,
                    'status': 'success'
                }
                print(f"   ‚úÖ {asset}: {recommendation} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            else:
                results[asset] = {'status': 'error', 'code': response.status_code}
                print(f"   ‚ùå {asset}: –æ—à–∏–±–∫–∞ {response.status_code}")
                
        except Exception as e:
            results[asset] = {'status': 'exception', 'error': str(e)}
            print(f"   ‚ùå {asset}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
    
    success_count = sum(1 for r in results.values() if r['status'] == 'success')
    print(f"\n   üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(assets)} –∞–∫—Ç–∏–≤–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    return success_count == len(assets)

def test_signal_scenarios():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    scenarios = [
        {
            "name": "–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª",
            "data": {
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 50000,
                "target_price": 55000,
                "stop_loss": 48000,
                "channel_accuracy": 0.9,
                "confidence": 0.8
            }
        },
        {
            "name": "–°–ª–∞–±—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª",
            "data": {
                "asset": "ETH",
                "direction": "SHORT",
                "entry_price": 3000,
                "target_price": 2800,
                "stop_loss": 3200,
                "channel_accuracy": 0.4,
                "confidence": 0.3
            }
        },
        {
            "name": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª",
            "data": {
                "asset": "BNB",
                "direction": "LONG",
                "entry_price": 400,
                "channel_accuracy": 0.5,
                "confidence": 0.5
            }
        },
        {
            "name": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å",
            "data": {
                "asset": "SOL",
                "direction": "LONG",
                "entry_price": 100,
                "target_price": 150,
                "stop_loss": 95,
                "channel_accuracy": 0.6,
                "confidence": 0.7
            }
        }
    ]
    
    results = []
    
    for scenario in scenarios:
        print(f"\n   üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=scenario['data'],
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data.get('recommendation', 'N/A')}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 'N/A')}")
                print(f"      –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {data.get('risk_score', 'N/A')}")
                
                results.append({
                    'scenario': scenario['name'],
                    'status': 'success',
                    'data': data
                })
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                results.append({
                    'scenario': scenario['name'],
                    'status': 'error',
                    'code': response.status_code
                })
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append({
                'scenario': scenario['name'],
                'status': 'exception',
                'error': str(e)
            })
    
    success_count = sum(1 for r in results if r['status'] == 'success')
    print(f"\n   üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    return success_count == len(scenarios)

def test_concurrent_requests():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
    
    import threading
    
    results = []
    lock = threading.Lock()
    
    def make_request(thread_id):
        test_data = {
            "asset": "BTC",
            "direction": "LONG",
            "entry_price": 50000,
            "channel_accuracy": 0.7,
            "confidence": 0.6
        }
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=test_data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            with lock:
                results.append({
                    'thread_id': thread_id,
                    'status_code': response.status_code,
                    'success': response.status_code == 200
                })
                
        except Exception as e:
            with lock:
                results.append({
                    'thread_id': thread_id,
                    'status_code': None,
                    'success': False,
                    'error': str(e)
                })
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º 5 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    threads = []
    for i in range(5):
        thread = threading.Thread(target=make_request, args=(i,))
        threads.append(thread)
        thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful = sum(1 for r in results if r['success'])
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print(f"      –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/{len(results)}")
    
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"      –ü–æ—Ç–æ–∫ {result['thread_id']}: {status} (–∫–æ–¥: {result['status_code']})")
    
    return successful == len(results)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    try:
        response = requests.get(f"{ML_SERVICE_URL}/api/v1/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ML-—Å–µ—Ä–≤–∏—Å—É: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance),
        ("–†–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", test_different_assets),
        ("–°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤", test_signal_scenarios),
        ("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", test_concurrent_requests)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ ML-—Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    elif passed >= total * 0.8:
        print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ. –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    print(f"\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 