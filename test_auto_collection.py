#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
import asyncio
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))

def test_telegram_collection():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram...")
    
    try:
        from workers.telegram.telegram_client import collect_telegram_signals_sync
        
        print("üì° –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        result = collect_telegram_signals_sync()
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {result.get('total_signals', 0)}")
        
        if result.get('signals'):
            print(f"\nüìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for i, signal in enumerate(result['signals'], 1):
                print(f"   {i}. {signal.get('asset', 'N/A')} {signal.get('direction', 'N/A')}")
                print(f"      –í—Ö–æ–¥: ${signal.get('entry_price', 'N/A')}")
                print(f"      –¶–µ–ª—å: ${signal.get('tp1_price', 'N/A')}")
                print(f"      –°—Ç–æ–ø: ${signal.get('stop_loss', 'N/A')}")
                print(f"      –ö–∞–Ω–∞–ª: {signal.get('channel', 'N/A')}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 'N/A')}")
                print()
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return None

def test_signal_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from workers.telegram.signal_processor import TelegramSignalProcessor
        
        processor = TelegramSignalProcessor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        test_signals = [
            {
                'asset': 'BTC/USDT',
                'direction': 'LONG',
                'entry_price': 45000.00,
                'tp1_price': 46500.00,
                'stop_loss': 43500.00,
                'channel': '@cryptosignals',
                'message_timestamp': datetime.now(),
                'raw_message': 'Test signal'
            }
        ]
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(test_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        result = processor.process_signals(test_signals)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processed', 0)}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result.get('saved', 0)}")
        print(f"   –û—à–∏–±–æ–∫: {result.get('errors', 0)}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return None

def test_ml_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML —Å–µ—Ä–≤–∏—Å–æ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML —Å–µ—Ä–≤–∏—Å–æ–º...")
    
    try:
        import requests
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è ML
        test_signal = {
            "asset": "BTC",
            "entry_price": 45000,
            "target_price": 46500,
            "stop_loss": 43500,
            "direction": "LONG"
        }
        
        print("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ ML —Å–µ—Ä–≤–∏—Å...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ML —Å–µ—Ä–≤–∏—Å
        response = requests.post(
            "http://localhost:8001/api/v1/predictions/predict",
            json=test_signal,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            ml_result = response.json()
            print(f"‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {ml_result.get('prediction', 'N/A')}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_result.get('confidence', 'N/A')}")
            print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {ml_result.get('expected_return', 'N/A')}%")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {ml_result.get('risk_level', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ ML —Å–µ—Ä–≤–∏—Å–∞: {response.status_code}")
            
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_full_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        # 1. –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        collection_result = test_telegram_collection()
        
        if not collection_result or collection_result.get('status') != 'success':
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
            return False
        
        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        processing_result = test_signal_processing()
        
        if not processing_result:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        ml_ok = test_ml_integration()
        
        if not ml_ok:
            print("‚ùå –û—à–∏–±–∫–∞ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            return False
        
        print("\n‚úÖ –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –†–ê–ë–û–¢–ê–ï–¢!")
        print("   üì° –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤: ‚úÖ")
        print("   üîß –û–±—Ä–∞–±–æ—Ç–∫–∞: ‚úÖ")
        print("   ü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: ‚úÖ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False

def test_worker_tasks():
    """–¢–µ—Å—Ç –∑–∞–¥–∞—á worker'–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á worker'–∞...")
    
    try:
        from workers.tasks import collect_telegram_signals, update_channel_statistics, check_signal_results
        
        print("üìã –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á worker'–∞...")
        
        # –ó–∞–¥–∞—á–∞ 1: –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        print("   1. –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram...")
        signals_result = collect_telegram_signals()
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {signals_result.get('status', 'unknown')}")
        
        # –ó–∞–¥–∞—á–∞ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("   2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤...")
        stats_result = update_channel_statistics()
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {stats_result.get('status', 'unknown')}")
        
        # –ó–∞–¥–∞—á–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("   3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        check_result = check_signal_results()
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {check_result.get('status', 'unknown')}")
        
        print("\n‚úÖ –í–°–ï –ó–ê–î–ê–ß–ò WORKER'–ê –†–ê–ë–û–¢–ê–Æ–¢!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á worker'–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ë–û–†–ê –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("1Ô∏è‚É£ –¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram...")
        collection_ok = test_telegram_collection() is not None
        
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        processing_ok = test_signal_processing() is not None
        
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        ml_ok = test_ml_integration()
        
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        pipeline_ok = test_full_pipeline()
        
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–¥–∞—á worker'–∞...")
        worker_ok = test_worker_tasks()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤: {'‚úÖ' if collection_ok else '‚ùå'}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞: {'‚úÖ' if processing_ok else '‚ùå'}")
        print(f"   ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if ml_ok else '‚ùå'}")
        print(f"   –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: {'‚úÖ' if pipeline_ok else '‚ùå'}")
        print(f"   –ó–∞–¥–∞—á–∏ worker'–∞: {'‚úÖ' if worker_ok else '‚ùå'}")
        
        success_count = sum([collection_ok, processing_ok, ml_ok, pipeline_ok, worker_ok])
        total_count = 5
        
        print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
        
        if success_count == total_count:
            print("üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–† –°–ò–ì–ù–ê–õ–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
            
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 60)

if __name__ == "__main__":
    main()
