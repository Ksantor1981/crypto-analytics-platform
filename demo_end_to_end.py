#!/usr/bin/env python3
"""
üöÄ END-TO-END –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRYPTO ANALYTICS PLATFORM
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Telegram Signal ‚Üí Parser ‚Üí ML Analysis ‚Üí Result

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta
import json
from typing import Dict, Any, List
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('./workers'))

from workers.signal_patterns import parse_trading_signal, SignalType, Direction
from workers.exchange.price_checker import PriceChecker
from workers.exchange.bybit_client import BybitClient
from workers.real_data_config import REAL_TELEGRAM_CHANNELS, get_active_channels

class EndToEndDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.price_checker = PriceChecker()
        self.bybit_client = BybitClient()
        self.demo_results = {}
        
    def print_header(self, title: str, emoji: str = "üöÄ"):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "=" * 80)
        print(f"{emoji} {title}")
        print("=" * 80)
        
    def print_section(self, title: str, emoji: str = "üìã"):
        """–°–µ–∫—Ü–∏—è"""
        print(f"\n{emoji} {title}")
        print("-" * 50)
        
    def print_success(self, message: str):
        """–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print(f"‚úÖ {message}")
        
    def print_info(self, message: str):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print(f"üí° {message}")
        
    def print_error(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        print(f"‚ùå {message}")

    def simulate_telegram_signal(self) -> List[Dict[str, Any]]:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
        self.print_section("–≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram", "üì°")
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        telegram_signals = [
            {
                'channel': 'Crypto Signals Pro',
                'message': """
                üéØ BTCUSDT LONG SIGNAL
                Entry: 43,250
                TP1: 44,000
                TP2: 44,500  
                TP3: 45,200
                SL: 42,800
                Leverage: 10x
                üöÄ Strong breakout momentum!
                """,
                'timestamp': datetime.now() - timedelta(minutes=5),
                'channel_rating': 0.72
            },
            {
                'channel': 'Binance Trading Signals',
                'message': """
                üìà ETHUSDT - BUY SIGNAL
                Current Price: $2,850
                Target 1: $2,920
                Target 2: $3,000
                Stop Loss: $2,780
                Risk/Reward: 1:2.5
                """,
                'timestamp': datetime.now() - timedelta(minutes=3),
                'channel_rating': 0.68
            },
            {
                'channel': 'DeFi Trading Signals',
                'message': """
                üî¥ SHORT SIGNAL: ADAUSDT
                Entry @ 0.485
                TP: 0.465
                SL: 0.495
                Futures 5x
                ‚ö†Ô∏è High volatility expected
                """,
                'timestamp': datetime.now() - timedelta(minutes=1),
                'channel_rating': 0.61
            }
        ]
        
        print("üì± –ü–æ–ª—É—á–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤:")
        for signal in telegram_signals:
            print(f"  üì∫ {signal['channel']} (—Ä–µ–π—Ç–∏–Ω–≥: {signal['channel_rating']:.1%})")
            print(f"     ‚è∞ {signal['timestamp'].strftime('%H:%M:%S')}")
            
        self.demo_results['telegram_signals'] = telegram_signals
        self.print_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(telegram_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram")
        return telegram_signals

    def parse_signals(self, telegram_signals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.print_section("–≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤", "üîç")
        
        parsed_signals = []
        
        for signal_data in telegram_signals:
            channel = signal_data['channel']
            message = signal_data['message']
            
            print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {channel}:")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            parsed = parse_trading_signal(message, {
                'channel': channel,
                'timestamp': signal_data['timestamp'],
                'channel_rating': signal_data['channel_rating']
            })
            
            if parsed:
                print(f"  ‚úÖ –ê–∫—Ç–∏–≤: {parsed.asset}")
                print(f"  üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parsed.direction.value}")
                print(f"  üí∞ –í—Ö–æ–¥: {parsed.entry_price}")
                print(f"  üéØ –¶–µ–ª–∏: {[float(t) for t in parsed.targets]}")
                if parsed.stop_loss:
                    print(f"  üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {parsed.stop_loss}")
                if parsed.leverage:
                    print(f"  ‚ö° –ü–ª–µ—á–æ: {parsed.leverage}x")
                print(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.confidence:.1%}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                signal_dict = {
                    'channel': channel,
                    'asset': parsed.asset,
                    'direction': parsed.direction.value,
                    'entry_price': float(parsed.entry_price),
                    'targets': [float(t) for t in parsed.targets],
                    'stop_loss': float(parsed.stop_loss) if parsed.stop_loss else None,
                    'leverage': parsed.leverage,
                    'confidence': parsed.confidence,
                    'signal_type': parsed.signal_type.value,
                    'timestamp': signal_data['timestamp'],
                    'channel_rating': signal_data['channel_rating'],
                    'metadata': parsed.metadata
                }
                parsed_signals.append(signal_dict)
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
        
        self.demo_results['parsed_signals'] = parsed_signals
        self.print_success(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_signals)} –∏–∑ {len(telegram_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        return parsed_signals

    async def get_market_data(self, parsed_signals: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        self.print_section("–≠–¢–ê–ü 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "üìä")
        
        market_data = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
        assets = list(set(signal['asset'] for signal in parsed_signals))
        
        print("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å –±–∏—Ä–∂:")
        
        for asset in assets:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à price_checker
                price_data = await self.price_checker.get_price(asset)
                
                if price_data:
                    market_data[asset] = {
                        'current_price': price_data['price'],
                        'source': price_data.get('source', 'unknown'),
                        'timestamp': price_data.get('timestamp', datetime.now()),
                        'volume_24h': price_data.get('volume', 0),
                        'change_24h': price_data.get('change_24h', 0)
                    }
                    print(f"  ‚úÖ {asset}: ${price_data['price']:,.2f} ({price_data.get('source', 'unknown')})")
                else:
                    # –§–æ–ª–ª–±–µ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    fallback_prices = {
                        'BTCUSDT': 43500.00,
                        'ETHUSDT': 2875.50,
                        'ADAUSDT': 0.488
                    }
                    
                    market_data[asset] = {
                        'current_price': fallback_prices.get(asset, 1000.0),
                        'source': 'fallback',
                        'timestamp': datetime.now(),
                        'volume_24h': 1000000,
                        'change_24h': 2.5
                    }
                    print(f"  ‚ö†Ô∏è {asset}: ${market_data[asset]['current_price']:,.2f} (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset}: {e}")
                
        self.demo_results['market_data'] = market_data
        self.print_success(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} –∞–∫—Ç–∏–≤–æ–≤")
        return market_data

    def analyze_signals_with_ml(self, parsed_signals: List[Dict[str, Any]], market_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é ML"""
        self.print_section("–≠–¢–ê–ü 4: ML –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", "ü§ñ")
        
        analyzed_signals = []
        
        for signal in parsed_signals:
            asset = signal['asset']
            current_price = market_data.get(asset, {}).get('current_price', signal['entry_price'])
            
            print(f"\nü§ñ ML –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ {asset}:")
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            entry_price = signal['entry_price']
            targets = signal['targets']
            stop_loss = signal['stop_loss']
            
            # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (–¥–æ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏)
            if targets:
                if signal['direction'] == 'LONG':
                    potential_profit = (targets[0] - entry_price) / entry_price * 100
                else:
                    potential_profit = (entry_price - targets[0]) / entry_price * 100
            else:
                potential_profit = 0
                
            # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫
            if stop_loss:
                if signal['direction'] == 'LONG':
                    potential_loss = (entry_price - stop_loss) / entry_price * 100
                else:
                    potential_loss = (stop_loss - entry_price) / entry_price * 100
            else:
                potential_loss = 5.0  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∏—Å–∫
                
            # Risk/Reward —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            risk_reward = potential_profit / potential_loss if potential_loss > 0 else 0
            
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            price_deviation = abs(current_price - entry_price) / entry_price * 100
            
            # ML –æ—Ü–µ–Ω–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
            ml_score = self.calculate_ml_score(signal, market_data.get(asset, {}))
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            recommendation = self.generate_recommendation(ml_score, risk_reward, price_deviation, signal)
            
            analysis = {
                **signal,
                'current_price': current_price,
                'potential_profit': potential_profit,
                'potential_loss': potential_loss,
                'risk_reward_ratio': risk_reward,
                'price_deviation': price_deviation,
                'ml_score': ml_score,
                'recommendation': recommendation['action'],
                'recommendation_reason': recommendation['reason'],
                'position_size': recommendation['position_size'],
                'analysis_timestamp': datetime.now()
            }
            
            print(f"  üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: +{potential_profit:.2f}%")
            print(f"  ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: -{potential_loss:.2f}%")
            print(f"  üìä Risk/Reward: 1:{risk_reward:.2f}")
            print(f"  üéØ ML –æ—Ü–µ–Ω–∫–∞: {ml_score:.1%}")
            print(f"  üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation['action']}")
            print(f"  üí° –ü—Ä–∏—á–∏–Ω–∞: {recommendation['reason']}")
            
            analyzed_signals.append(analysis)
            
        self.demo_results['analyzed_signals'] = analyzed_signals
        self.print_success(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(analyzed_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é ML")
        return analyzed_signals

    def calculate_ml_score(self, signal: Dict[str, Any], market_data: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç ML –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        score = 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –§–∞–∫—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
        score += signal['confidence'] * 0.2
        
        # –§–∞–∫—Ç–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
        score += signal['channel_rating'] * 0.3
        
        # –§–∞–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ (—Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ª—É—á—à–µ)
        time_diff = (datetime.now() - signal['timestamp']).total_seconds() / 60
        time_factor = max(0, 1 - time_diff / 60) * 0.1  # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        score += time_factor
        
        # –§–∞–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        volume = market_data.get('volume_24h', 0)
        if volume > 500000:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            score += 0.1
            
        change_24h = market_data.get('change_24h', 0)
        if signal['direction'] == 'LONG' and change_24h > 0:
            score += 0.05
        elif signal['direction'] == 'SHORT' and change_24h < 0:
            score += 0.05
            
        return min(1.0, max(0.0, score))

    def generate_recommendation(self, ml_score: float, risk_reward: float, price_deviation: float, signal: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        if ml_score >= 0.8 and risk_reward >= 2.0:
            position_size = "–ë–æ–ª—å—à–∞—è (3-5%)"
            action = "–°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê"
            reason = "–í—ã—Å–æ–∫–∞—è ML –æ—Ü–µ–Ω–∫–∞ + –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
        elif ml_score >= 0.7 and risk_reward >= 1.5:
            position_size = "–°—Ä–µ–¥–Ω—è—è (1-3%)"
            action = "–ü–û–ö–£–ü–ö–ê"
            reason = "–•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ML –∏ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
        elif ml_score >= 0.6 and risk_reward >= 1.0:
            position_size = "–ú–∞–ª–∞—è (0.5-1%)"
            action = "–û–°–¢–û–†–û–ñ–ù–ê–Ø –ü–û–ö–£–ü–ö–ê"
            reason = "–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
        elif price_deviation > 2.0:
            position_size = "–ù–µ—Ç"
            action = "–û–ñ–ò–î–ê–ù–ò–ï"
            reason = f"–¶–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞—Å—å –æ—Ç –≤—Ö–æ–¥–∞ –Ω–∞ {price_deviation:.1f}%"
        else:
            position_size = "–ù–µ—Ç"
            action = "–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"
            reason = "–ù–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ML –∏–ª–∏ –ø–ª–æ—Ö–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
            
        return {
            'action': action,
            'reason': reason,
            'position_size': position_size
        }

    def generate_final_report(self, analyzed_signals: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_section("–≠–¢–ê–ü 5: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìã")
        
        total_signals = len(analyzed_signals)
        strong_buy = len([s for s in analyzed_signals if s['recommendation'] == '–°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê'])
        buy = len([s for s in analyzed_signals if s['recommendation'] == '–ü–û–ö–£–ü–ö–ê'])
        cautious = len([s for s in analyzed_signals if s['recommendation'] == '–û–°–¢–û–†–û–ñ–ù–ê–Ø –ü–û–ö–£–ü–ö–ê'])
        hold = len([s for s in analyzed_signals if s['recommendation'] == '–û–ñ–ò–î–ê–ù–ò–ï'])
        avoid = len([s for s in analyzed_signals if s['recommendation'] == '–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø'])
        
        avg_ml_score = sum(s['ml_score'] for s in analyzed_signals) / total_signals if total_signals > 0 else 0
        avg_risk_reward = sum(s['risk_reward_ratio'] for s in analyzed_signals) / total_signals if total_signals > 0 else 0
        
        report = {
            'timestamp': datetime.now(),
            'total_signals_processed': total_signals,
            'recommendations': {
                'strong_buy': strong_buy,
                'buy': buy,
                'cautious_buy': cautious,
                'hold': hold,
                'avoid': avoid
            },
            'average_ml_score': avg_ml_score,
            'average_risk_reward': avg_risk_reward,
            'best_signal': max(analyzed_signals, key=lambda x: x['ml_score']) if analyzed_signals else None,
            'processing_time': datetime.now()
        }
        
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
        print(f"  üöÄ –°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {strong_buy}")
        print(f"  ‚úÖ –ü–æ–∫—É–ø–∫–∞: {buy}")
        print(f"  ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {cautious}")
        print(f"  ‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ: {hold}")
        print(f"  ‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {avoid}")
        print(f"  üéØ –°—Ä–µ–¥–Ω—è—è ML –æ—Ü–µ–Ω–∫–∞: {avg_ml_score:.1%}")
        print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ Risk/Reward: 1:{avg_risk_reward:.2f}")
        
        if report['best_signal']:
            best = report['best_signal']
            print(f"\nüèÜ –õ–£–ß–®–ò–ô –°–ò–ì–ù–ê–õ:")
            print(f"  üí∞ {best['asset']} {best['direction']}")
            print(f"  üì∫ –ö–∞–Ω–∞–ª: {best['channel']}")
            print(f"  üéØ ML –æ—Ü–µ–Ω–∫–∞: {best['ml_score']:.1%}")
            print(f"  üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {best['recommendation']}")
            
        self.demo_results['final_report'] = report
        return report

    async def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.print_header("CRYPTO ANALYTICS PLATFORM - END-TO-END –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
        
        print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("üìã –≠—Ç–∞–ø—ã: Telegram ‚Üí Parser ‚Üí Market Data ‚Üí ML Analysis ‚Üí Recommendations")
        print("‚è±Ô∏è –í—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: ~2-3 –º–∏–Ω—É—Ç—ã")
        
        start_time = datetime.now()
        
        try:
            # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            telegram_signals = self.simulate_telegram_signal()
            
            # –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–Ω–≥
            parsed_signals = self.parse_signals(telegram_signals)
            
            if not parsed_signals:
                self.print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞!")
                return
                
            # –≠—Ç–∞–ø 3: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.get_market_data(parsed_signals)
            
            # –≠—Ç–∞–ø 4: ML –∞–Ω–∞–ª–∏–∑
            analyzed_signals = self.analyze_signals_with_ml(parsed_signals, market_data)
            
            # –≠—Ç–∞–ø 5: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            final_report = self.generate_final_report(analyzed_signals)
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = (datetime.now() - start_time).total_seconds()
            
            self.print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "üéâ")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(analyzed_signals)}")
            print(f"üéØ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å ML: {final_report['average_ml_score']:.1%}")
            print("\n‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
            print("üöÄ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            return True
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = EndToEndDemo()
    success = await demo.run_full_demo()
    
    if success:
        print("\nüéä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo.demo_results")
    else:
        print("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        
    return success

if __name__ == "__main__":
    asyncio.run(main()) 