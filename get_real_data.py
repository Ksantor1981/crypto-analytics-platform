#!/usr/bin/env python3
"""
–°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
import os
import sqlite3
import json
import re
from datetime import datetime, timezone
from pathlib import Path

def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = Path('.env')
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API...")
    
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    print(f"API_ID: {api_id}")
    print(f"API_HASH: {api_hash[:10] if api_hash else 'None'}...")
    
    if not all([api_id, api_hash]):
        print("‚ùå Telegram API –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        import telethon
        print(f"‚úÖ Telethon —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {telethon.__version__}")
        return True
    except ImportError:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def collect_from_telegram():
    """–°–æ–±–∏—Ä–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram"""
    print("üì° –°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram...")
    
    try:
        from telethon import TelegramClient
        from telethon.errors import SessionPasswordNeededError
    except ImportError:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return 0
    
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    if not phone:
        print("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        phone = input("–ù–æ–º–µ—Ä (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7): ").strip()
    
    if not all([api_id, api_hash, phone]):
        print("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ Telegram API –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return 0
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    print(f"   API_ID: {api_id}")
    print(f"   API_HASH: {api_hash[:10]}...")
    print(f"   PHONE: {phone}")
    
    client = TelegramClient('crypto_signals_session', api_id, api_hash)
    
    try:
        client.connect()
        
        if not client.is_user_authorized():
            print("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
            
            try:
                client.sign_in(phone, code)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ").strip()
                client.sign_in(password=password)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
        else:
            print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        
        # –°–ø–∏—Å–æ–∫ –†–ï–ê–õ–¨–ù–´–• –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞
        channels = [
            'CryptoPapa', 'FatPigSignals', 'WallstreetQueenOfficial',
            'RocketWalletSignals', 'BinanceKiller', 'WolfOfTrading',
            'CryptoSignalsOrg', 'Learn2Trade', 'UniversalCryptoSignals',
            'OnwardBTC', 'CryptoClassics', 'MyCryptoParadise'
        ]
        
        total_signals = 0
        
        for channel_name in channels:
            try:
                print(f"üìä –°–±–æ—Ä –∏–∑ {channel_name}...")
                entity = client.get_entity(channel_name)
                messages = client.get_messages(entity, limit=100)
                
                channel_signals = 0
                for msg in messages:
                    if msg.text:
                        signal = extract_signal_from_text(msg.text, f"telegram/{channel_name}", str(msg.id))
                        if signal:
                            save_signal_to_db(signal, msg.date)
                            channel_signals += 1
                            total_signals += 1
                
                print(f"   üìà –°–æ–±—Ä–∞–Ω–æ {channel_signals} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {channel_name}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–∑ {channel_name}: {str(e)[:50]}")
        
        client.disconnect()
        print(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_signals} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤")
        return total_signals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        return 0

def extract_signal_from_text(text, source, message_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ô —Å–∏–≥–Ω–∞–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return None
    
    text_upper = text.upper()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤
    asset = None
    if 'BTC' in text_upper or 'BITCOIN' in text_upper:
        asset = 'BTC'
    elif 'ETH' in text_upper or 'ETHEREUM' in text_upper:
        asset = 'ETH'
    elif 'SOL' in text_upper or 'SOLANA' in text_upper:
        asset = 'SOL'
    elif 'ADA' in text_upper or 'CARDANO' in text_upper:
        asset = 'ADA'
    elif 'LINK' in text_upper or 'CHAINLINK' in text_upper:
        asset = 'LINK'
    elif 'MATIC' in text_upper or 'POLYGON' in text_upper:
        asset = 'MATIC'
    
    if not asset:
        return None
    
    # –ò—â–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ü–µ–Ω—ã
    price_patterns = [
        rf'{asset}.*?(\d{{4,6}})[^\d]*?(\d{{4,6}})',
        rf'(\d{{4,6}})[^\d]*?{asset}[^\d]*?(\d{{4,6}})',
        rf'{asset}.*?(\d{{3,5}})[^\d]*?(\d{{3,5}})',
        rf'(\d{{3,5}})[^\d]*?{asset}[^\d]*?(\d{{3,5}})',
    ]
    
    for pattern in price_patterns:
        matches = re.findall(pattern, text_upper)
        for match in matches:
            if len(match) == 2:
                try:
                    entry_price = float(match[0])
                    target_price = float(match[1])
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –†–ï–ê–õ–¨–ù–´–• —Ü–µ–Ω
                    if entry_price <= 0 or target_price <= 0:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω
                    if asset == 'BTC' and (entry_price < 10000 or entry_price > 200000):
                        continue
                    elif asset == 'ETH' and (entry_price < 1000 or entry_price > 10000):
                        continue
                    elif asset == 'SOL' and (entry_price < 10 or entry_price > 1000):
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    direction = 'LONG' if target_price > entry_price else 'SHORT'
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º stop loss
                    stop_loss = entry_price * 0.98 if direction == 'LONG' else entry_price * 1.02
                    
                    return {
                        'asset': asset,
                        'direction': direction,
                        'entry_price': entry_price,
                        'target_price': target_price,
                        'stop_loss': stop_loss,
                        'confidence': 75.0,
                        'is_valid': 1,
                        'source': source,
                        'message_id': message_id,
                        'original_text': text[:200]
                    }
                    
                except (ValueError, TypeError):
                    continue
    
    return None

def save_signal_to_db(signal_data, timestamp):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –†–ï–ê–õ–¨–ù–´–ô —Å–∏–≥–Ω–∞–ª –≤ –ë–î"""
    conn = sqlite3.connect('workers/signals.db')
    cur = conn.cursor()
    
    signal_id = f"real_{signal_data['asset']}_{signal_data['message_id']}"
    
    cur.execute("""
        INSERT OR REPLACE INTO signals (
            id, asset, direction, entry_price, target_price, stop_loss,
            leverage, timeframe, signal_quality, real_confidence,
            calculated_confidence, channel, message_id, original_text,
            cleaned_text, signal_type, timestamp, extraction_time,
            bybit_available, is_valid, validation_errors,
            risk_reward_ratio, potential_profit, potential_loss
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        signal_id, signal_data['asset'], signal_data['direction'],
        signal_data['entry_price'], signal_data['target_price'], signal_data['stop_loss'],
        1, '1H', 'verified', signal_data['confidence'], signal_data['confidence'],
        signal_data['source'], signal_data['message_id'], signal_data['original_text'],
        signal_data['original_text'], 'telegram_real', timestamp.isoformat(),
        datetime.now(timezone.utc).isoformat(), True, signal_data['is_valid'],
        json.dumps([], ensure_ascii=False), 0.0, 0.0, 0.0
    ))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –†–ï–ê–õ–¨–ù–´–ô —Å–∏–≥–Ω–∞–ª: {signal_data['asset']} @ ${signal_data['entry_price']} -> ${signal_data['target_price']} | {signal_data['source']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    load_env()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
    if test_telegram_connection():
        # –°–æ–±–∏—Ä–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ
        signals_count = collect_from_telegram()
        
        if signals_count > 0:
            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {signals_count} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤!")
            print("‚úÖ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ!")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ")
    else:
        print("\n‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

if __name__ == '__main__':
    main()
