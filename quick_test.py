#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import requests
import sqlite3
from datetime import datetime

def test_ml_service():
    """–¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ML —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå ML —Å–µ—Ä–≤–∏—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå ML —Å–µ—Ä–≤–∏—Å: {e}")
        return False

def test_backend():
    """–¢–µ—Å—Ç backend"""
    print("üîç –¢–µ—Å—Ç backend...")
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå Backend: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM signals")
        count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM channels")
        channels = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {count} —Å–∏–≥–Ω–∞–ª–æ–≤, {channels} –∫–∞–Ω–∞–ª–æ–≤")
        return True
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_ml_prediction():
    """–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
    try:
        test_data = {
            "asset": "BTC",
            "entry_price": 45000,
            "target_price": 46500,
            "stop_loss": 43500,
            "direction": "LONG"
        }
        
        response = requests.post(
            "http://localhost:8001/api/v1/predictions/predict",
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result.get('prediction', 'N/A')}")
            return True
        else:
            print(f"‚ùå ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {e}")
        return False

def main():
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 40)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 40)
    
    tests = [
        ("ML —Å–µ—Ä–≤–∏—Å", test_ml_service),
        ("Backend", test_backend),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", test_ml_prediction)
    ]
    
    results = []
    for name, test_func in tests:
        print(f"\n{name}:")
        result = test_func()
        results.append((name, result))
    
    print("\n" + "=" * 40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    success = 0
    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {name}: {status}")
        if result:
            success += 1
    
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {success}/{len(results)} ({success/len(results)*100:.1f}%)")
    
    if success == len(results):
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
    
    print("=" * 40)

if __name__ == "__main__":
    main()
