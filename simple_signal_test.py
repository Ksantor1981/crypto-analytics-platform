#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))

def test_signal_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    test_signals = [
        {
            "text": "üöÄ BTC/USDT LONG\nEntry: 117,500\nTarget 1: 120,000\nTarget 2: 122,500\nStop Loss: 115,000\nLeverage: 10x",
            "channel": "@cryptosignals"
        },
        {
            "text": "üìâ ETH/USDT SHORT\n–í—Ö–æ–¥: 3,200\n–¶–µ–ª—å: 3,000\n–°—Ç–æ–ø: 3,300\n–ü–ª–µ—á–æ: 5x",
            "channel": "@binancesignals"
        },
        {
            "text": "üî• SOL/USDT BUY\nEntry Price: $100\nTake Profit: $110\nStop Loss: $95\nConfidence: HIGH",
            "channel": "@cryptotradingview"
        }
    ]
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    def parse_signal(text, channel):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        patterns = {
            'asset': r'([A-Z]{2,6})/?(?:USDT|USD|BTC)',
            'direction': r'\b(LONG|SHORT|BUY|SELL)\b',
            'entry': r'(?:entry|–≤—Ö–æ–¥|—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞|enter at)[:\s]*([0-9,]+)',
            'target': r'(?:target|tp|—Ü–µ–ª—å|—Ç–ø|take profit)[:\s]*([0-9,]+)',
            'stop_loss': r'(?:sl|stop.?loss|—Å—Ç–æ–ø|—Å—Ç–æ–ø.?–ª–æ—Å—Å|stop at)[:\s]*([0-9,]+)',
            'leverage': r'(?:leverage|–ø–ª–µ—á–æ)[:\s]*([0-9]+)x?'
        }
        
        result = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç–∏–≤
        asset_match = re.search(patterns['asset'], text, re.IGNORECASE)
        if asset_match:
            result['asset'] = asset_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_match = re.search(patterns['direction'], text, re.IGNORECASE)
        if direction_match:
            result['direction'] = direction_match.group(1).upper()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
        entry_match = re.search(patterns['entry'], text, re.IGNORECASE)
        if entry_match:
            result['entry_price'] = float(entry_match.group(1).replace(',', ''))
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            entry_match = re.search(r'Entry Price: \$?([0-9,]+)', text, re.IGNORECASE)
            if entry_match:
                result['entry_price'] = float(entry_match.group(1).replace(',', ''))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å
        target_match = re.search(patterns['target'], text, re.IGNORECASE)
        if target_match:
            result['target_price'] = float(target_match.group(1).replace(',', ''))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        sl_match = re.search(patterns['stop_loss'], text, re.IGNORECASE)
        if sl_match:
            result['stop_loss'] = float(sl_match.group(1).replace(',', ''))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–µ—á–æ
        leverage_match = re.search(patterns['leverage'], text, re.IGNORECASE)
        if leverage_match:
            result['leverage'] = int(leverage_match.group(1))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        result['channel'] = channel
        result['confidence'] = 0.7  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        result['timestamp'] = datetime.now()
        
        return result if result.get('asset') and result.get('direction') else None
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    for i, signal in enumerate(test_signals, 1):
        print(f"\nüìä –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ #{i}:")
        print(f"   –ö–∞–Ω–∞–ª: {signal['channel']}")
        print(f"   –¢–µ–∫—Å—Ç: {signal['text'][:50]}...")
        
        # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
        parsed = parse_signal(signal['text'], signal['channel'])
        
        if parsed:
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:")
            print(f"   –ê–∫—Ç–∏–≤: {parsed.get('asset', 'N/A')}")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parsed.get('direction', 'N/A')}")
            print(f"   –í—Ö–æ–¥: ${parsed.get('entry_price', 'N/A')}")
            print(f"   –¶–µ–ª—å: ${parsed.get('target_price', 'N/A')}")
            print(f"   –°—Ç–æ–ø: ${parsed.get('stop_loss', 'N/A')}")
            print(f"   –ü–ª–µ—á–æ: {parsed.get('leverage', 'N/A')}x")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.get('confidence', 'N/A')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_to_database(parsed)
        else:
            print(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

def save_to_database(signal_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª
        cursor.execute("SELECT id FROM channels WHERE url = ?", (signal_data['channel'],))
        channel_result = cursor.fetchone()
        
        if channel_result:
            channel_id = channel_result[0]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            cursor.execute("""
                INSERT INTO channels (name, platform, url, category, is_active, created_at, owner_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                signal_data['channel'].replace('@', ''),
                'telegram',
                signal_data['channel'],
                'crypto',
                True,
                datetime.now(),
                1  # Default owner_id
            ))
            channel_id = cursor.lastrowid
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        cursor.execute("""
            INSERT INTO signals (
                channel_id, asset, direction, entry_price, tp1_price, stop_loss,
                original_text, message_timestamp, status, confidence_score, created_at, symbol
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            channel_id,
            signal_data['asset'],
            signal_data['direction'],
            signal_data['entry_price'],
            signal_data.get('target_price'),
            signal_data.get('stop_loss'),
            f"Parsed signal for {signal_data['asset']}",
            signal_data['timestamp'],
            'PENDING',
            signal_data['confidence'],
            datetime.now(),
            f"{signal_data['asset']}/USDT"  # Symbol
        ))
        
        signal_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        print(f"üíæ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (ID: {signal_id})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
        cursor.execute("SELECT COUNT(*) FROM channels")
        channels_count = cursor.fetchone()[0]
        print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –≤ –ë–î: {channels_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        cursor.execute("SELECT COUNT(*) FROM signals")
        signals_count = cursor.fetchone()[0]
        print(f"üìà –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î: {signals_count}")
        
        if signals_count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            cursor.execute("""
                SELECT s.asset, s.direction, s.entry_price, s.status, c.name
                FROM signals s
                JOIN channels c ON s.channel_id = c.id
                ORDER BY s.created_at DESC
                LIMIT 5
            """)
            
            signals = cursor.fetchall()
            print("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for signal in signals:
                print(f"   {signal[0]} {signal[1]} @ ${signal[2]} - {signal[3]} (–∫–∞–Ω–∞–ª: {signal[4]})")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –¥–æ —Ç–µ—Å—Ç–æ–≤
        check_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        test_signal_parsing()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        check_database()
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 50)

if __name__ == "__main__":
    main()
