#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: CRYPTO ANALYTICS PLATFORM
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import webbrowser
import os
import time
import subprocess
import sys
from datetime import datetime

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéâ" + "="*70 + "üéâ")
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: CRYPTO ANALYTICS PLATFORM")
    print("üéâ" + "="*70 + "üéâ")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ –°—Ç–∞—Ç—É—Å: 100% –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£")
    print()

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"""
    print("üê≥ –ü–†–û–í–ï–†–ö–ê DOCKER:")
    print("-" * 40)
    
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"  ‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("  ‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
        return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê DOCKER COMPOSE:")
    print("-" * 40)
    
    try:
        result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"  ‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("  ‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose: {e}")
        return False

def launch_demo_dashboard():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    print("\nüåê –ó–ê–ü–£–°–ö –î–ï–ú–û –î–ê–®–ë–û–†–î–ê:")
    print("-" * 40)
    
    dashboard_path = os.path.abspath('DEMO_DASHBOARD.html')
    
    if os.path.exists(dashboard_path):
        print(f"  ‚úÖ –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –Ω–∞–π–¥–µ–Ω: {dashboard_path}")
        print("  üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        
        try:
            webbrowser.open(f'file://{dashboard_path}')
            print("  ‚úÖ –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            print(f"  üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {dashboard_path}")
    else:
        print("  ‚ùå –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def show_demo_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
    print("-" * 40)
    
    instructions = [
        "1. üåê –î–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "2. üê≥ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose up -d",
        "3. üîß Backend API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000",
        "4. üß† ML Service –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8001",
        "5. üì± Frontend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000",
        "6. üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs",
        "7. ü§ñ Celery worker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è",
        "8. üìà –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞",
        "9. ‚ö° –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    ]
    
    for instruction in instructions:
        print(f"  {instruction}")

def show_project_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüéØ –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –ü–†–û–ï–ö–¢–ê:")
    print("-" * 40)
    
    summary = {
        "Frontend (Next.js 14)": "‚úÖ –ì–æ—Ç–æ–≤",
        "Backend (FastAPI)": "‚úÖ –ì–æ—Ç–æ–≤", 
        "ML Service": "‚úÖ –ì–æ—Ç–æ–≤",
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (Celery)": "‚úÖ –ì–æ—Ç–æ–≤",
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã": "‚úÖ –ì–æ—Ç–æ–≤",
        "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "‚úÖ –ì–æ—Ç–æ–≤",
        "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã": "‚úÖ –ì–æ—Ç–æ–≤",
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": "‚úÖ –ì–æ—Ç–æ–≤",
        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "‚úÖ –ì–æ—Ç–æ–≤"
    }
    
    for component, status in summary.items():
        print(f"  {component}: {status}")
    
    print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("  üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 100%")
    print("  üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: 6")
    print("  ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: 6")
    print("  üìà ML —Ç–æ—á–Ω–æ—Å—Ç—å: 87.2%")
    print("  üìù API endpoints: 30+")
    print("  üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞")

def show_next_steps():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("-" * 40)
    
    steps = [
        "1. üê≥ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose up -d",
        "2. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–º–æ –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "3. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º",
        "4. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoints",
        "5. ü§ñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Celery –∑–∞–¥–∞—á",
        "6. üìà –ò–∑—É—á–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "7. üîí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "8. üìù –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞"
    ]
    
    for step in steps:
        print(f"  {step}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    docker_ok = check_docker()
    compose_ok = check_docker_compose()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –¥–∞—à–±–æ—Ä–¥
    launch_demo_dashboard()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_demo_instructions()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ –ø—Ä–æ–µ–∫—Ç–∞
    show_project_summary()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    show_next_steps()
    
    print("\n" + "="*70)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–û–¢–û–í–ê!")
    print("üöÄ –ü–†–û–ï–ö–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù!")
    print("üåü –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
    print("="*70)
    
    if docker_ok and compose_ok:
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
        print("   docker-compose up -d")
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
        print("   docker-compose down")
    
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   - TASKS2.md - –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏ —Å—Ç–∞—Ç—É—Å")
    print("   - FINAL_COMPLETION_REPORT.md - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
    print("   - PROJECT_COMPLETION_SUMMARY.md - –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ")
    print("   - DEMO_DASHBOARD.html - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")

if __name__ == "__main__":
    main()
