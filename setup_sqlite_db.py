#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ PostgreSQL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
from pathlib import Path
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

from app.core.config import get_settings
from app.core.database import engine, Base
# –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
from app.models.user import User, UserRole
from app.models.channel import Channel
from app.models.signal import Signal
from app.models.subscription import Subscription
from app.models.payment import Payment
from app.models.api_key import APIKey
from app.models.performance_metric import PerformanceMetric

def setup_sqlite_database():
    """–°–æ–∑–¥–∞–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SQLite
    os.environ["USE_SQLITE"] = "true"
    
    settings = get_settings()
    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {settings.database_url}")
    
    try:
        # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            row = result.fetchone()
            if row and row[0] == 1:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    from sqlalchemy.orm import Session
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = Session(engine)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            email="test@example.com",
            hashed_password=__import__('app.core.security', fromlist=['get_password_hash']).get_password_hash("test123"),
            is_active=True,
            role=UserRole.FREE_USER
        )
        db.add(test_user)
        db.commit()
        db.refresh(test_user)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: test@example.com / test123")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        test_channel = Channel(
            name="Test Crypto Channel",
            url="https://t.me/testcrypto",
            platform="telegram",
            category="crypto",
            is_active=True
        )
        db.add(test_channel)
        db.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        from app.models.signal import SignalDirection, SignalStatus
        
        test_signal = Signal(
            channel_id=test_channel.id,
            asset="BTC/USDT",
            symbol="BTCUSDT",
            direction=SignalDirection.LONG,
            entry_price=50000.0,
            tp1_price=55000.0,
            stop_loss=48000.0,
            status=SignalStatus.PENDING
        )
        db.add(test_signal)
        db.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Crypto Analytics Platform")
    print("=" * 60)
    
    if setup_sqlite_database():
        if create_sample_data():
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print("   - Email: test@example.com")
            print("   - Password: test123")
            print("\nüîó –î–ª—è –∑–∞–ø—É—Å–∫–∞ backend –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("   cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload")
        else:
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(1) 