#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤–∏–Ω—Ä–µ–π—Ç–∞–º–∏
"""
import requests
import json
from datetime import datetime, timedelta
import random

def main():
    base_url = "http://localhost:8000/api/v1"
    
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –û—á–∏—â–∞–µ–º –¥–µ–º–æ —Å–∏–≥–Ω–∞–ª—ã
        response = requests.delete(f"{base_url}/telegram/cleanup-demo-signals", timeout=30)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    print("\nüìä –°–±–æ—Ä –Ω–æ–≤—ã—Ö –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = requests.post(f"{base_url}/telegram/collect-all-sources", timeout=30)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', '–°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω')}")
            print(f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {result.get('total_signals', 0)}")
            sources = result.get('sources', {})
            for source, count in sources.items():
                print(f"   üì± {source}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–±–æ—Ä–µ: {e}")
    
    print("\nüìÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç...")
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã
        response = requests.post(f"{base_url}/telegram/fix-signal-dates", timeout=30)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', '–î–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç: {e}")
    
    print("\nüéØ –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response = requests.post(f"{base_url}/telegram/simulate-signal-results", timeout=30)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã')}")
            channel_stats = result.get('channel_stats', {})
            if channel_stats:
                print("\nüìä –í–ò–ù–†–ï–ô–¢–´ –ü–û –ö–ê–ù–ê–õ–ê–ú:")
                for channel_id, stats in channel_stats.items():
                    print(f"   üèÜ {stats['name']}: {stats['winrate']}% ({stats['successful']}/{stats['total_signals']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
    
    print("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = requests.get(f"{base_url}/signals/dashboard?limit=10", timeout=30)
        if response.status_code == 200:
            signals = response.json()
            print(f"‚úÖ –í –¥–∞—à–±–æ—Ä–¥–µ {len(signals)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–∞–Ω–Ω—ã—Ö
            assets = set()
            sources = set()
            statuses = set()
            
            for signal in signals:
                assets.add(signal.get('asset', 'Unknown'))
                sources.add(str(signal.get('channel_id', 'Unknown')))
                statuses.add(signal.get('status', 'Unknown'))
            
            print(f"   üí∞ –ê–∫—Ç–∏–≤—ã: {', '.join(sorted(assets))}")
            print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sorted(sources))}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å—ã: {', '.join(sorted(statuses))}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    
    print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ê–®–ë–û–†–î –ì–û–¢–û–í!")
    print(f"üìÇ –û—Ç–∫—Ä–æ–π—Ç–µ: simple_real_dashboard.html")
    print(f"üåê –í—Å–µ –¥–∞–Ω–Ω—ã–µ –†–ï–ê–õ–¨–ù–´–ï –∏–∑ –∂–∏–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print(f"‚ö° –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"üìà –í–∏–Ω—Ä–µ–π—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

if __name__ == "__main__":
    main()
