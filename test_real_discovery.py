#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
"""

import requests
import json
import time

def test_real_discovery():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    print("üîç –¢–ï–°–¢ –ù–ê–°–¢–û–Ø–©–ï–ì–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –ö–ê–ù–ê–õ–û–í")
    print("="*60)
    
    url = "http://localhost:8002/api/v1/channels/discover"
    
    try:
        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url}")
        print("‚è≥ –û–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        
        start_time = time.time()
        
        response = requests.post(
            url,
            headers={"Content-Type": "application/json"},
            json={},
            timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        )
        
        end_time = time.time()
        search_duration = round(end_time - start_time, 2)
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_duration} —Å–µ–∫—É–Ω–¥")
        
        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ –£–°–ü–ï–•!")
            print(f"   –û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            data = result.get('data', {})
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê:")
            print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {data.get('total_channels_discovered', 0)}")
            print(f"   –ö–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –Ω–∞–π–¥–µ–Ω–æ: {data.get('channels_with_signals', 0)}")
            print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {data.get('total_signals_found', 0)}")
            print(f"   –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: {data.get('search_method', 'unknown')}")
            print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(data.get('keywords_used', []))}")
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–∏—Å–∫–∞: {data.get('patterns_used', 0)}")
            
            if data.get('added_channels'):
                print(f"\nüì∫ –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:")
                for channel in data['added_channels']:
                    print(f"   - {channel['name']} (@{channel['username']}) - {channel['signals_count']} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å
            if data.get('search_method') == 'automatic_telegram_api':
                print(f"\nü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–°–¢–¨:")
                print(f"   ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API")
                print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(data.get('keywords_used', [])[:5])}...")
                print(f"   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
                print(f"   ‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {search_duration} —Å–µ–∫")
            else:
                print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º")
            
            return True
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {response.status_code}")
            try:
                error = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error}")
            except:
                print(f"   –¢–µ–∫—Å—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

if __name__ == "__main__":
    success = test_real_discovery()
    exit(0 if success else 1) 