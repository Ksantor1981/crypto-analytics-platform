#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Crypto Analytics
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, Any

class PlatformHealthChecker:
    def __init__(self):
        self.services = {
            'backend': {
                'url': 'http://localhost:8000',
                'health_endpoint': '/health',
                'name': 'Backend API'
            },
            'ml_service': {
                'url': 'http://localhost:8001',
                'health_endpoint': '/api/v1/health/',
                'name': 'ML Service'
            },
            'frontend': {
                'url': 'http://localhost:3000',
                'health_endpoint': '/',
                'name': 'Frontend'
            }
        }
        self.results = {}
        
    async def check_service_health(self, service_key: str, service_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                url = f"{service_config['url']}{service_config['health_endpoint']}"
                response = await client.get(url)
                
                if response.status_code == 200:
                    return {
                        'status': 'healthy',
                        'response_time': response.elapsed.total_seconds(),
                        'status_code': response.status_code,
                        'data': response.json() if response.headers.get('content-type', '').startswith('application/json') else None
                    }
                else:
                    return {
                        'status': 'unhealthy',
                        'response_time': response.elapsed.total_seconds(),
                        'status_code': response.status_code,
                        'error': f"HTTP {response.status_code}"
                    }
        except Exception as e:
            return {
                'status': 'error',
                'response_time': None,
                'status_code': None,
                'error': str(e)
            }
    
    async def check_database_connection(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                response = await client.get(f"{self.services['backend']['url']}/api/v1/channels/")
                
                if response.status_code in [200, 401, 403]:
                    return {
                        'status': 'connected',
                        'response_time': response.elapsed.total_seconds(),
                        'status_code': response.status_code
                    }
                else:
                    return {
                        'status': 'error',
                        'response_time': response.elapsed.total_seconds(),
                        'status_code': response.status_code,
                        'error': f"Database connection failed: HTTP {response.status_code}"
                    }
        except Exception as e:
            return {
                'status': 'error',
                'response_time': None,
                'status_code': None,
                'error': str(e)
            }
    
    async def check_ml_prediction(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                test_signal = {
                    "asset": "BTCUSDT",
                    "direction": "LONG",
                    "entry_price": 45000.0,
                    "target_price": 47000.0,
                    "stop_loss": 43000.0,
                    "channel_id": 1,
                    "channel_accuracy": 0.75,
                    "confidence": 0.8
                }
                
                response = await client.post(
                    f"{self.services['ml_service']['url']}/api/v1/predictions/predict",
                    json=test_signal
                )
                
                if response.status_code == 200:
                    return {
                        'status': 'working',
                        'response_time': response.elapsed.total_seconds(),
                        'prediction': response.json()
                    }
                else:
                    return {
                        'status': 'error',
                        'response_time': response.elapsed.total_seconds(),
                        'error': f"ML prediction failed: HTTP {response.status_code}"
                    }
        except Exception as e:
            return {
                'status': 'error',
                'response_time': None,
                'error': str(e)
            }
    
    def print_service_status(self, service_name: str, result: Dict):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        if result['status'] == 'healthy':
            print(f"‚úÖ {service_name}: –ó–î–û–†–û–í")
            if result.get('response_time'):
                print(f"   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {result['response_time']:.3f}s")
            if result.get('data'):
                print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(result['data'], ensure_ascii=False, indent=2)}")
        elif result['status'] == 'working':
            print(f"‚úÖ {service_name}: –†–ê–ë–û–¢–ê–ï–¢")
            if result.get('response_time'):
                print(f"   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {result['response_time']:.3f}s")
            if result.get('prediction'):
                pred = result['prediction']
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {pred.get('recommendation', 'N/A')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred.get('confidence', 'N/A')}")
        elif result['status'] == 'connected':
            print(f"‚úÖ {service_name}: –ü–û–î–ö–õ–Æ–ß–ï–ù")
            if result.get('response_time'):
                print(f"   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {result['response_time']:.3f}s")
        elif result['status'] == 'unhealthy':
            print(f"‚ö†Ô∏è {service_name}: –ù–ï–ó–î–û–†–û–í")
            print(f"   –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå {service_name}: –û–®–ò–ë–ö–ê")
            print(f"   –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
    
    async def run_health_check(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        print("üè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ü–õ–ê–¢–§–û–†–ú–´")
        print("=" * 50)
        print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_key, service_config in self.services.items():
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {service_config['name']}...")
            result = await self.check_service_health(service_key, service_config)
            self.print_service_status(service_config['name'], result)
            self.results[service_key] = result
            print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_result = await self.check_database_connection()
        self.print_service_status("Database", db_result)
        self.results['database'] = db_result
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        ml_result = await self.check_ml_prediction()
        self.print_service_status("ML Predictions", ml_result)
        self.results['ml_predictions'] = ml_result
        print()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("=" * 50)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 50)
        
        total_services = len(self.results)
        healthy_services = sum(1 for result in self.results.values() 
                             if result['status'] in ['healthy', 'working', 'connected'])
        
        print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {healthy_services}/{total_services} —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        if healthy_services == total_services:
            print("üéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        elif healthy_services >= total_services * 0.8:
            print("‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –°–ï–†–í–ò–°–û–í –†–ê–ë–û–¢–ê–ï–¢")
            print("   –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        elif healthy_services >= total_services * 0.5:
            print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –°–ï–†–í–ò–°–ê–ú–ò")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ")
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
        
        print()
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if healthy_services == total_services:
            print("   - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            print("   - –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        else:
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

async def main():
    checker = PlatformHealthChecker()
    await checker.run_health_check()

if __name__ == "__main__":
    asyncio.run(main()) 