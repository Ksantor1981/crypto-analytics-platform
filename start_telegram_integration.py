#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –∏–∑ analyst_crypto –≤ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
"""

import os
import sys
import asyncio
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'telethon',
        'aiohttp', 
        'asyncio',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è python-dotenv
            if package == 'python-dotenv':
                __import__('dotenv')
            else:
                __import__(package.replace('-', '_'))
            logger.info(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append(package)
            logger.error(f"‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if missing_packages:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install " + ' '.join(missing_packages))
        return False
    
    logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    packages = [
        'telethon>=1.36.0',
        'aiohttp>=3.9.0',
        'python-dotenv>=1.0.0'
    ]
    
    try:
        for package in packages:
            logger.info(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            result = subprocess.run([
                sys.executable, '-m', 'pip', 'install', package
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {result.stderr}")
                return False
        
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def check_backend_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ backend"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ backend...")
    
    try:
        import requests
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

async def run_telegram_integration(mode="test"):
    """–ó–∞–ø—É—Å–∫ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ: {mode}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ workers
    workers_path = Path(__file__).parent / "workers"
    sys.path.insert(0, str(workers_path))
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        from workers.telegram.full_telegram_integration import FullTelegramIntegration
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration = FullTelegramIntegration()
        
        if mode == "test":
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            results = await integration.test_full_integration()
            
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for test_name, test_result in results["tests"].items():
                status = "‚úÖ" if test_result.get("success") else "‚ùå"
                logger.info(f"   {status} {test_name}: {test_result.get('message', test_result)}")
            
            overall_status = "‚úÖ –£–°–ü–ï–•" if results["overall_success"] else "‚ùå –û–®–ò–ë–ö–ò"
            logger.info(f"üèÅ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {overall_status}")
            
            return results["overall_success"]
            
        elif mode == "batch":
            # –ü–∞–∫–µ—Ç–Ω—ã–π —Å–±–æ—Ä
            logger.info("üì¶ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞...")
            if await integration.initialize():
                results = await integration.collect_and_send_batch(limit=50)
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
                await integration.cleanup()
                return True
            return False
            
        elif mode == "realtime":
            # –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
            if await integration.initialize():
                await integration.start_real_time_integration()
                return True
            return False
            
        elif mode == "periodic":
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
            logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
            if await integration.initialize():
                await integration.run_periodic_collection(interval_minutes=15)
                return True
            return False
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    print("\n" + "="*50)
    print("ü§ñ TELEGRAM INTEGRATION LAUNCHER")
    print("="*50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("2. üì¶ –ü–∞–∫–µ—Ç–Ω—ã–π —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("3. üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("4. ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä")
    print("5. üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print("6. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print("="*50)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Integration Launcher")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        logger.info("üí° –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (y/n)")
        choice = input().lower()
        if choice == 'y':
            if not install_dependencies():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                return
        else:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
    backend_available = check_backend_status()
    if not backend_available:
        logger.warning("‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π: python start_backend.py")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        try:
            show_menu()
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == "0":
                logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                await run_telegram_integration("test")
            elif choice == "2":
                await run_telegram_integration("batch")
            elif choice == "3":
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
                await run_telegram_integration("realtime")
            elif choice == "4":
                logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
                await run_telegram_integration("periodic")
            elif choice == "5":
                install_dependencies()
            elif choice == "6":
                check_dependencies()
                check_backend_status()
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 