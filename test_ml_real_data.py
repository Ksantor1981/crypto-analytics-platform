#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ML-—Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ML_SERVICE_URL = "http://localhost:8001"

def test_real_market_scenarios():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏...")
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
    real_scenarios = [
        {
            "name": "Bitcoin Bull Run (2024)",
            "data": {
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 45000,
                "target_price": 65000,
                "stop_loss": 42000,
                "channel_accuracy": 0.85,
                "confidence": 0.8
            }
        },
        {
            "name": "Ethereum Merge Signal",
            "data": {
                "asset": "ETH",
                "direction": "LONG",
                "entry_price": 1800,
                "target_price": 2200,
                "stop_loss": 1700,
                "channel_accuracy": 0.75,
                "confidence": 0.7
            }
        },
        {
            "name": "Altcoin Season Signal",
            "data": {
                "asset": "SOL",
                "direction": "LONG",
                "entry_price": 80,
                "target_price": 120,
                "stop_loss": 75,
                "channel_accuracy": 0.6,
                "confidence": 0.65
            }
        },
        {
            "name": "Bear Market Signal",
            "data": {
                "asset": "BTC",
                "direction": "SHORT",
                "entry_price": 35000,
                "target_price": 30000,
                "stop_loss": 37000,
                "channel_accuracy": 0.7,
                "confidence": 0.6
            }
        },
        {
            "name": "High Frequency Trading",
            "data": {
                "asset": "ETH",
                "direction": "LONG",
                "entry_price": 2000,
                "target_price": 2050,
                "stop_loss": 1990,
                "channel_accuracy": 0.55,
                "confidence": 0.5
            }
        }
    ]
    
    results = []
    
    for scenario in real_scenarios:
        print(f"\n   üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=scenario['data'],
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                recommendation = data.get('recommendation', 'N/A')
                confidence = data.get('confidence', 0)
                success_prob = data.get('success_probability', 0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                if recommendation == 'BUY' and confidence > 0.7:
                    signal_quality = "üî• –°–ò–õ–¨–ù–´–ô"
                elif recommendation == 'BUY' and confidence > 0.6:
                    signal_quality = "‚úÖ –•–û–†–û–®–ò–ô"
                elif recommendation == 'HOLD':
                    signal_quality = "‚ö†Ô∏è –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô"
                else:
                    signal_quality = "‚ùå –°–õ–ê–ë–´–ô"
                
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"      –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {signal_quality}")
                print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
                print(f"      –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {success_prob}")
                
                results.append({
                    'scenario': scenario['name'],
                    'status': 'success',
                    'quality': signal_quality,
                    'recommendation': recommendation,
                    'confidence': confidence
                })
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                results.append({
                    'scenario': scenario['name'],
                    'status': 'error',
                    'code': response.status_code
                })
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append({
                'scenario': scenario['name'],
                'status': 'exception',
                'error': str(e)
            })
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    successful = sum(1 for r in results if r['status'] == 'success')
    strong_signals = sum(1 for r in results if r.get('quality') == 'üî• –°–ò–õ–¨–ù–´–ô')
    good_signals = sum(1 for r in results if r.get('quality') == '‚úÖ –•–û–†–û–®–ò–ô')
    
    print(f"\n   üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"      –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/{len(real_scenarios)}")
    print(f"      –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {strong_signals}")
    print(f"      –•–æ—Ä–æ—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {good_signals}")
    print(f"      –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {(strong_signals + good_signals)/successful*100:.1f}%" if successful > 0 else "N/A")
    
    return successful == len(real_scenarios)

def test_risk_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏...")
    
    risk_scenarios = [
        {
            "name": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –Ω–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
            "data": {
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 50000,
                "target_price": 50100,  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–∏–±—ã–ª—å
                "stop_loss": 49000,     # –ë–æ–ª—å—à–æ–π —Ä–∏—Å–∫
                "channel_accuracy": 0.5,
                "confidence": 0.5
            }
        },
        {
            "name": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
            "data": {
                "asset": "ETH",
                "direction": "LONG",
                "entry_price": 3000,
                "target_price": 3600,   # 20% –ø—Ä–∏–±—ã–ª—å
                "stop_loss": 2950,      # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∏—Å–∫
                "channel_accuracy": 0.8,
                "confidence": 0.8
            }
        },
        {
            "name": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫",
            "data": {
                "asset": "BNB",
                "direction": "LONG",
                "entry_price": 400,
                "target_price": 480,    # 20% –ø—Ä–∏–±—ã–ª—å
                "stop_loss": 360,       # 10% —Ä–∏—Å–∫
                "channel_accuracy": 0.7,
                "confidence": 0.7
            }
        }
    ]
    
    results = []
    
    for scenario in risk_scenarios:
        print(f"\n   üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        
        try:
            response = requests.post(
                f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                json=scenario['data'],
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                recommendation = data.get('recommendation', 'N/A')
                confidence = data.get('confidence', 0)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
                entry = scenario['data']['entry_price']
                target = scenario['data'].get('target_price', entry)
                stop_loss = scenario['data'].get('stop_loss', entry)
                
                if target and stop_loss:
                    potential_profit = abs(target - entry) / entry * 100
                    potential_loss = abs(stop_loss - entry) / entry * 100
                    risk_reward_ratio = potential_profit / potential_loss if potential_loss > 0 else 0
                    
                    print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞:")
                    print(f"      –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit:.1f}%")
                    print(f"      –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {potential_loss:.1f}%")
                    print(f"      –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {risk_reward_ratio:.2f}")
                    print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
                    
                    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
                    if risk_reward_ratio > 2 and recommendation == 'BUY':
                        quality = "üî• –û–¢–õ–ò–ß–ù–´–ô"
                    elif risk_reward_ratio > 1.5 and recommendation == 'BUY':
                        quality = "‚úÖ –•–û–†–û–®–ò–ô"
                    elif recommendation == 'HOLD':
                        quality = "‚ö†Ô∏è –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô"
                    else:
                        quality = "‚ùå –ü–õ–û–•–û–ô"
                    
                    print(f"      –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
                    
                    results.append({
                        'scenario': scenario['name'],
                        'risk_reward_ratio': risk_reward_ratio,
                        'recommendation': recommendation,
                        'quality': quality
                    })
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
    good_signals = sum(1 for r in results if 'üî• –û–¢–õ–ò–ß–ù–´–ô' in r.get('quality', ''))
    acceptable_signals = sum(1 for r in results if '‚úÖ –•–û–†–û–®–ò–ô' in r.get('quality', ''))
    
    print(f"\n   üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:")
    print(f"      –û—Ç–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {good_signals}")
    print(f"      –•–æ—Ä–æ—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {acceptable_signals}")
    print(f"      –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {(good_signals + acceptable_signals)/len(results)*100:.1f}%" if results else "N/A")
    
    return len(results) == len(risk_scenarios)

def test_market_regime_adaptation():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º...")
    
    market_regimes = [
        {
            "name": "–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ (Bull Market)",
            "scenarios": [
                {"asset": "BTC", "direction": "LONG", "entry_price": 50000, "channel_accuracy": 0.8, "confidence": 0.8},
                {"asset": "ETH", "direction": "LONG", "entry_price": 3000, "channel_accuracy": 0.7, "confidence": 0.7},
                {"asset": "SOL", "direction": "LONG", "entry_price": 100, "channel_accuracy": 0.6, "confidence": 0.6}
            ]
        },
        {
            "name": "–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (Bear Market)",
            "scenarios": [
                {"asset": "BTC", "direction": "SHORT", "entry_price": 35000, "channel_accuracy": 0.7, "confidence": 0.6},
                {"asset": "ETH", "direction": "SHORT", "entry_price": 2000, "channel_accuracy": 0.6, "confidence": 0.5},
                {"asset": "BNB", "direction": "SHORT", "entry_price": 300, "channel_accuracy": 0.5, "confidence": 0.4}
            ]
        },
        {
            "name": "–ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫ (Sideways Market)",
            "scenarios": [
                {"asset": "BTC", "direction": "LONG", "entry_price": 45000, "channel_accuracy": 0.5, "confidence": 0.5},
                {"asset": "ETH", "direction": "LONG", "entry_price": 2500, "channel_accuracy": 0.5, "confidence": 0.5},
                {"asset": "ADA", "direction": "LONG", "entry_price": 0.5, "channel_accuracy": 0.4, "confidence": 0.4}
            ]
        }
    ]
    
    regime_results = {}
    
    for regime in market_regimes:
        print(f"\n   üìä –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {regime['name']}")
        
        regime_signals = []
        for scenario in regime['scenarios']:
            try:
                response = requests.post(
                    f"{ML_SERVICE_URL}/api/v1/predictions/predict",
                    json=scenario,
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    recommendation = data.get('recommendation', 'N/A')
                    confidence = data.get('confidence', 0)
                    
                    print(f"      {scenario['asset']}: {recommendation} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
                    
                    regime_signals.append({
                        'asset': scenario['asset'],
                        'recommendation': recommendation,
                        'confidence': confidence,
                        'expected_direction': scenario['direction']
                    })
                else:
                    print(f"      {scenario['asset']}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    
            except Exception as e:
                print(f"      {scenario['asset']}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        correct_signals = 0
        for signal in regime_signals:
            if (signal['expected_direction'] == 'LONG' and signal['recommendation'] == 'BUY') or \
               (signal['expected_direction'] == 'SHORT' and signal['recommendation'] == 'SELL'):
                correct_signals += 1
        
        accuracy = correct_signals / len(regime_signals) if regime_signals else 0
        regime_results[regime['name']] = {
            'signals': regime_signals,
            'accuracy': accuracy,
            'total_signals': len(regime_signals)
        }
        
        print(f"      –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞: {accuracy*100:.1f}%")
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    total_accuracy = sum(r['accuracy'] for r in regime_results.values()) / len(regime_results)
    print(f"\n   üìà –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–∂–∏–º–∞–º: {total_accuracy*100:.1f}%")
    
    return total_accuracy > 0.5  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 50% —Ç–æ—á–Ω–æ—Å—Ç–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    try:
        response = requests.get(f"{ML_SERVICE_URL}/api/v1/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ML-—Å–µ—Ä–≤–∏—Å—É: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–†–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", test_real_market_scenarios),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", test_risk_management),
        ("–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º", test_market_regime_adaptation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*25} {test_name} {'='*25}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ ML-—Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    elif passed >= total * 0.7:
        print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ. –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ.")
    else:
        print("‚ö†Ô∏è  –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.")
    
    print(f"\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 