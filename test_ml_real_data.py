#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit
"""
import asyncio
import requests
import json
import sys
import os
from datetime import datetime

# Add workers to path
sys.path.append('workers')

from workers.exchange.bybit_client import BybitClient
from workers.real_data_config import CRYPTO_SYMBOLS

def test_ml_service_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ML —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        # Health check
        response = requests.get("http://localhost:8001/health/", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"   ‚úÖ Health Check: {health_data['status']}")
            print(f"   üìä –í–µ—Ä—Å–∏—è: {health_data['version']}")
        else:
            print(f"   ‚ùå Health Check failed: {response.status_code}")
            return False
            
        # Model info
        response = requests.get("http://localhost:8001/api/v1/predictions/model/info", timeout=10)
        if response.status_code == 200:
            model_data = response.json()
            print(f"   ‚úÖ Model Info: {model_data['model_type']}")
            print(f"   üß† –§–∏—á–∏: {len(model_data['feature_names'])}")
        else:
            print(f"   ‚ùå Model Info failed: {response.status_code}")
            return False
            
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_ml_with_real_bybit_data():
    """–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bybit
        async with BybitClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            test_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"]
            market_data = await client.get_market_data(test_symbols)
            
            if not market_data:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bybit")
                return False
                
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            success_count = 0
            
            for symbol, data in market_data.items():
                asset = symbol.replace("USDT", "")
                current_price = float(data['current_price'])
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                test_signal = {
                    "asset": asset,
                    "direction": "LONG",
                    "entry_price": current_price,
                    "target_price": current_price * 1.05,  # +5%
                    "stop_loss": current_price * 0.98      # -2%
                }
                
                print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {asset}:")
                print(f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
                print(f"      –¶–µ–ª—å: ${test_signal['target_price']:.2f}")
                print(f"      –°—Ç–æ–ø: ${test_signal['stop_loss']:.2f}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ML —Å–µ—Ä–≤–∏—Å
                response = requests.post(
                    "http://localhost:8001/api/v1/predictions/predict",
                    json=test_signal,
                    timeout=15
                )
                
                if response.status_code == 200:
                    prediction = response.json()
                    print(f"      ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction['prediction']}")
                    print(f"      üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.2f}")
                    print(f"      üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {prediction['expected_return']:.2f}%")
                    print(f"      ‚ö†Ô∏è –†–∏—Å–∫: {prediction['risk_level']}")
                    print(f"      üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {prediction['recommendation']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if 'market_data' in prediction:
                        md = prediction['market_data']
                        if md.get('source') == 'bybit_real':
                            print(f"      üåê –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Bybit (—Ä–µ–∞–ª—å–Ω—ã–µ)")
                            print(f"      üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {md.get('change_24h', 0):.2f}%")
                        else:
                            print(f"      ‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {md.get('source', 'unknown')}")
                    
                    success_count += 1
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
                    print(f"      üìù –û—Ç–≤–µ—Ç: {response.text[:200]}")
            
            print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(market_data)} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            return success_count > 0
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Bybit: {e}")
        return False

def test_ml_market_data_endpoint():
    """–¢–µ—Å—Ç endpoint –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        test_assets = ["BTC", "ETH", "ADA"]
        success_count = 0
        
        for asset in test_assets:
            response = requests.get(
                f"http://localhost:8001/api/v1/predictions/market-data/{asset}",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    market_info = data['data']
                    print(f"   ‚úÖ {asset}: ${market_info['current_price']:.2f}")
                    print(f"      üìä 24h: {market_info.get('change_24h', 0):.2f}%")
                    success_count += 1
                else:
                    print(f"   ‚ùå {asset}: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"   ‚ùå {asset}: HTTP {response.status_code}")
        
        print(f"   üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {success_count}/{len(test_assets)} –∞–∫—Ç–∏–≤–æ–≤")
        return success_count > 0
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è market data: {e}")
        return False

def test_ml_supported_assets():
    """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤...")
    
    try:
        response = requests.get(
            "http://localhost:8001/api/v1/predictions/supported-assets",
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            assets = data.get('supported_assets', [])
            status = data.get('real_data_status', 'unknown')
            source = data.get('data_source', 'unknown')
            
            print(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(assets)} –∞–∫—Ç–∏–≤–æ–≤")
            print(f"   üåê –°—Ç–∞—Ç—É—Å —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {status}")
            print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
            print(f"   üí∞ –ê–∫—Ç–∏–≤—ã: {', '.join(assets[:5])}...")
            
            return len(assets) > 0
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ML –°–ï–†–í–ò–°–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 70)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = {}
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    results['basic'] = test_ml_service_basic()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bybit
    results['bybit_integration'] = await test_ml_with_real_bybit_data()
    
    # –¢–µ—Å—Ç 3: Market data endpoint
    results['market_data'] = test_ml_market_data_endpoint()
    
    # –¢–µ—Å—Ç 4: Supported assets
    results['supported_assets'] = test_ml_supported_assets()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 70)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, status in results.items():
        status_text = "‚úÖ PASSED" if status else "‚ùå FAILED"
        print(f"   {test_name.upper().replace('_', ' ')}: {status_text}")
    
    print(f"\nüìà –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! ML —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram")
        print("   2. ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏")
        print("   3. ‚úÖ –°–æ–∑–¥–∞—Ç—å dashboard –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    elif passed_tests > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç.")
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê:")
        failed_tests = [name for name, status in results.items() if not status]
        for test in failed_tests:
            print(f"   - {test.replace('_', ' ').title()}")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –∏ API –∫–ª—é—á–∏.")
    
    return passed_tests, total_tests

if __name__ == "__main__":
    passed, total = asyncio.run(main())
    
    if passed == total:
        print("\nüéØ ML –°–ï–†–í–ò–° –ì–û–¢–û–í –ö PRODUCTION!")
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: {total - passed} –ø—Ä–æ–±–ª–µ–º") 