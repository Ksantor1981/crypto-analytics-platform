#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ML-–º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Bybit
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime
from typing import Dict, List, Any
import statistics
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ workers –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
workers_path = os.path.join(os.path.dirname(__file__), 'workers')
sys.path.insert(0, workers_path)

from exchange.bybit_client import BybitClient

class RealDataMLTester:
    """–¢–µ—Å—Ç–µ—Ä ML-–º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.ml_service_url = "http://localhost:8001"
        self.bybit_client = None
        self.test_results = []
        
    async def __aenter__(self):
        self.bybit_client = BybitClient()
        await self.bybit_client.__aenter__()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.bybit_client:
            await self.bybit_client.__aexit__(exc_type, exc_val, exc_tb)
    
    async def get_real_market_data(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT", "DOGEUSDT"]
        market_data = await self.bybit_client.get_market_data(symbols)
        
        if market_data:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} –ø–∞—Ä")
            for symbol, data in market_data.items():
                print(f"      {symbol}: ${data['current_price']:,.4f} ({data.get('change_24h', 0):+.2f}%)")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        return market_data
    
    def create_realistic_test_cases(self, market_data: Dict) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        test_cases = []
        
        for symbol, data in market_data.items():
            current_price = float(data['current_price'])
            change_24h = float(data.get('change_24h', 0))
            
            # –¢–µ—Å—Ç 1: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è LONG –ø–æ–∑–∏—Ü–∏—è (2% –ø—Ä–∏–±—ã–ª—å, 1% —Ä–∏—Å–∫)
            test_cases.append({
                'name': f'{symbol}_Conservative_Long',
                'request': {
                    'asset': symbol,
                    'entry_price': current_price,
                    'target_price': current_price * 1.02,  # +2%
                    'stop_loss': current_price * 0.99,     # -1%
                    'direction': 'LONG'
                },
                'expected_behavior': 'buy',
                'description': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è LONG –ø–æ–∑–∏—Ü–∏—è —Å —Ö–æ—Ä–æ—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å'
            })
            
            # –¢–µ—Å—Ç 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è LONG –ø–æ–∑–∏—Ü–∏—è (10% –ø—Ä–∏–±—ã–ª—å, 5% —Ä–∏—Å–∫)
            test_cases.append({
                'name': f'{symbol}_Aggressive_Long',
                'request': {
                    'asset': symbol,
                    'entry_price': current_price,
                    'target_price': current_price * 1.10,  # +10%
                    'stop_loss': current_price * 0.95,     # -5%
                    'direction': 'LONG'
                },
                'expected_behavior': 'strong_buy',
                'description': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è LONG –ø–æ–∑–∏—Ü–∏—è —Å –æ—Ç–ª–∏—á–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å'
            })
            
            # –¢–µ—Å—Ç 3: –ü–ª–æ—Ö–∞—è —Å–¥–µ–ª–∫–∞ (2% –ø—Ä–∏–±—ã–ª—å, 10% —Ä–∏—Å–∫)
            test_cases.append({
                'name': f'{symbol}_Poor_RR',
                'request': {
                    'asset': symbol,
                    'entry_price': current_price,
                    'target_price': current_price * 1.02,  # +2%
                    'stop_loss': current_price * 0.90,     # -10%
                    'direction': 'LONG'
                },
                'expected_behavior': 'caution',
                'description': '–ü–ª–æ—Ö–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å'
            })
            
            # –¢–µ—Å—Ç 4: SHORT –ø–æ–∑–∏—Ü–∏—è (–µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –ø–∞–¥–∞–µ—Ç)
            if change_24h < -1:  # –ï—Å–ª–∏ –ø–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 1%
                test_cases.append({
                    'name': f'{symbol}_Short_Down',
                    'request': {
                        'asset': symbol,
                        'entry_price': current_price,
                        'target_price': current_price * 0.95,  # -5%
                        'stop_loss': current_price * 1.02,     # +2%
                        'direction': 'SHORT'
                    },
                    'expected_behavior': 'sell',
                    'description': 'SHORT –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ'
                })
            
            # –¢–µ—Å—Ç 5: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ (1% –ø—Ä–∏–±—ã–ª—å, 1% —Ä–∏—Å–∫)
            test_cases.append({
                'name': f'{symbol}_Neutral',
                'request': {
                    'asset': symbol,
                    'entry_price': current_price,
                    'target_price': current_price * 1.01,  # +1%
                    'stop_loss': current_price * 0.99,     # -1%
                    'direction': 'LONG'
                },
                'expected_behavior': 'neutral',
                'description': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Å —Ä–∞–≤–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º'
            })
        
        return test_cases
    
    async def test_single_prediction(self, test_case: Dict) -> Dict:
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json=test_case['request'],
                    timeout=10
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return {
                            'test_case': test_case['name'],
                            'description': test_case['description'],
                            'request': test_case['request'],
                            'response': result,
                            'success': True,
                            'prediction': result.get('prediction', 'UNKNOWN'),
                            'confidence': result.get('confidence', 0.0),
                            'success_probability': result.get('success_probability', 0.0),
                            'expected_behavior': test_case.get('expected_behavior', 'neutral')
                        }
                    else:
                        return {
                            'test_case': test_case['name'],
                            'description': test_case['description'],
                            'request': test_case['request'],
                            'success': False,
                            'error': f"HTTP {response.status}"
                        }
        except Exception as e:
            return {
                'test_case': test_case['name'],
                'description': test_case['description'],
                'request': test_case['request'],
                'success': False,
                'error': str(e)
            }
    
    def analyze_realistic_results(self, results: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        successful_tests = [r for r in results if r['success']]
        failed_tests = [r for r in results if not r['success']]
        
        if not successful_tests:
            return {
                'total_tests': len(results),
                'successful_tests': 0,
                'failed_tests': len(failed_tests),
                'success_rate': 0.0,
                'average_confidence': 0.0,
                'prediction_distribution': {},
                'errors': [r.get('error', 'Unknown error') for r in failed_tests]
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞
        confidences = [r['confidence'] for r in successful_tests]
        probabilities = [r['success_probability'] for r in successful_tests]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        prediction_counts = {}
        for result in successful_tests:
            pred = result['prediction']
            prediction_counts[pred] = prediction_counts.get(pred, 0) + 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫
        trade_type_analysis = {}
        for result in successful_tests:
            trade_type = result['expected_behavior']
            if trade_type not in trade_type_analysis:
                trade_type_analysis[trade_type] = {
                    'total': 0, 'correct': 0, 'avg_confidence': 0.0, 'avg_probability': 0.0
                }
            
            analysis = trade_type_analysis[trade_type]
            analysis['total'] += 1
            analysis['avg_confidence'] += result['confidence']
            analysis['avg_probability'] += result['success_probability']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
            direction = result['request'].get('direction', 'LONG')
            actual = result['prediction']
            is_correct = False
            
            if trade_type == 'strong_buy' and direction == 'LONG' and '–°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê' in actual:
                is_correct = True
            elif trade_type == 'buy' and direction == 'LONG' and '–ü–û–ö–£–ü–ö–ê' in actual:
                is_correct = True
            elif trade_type == 'sell' and direction == 'SHORT' and '–ü–†–û–î–ê–ñ–ê' in actual:
                is_correct = True
            elif trade_type == 'neutral' and '–ù–ï–ô–¢–†–ê–õ–¨–ù–û' in actual:
                is_correct = True
            elif trade_type == 'caution' and ('–û–°–¢–û–†–û–ñ–ù–û' in actual or '–ò–ó–ë–ï–ì–ê–¢–¨' in actual):
                is_correct = True
            
            if is_correct:
                analysis['correct'] += 1
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for trade_type in trade_type_analysis:
            analysis = trade_type_analysis[trade_type]
            if analysis['total'] > 0:
                analysis['avg_confidence'] /= analysis['total']
                analysis['avg_probability'] /= analysis['total']
        
        # –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        total_expected = sum(analysis['total'] for analysis in trade_type_analysis.values())
        total_correct = sum(analysis['correct'] for analysis in trade_type_analysis.values())
        overall_accuracy = (total_correct / total_expected * 100) if total_expected > 0 else 0
        
        return {
            'total_tests': len(results),
            'successful_tests': len(successful_tests),
            'failed_tests': len(failed_tests),
            'success_rate': (len(successful_tests) / len(results)) * 100,
            'overall_accuracy': overall_accuracy,
            'average_confidence': round(statistics.mean(confidences), 3),
            'average_probability': round(statistics.mean(probabilities), 3),
            'min_confidence': round(min(confidences), 3),
            'max_confidence': round(max(confidences), 3),
            'confidence_std': round(statistics.stdev(confidences), 3) if len(confidences) > 1 else 0,
            'prediction_distribution': prediction_counts,
            'trade_type_analysis': trade_type_analysis,
            'errors': [r.get('error', 'Unknown error') for r in failed_tests]
        }
    
    def print_realistic_analysis(self, analysis: Dict):
        """–í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*70)
        print("üìä –ê–ù–ê–õ–ò–ó ML-–ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        print("="*70)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {analysis['total_tests']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {analysis['successful_tests']}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {analysis['failed_tests']}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {analysis['success_rate']:.1f}%")
        print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {analysis['overall_accuracy']:.1f}%")
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏:")
        print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['average_confidence']}")
        print(f"  –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {analysis['average_probability']}")
        print(f"  –î–∏–∞–ø–∞–∑–æ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {analysis['min_confidence']} - {analysis['max_confidence']}")
        print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {analysis['confidence_std']}")
        
        print(f"\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        for pred, count in analysis['prediction_distribution'].items():
            percentage = (count / analysis['successful_tests']) * 100
            print(f"  {pred}: {count} ({percentage:.1f}%)")
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫:")
        for trade_type, stats in analysis['trade_type_analysis'].items():
            accuracy = (stats['correct'] / stats['total'] * 100) if stats['total'] > 0 else 0
            print(f"  {trade_type}:")
            print(f"    –¢–æ—á–Ω–æ—Å—Ç—å: {stats['correct']}/{stats['total']} ({accuracy:.1f}%)")
            print(f"    –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['avg_confidence']:.3f}")
            print(f"    –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {stats['avg_probability']:.3f}")
        
        if analysis['errors']:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error in analysis['errors']:
                print(f"  - {error}")
        
        print("\n" + "="*70)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
        if analysis['overall_accuracy'] >= 70:
            print("üéâ –û–¢–õ–ò–ß–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•!")
        elif analysis['overall_accuracy'] >= 50:
            print("‚úÖ –•–û–†–û–®–ê–Ø –¢–û–ß–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        elif analysis['overall_accuracy'] >= 30:
            print("‚ö†Ô∏è –°–†–ï–î–ù–Ø–Ø –¢–û–ß–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        else:
            print("‚ùå –ù–ò–ó–ö–ê–Ø –¢–û–ß–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        
        print("="*70)
        
        return analysis['overall_accuracy'] >= 50

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML-–ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• BYBIT")
    print("="*70)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*70)
    
    async with RealDataMLTester() as tester:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = await tester.get_real_market_data()
        
        if not market_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = tester.create_realistic_test_cases(market_data)
        print(f"\n–°–æ–∑–¥–∞–Ω–æ {len(test_cases)} —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        results = []
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n{i}/{len(test_cases)} –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_case['name']}")
            print(f"   {test_case['description']}")
            result = await tester.test_single_prediction(test_case)
            results.append(result)
            
            if result['success']:
                print(f"   ‚úÖ {result['prediction']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['success_probability']:.3f})")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis = tester.analyze_realistic_results(results)
        success = tester.print_realistic_analysis(analysis)
        
        return success

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        exit_code = 0 if success else 1
        exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1) 