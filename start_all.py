#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –∏ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É
"""

import http.server
import socketserver
import webbrowser
import threading
import time
import os
import sys
import socket
import json
import sqlite3
from urllib.parse import urlparse
from datetime import datetime, timedelta

DB_PATH = "workers/signals.db"

def get_db_connection():
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

class CombinedAPIHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        try:
            parsed_path = urlparse(self.path)
            path = parsed_path.path
            
            # API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            if path.startswith('/api/'):
                self.handle_api_request(path)
            else:
                # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (HTML, CSS, JS)
                super().do_GET()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.send_error(500, str(e))
    
    def handle_api_request(self, path):
        # CORS headers
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        if path == '/api/signals':
            response = self.get_signals()
        elif path == '/api/channels':
            response = self.get_channels()
        elif path == '/api/stats':
            response = self.get_stats()
        elif path == '/health':
            response = {"status": "ok", "timestamp": datetime.now().isoformat()}
        else:
            response = {"error": "Endpoint not found"}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def get_signals(self):
        conn = get_db_connection()
        if not conn:
            return {"signals": [], "error": "Database connection failed"}
        
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM signals 
                ORDER BY timestamp DESC 
                LIMIT 50
            """)
            
            signals = []
            for row in cursor.fetchall():
                signal = dict(row)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
                if signal['timestamp']:
                    try:
                        if 'T' in signal['timestamp']:
                            dt = datetime.fromisoformat(signal['timestamp'].replace('Z', '+00:00'))
                        else:
                            dt = datetime.strptime(signal['timestamp'], '%Y-%m-%d %H:%M:%S')
                        signal['timestamp'] = dt.isoformat()
                    except:
                        pass
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è - —á–∏—Å–ª–∞
                for field in ['entry_price', 'target_price', 'stop_loss', 'real_confidence', 
                             'calculated_confidence', 'risk_reward_ratio', 'potential_profit', 'potential_loss']:
                    if signal[field] is not None:
                        try:
                            signal[field] = float(signal[field])
                        except:
                            signal[field] = 0.0
                
                signals.append(signal)
            
            return {"signals": signals}
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {"signals": [], "error": str(e)}
        finally:
            conn.close()
    
    def get_channels(self):
        conn = get_db_connection()
        if not conn:
            return {"channels": [], "error": "Database connection failed"}
        
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM channel_stats 
                ORDER BY total_signals DESC
            """)
            
            channels = []
            for row in cursor.fetchall():
                channel = dict(row)
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è - —á–∏—Å–ª–∞
                for field in ['total_signals', 'successful_signals', 'accuracy']:
                    if channel[field] is not None:
                        try:
                            channel[field] = float(channel[field])
                        except:
                            channel[field] = 0.0
                
                channels.append(channel)
            
            return {"channels": channels}
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {"channels": [], "error": str(e)}
        finally:
            conn.close()
    
    def get_stats(self):
        conn = get_db_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        try:
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(*) as total FROM signals")
            total_signals = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) as total FROM channel_stats")
            total_channels = cursor.fetchone()[0]
            
            cursor.execute("SELECT AVG(accuracy) as avg_accuracy FROM channel_stats")
            avg_accuracy = cursor.fetchone()[0] or 0.0
            
            # –ù–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            yesterday = datetime.now() - timedelta(days=1)
            cursor.execute("""
                SELECT COUNT(*) as recent FROM signals 
                WHERE timestamp > ?
            """, (yesterday.isoformat(),))
            recent_signals = cursor.fetchone()[0]
            
            return {
                "total_signals": total_signals,
                "total_channels": total_channels,
                "avg_accuracy": float(avg_accuracy),
                "recent_signals": recent_signals
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
        finally:
            conn.close()

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('dashboard.html'):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª dashboard.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(DB_PATH):
        print("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å—Ç–∏–≤ create_database.py")
        return False
    
    PORT = 8000
    
    try:
        with socketserver.TCPServer(("", PORT), CombinedAPIHandler) as httpd:
            print(f"üöÄ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
            print(f"üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{PORT}/dashboard.html")
            print("üîå API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            print("   - GET /api/signals - —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤")
            print("   - GET /api/channels - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
            print("   - GET /api/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("   - GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            def open_browser():
                time.sleep(2)
                webbrowser.open(f'http://localhost:{PORT}/dashboard.html')
            
            threading.Thread(target=open_browser, daemon=True).start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except OSError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöÄ CRYPTO ANALYTICS PLATFORM - –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –°–ï–†–í–ï–†")
    print("=" * 60)
    print()
    print("üìä –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –∏ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É...")
    print("üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ API —Å–µ—Ä–≤–µ—Ä –∏ –¥–∞—à–±–æ—Ä–¥ –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    print("   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º")
    print("   ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    success = start_server()
    
    if not success:
        print("\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞:")
        print("1. python simple_api_server.py (—Ç–æ–ª—å–∫–æ API)")
        print("2. python start_dashboard.py (—Ç–æ–ª—å–∫–æ –¥–∞—à–±–æ—Ä–¥)")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª dashboard.html –Ω–∞–ø—Ä—è–º—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    
    return success

if __name__ == "__main__":
    main()
