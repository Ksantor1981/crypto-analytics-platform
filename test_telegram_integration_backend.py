#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Backend API
"""

import requests
import json
from datetime import datetime

def test_telegram_integration():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ backend
    """
    
    base_url = "http://localhost:8000"
    
    print("üì± –¢–ï–°–¢ TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í BACKEND")
    print("=" * 50)
    
    # 1. Health check Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ Health check Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    try:
        response = requests.get(f"{base_url}/api/v1/telegram/health")
        
        if response.status_code == 200:
            data = response.json()
            health_data = data.get('data', {})
            print(f"‚úÖ Health check: {data.get('status', 'unknown')}")
            print(f"   Telegram available: {health_data.get('telegram_available', False)}")
            print(f"   Can initialize client: {health_data.get('can_initialize_client', False)}")
            print(f"   Total channels: {health_data.get('total_channels', 0)}")
            print(f"   Active channels: {health_data.get('active_channels', 0)}")
            print(f"   Total signals: {health_data.get('total_signals', 0)}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            print(f"   Response: {response.text}")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
    try:
        response = requests.get(f"{base_url}/api/v1/telegram/channels")
        
        if response.status_code == 200:
            data = response.json()
            channels = data.get('data', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
            
            for channel in channels[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                print(f"   üì∫ {channel.get('name', 'unknown')}")
                print(f"      URL: {channel.get('url', 'N/A')}")
                print(f"      Active: {channel.get('is_active', False)}")
                print(f"      Signals: {channel.get('signals_count', 0)}")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                print(f"      Accuracy: {channel.get('accuracy', 0):.1f}%")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
            print(f"   Response: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    # 3. –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    print("\n3Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤...")
    try:
        response = requests.get(f"{base_url}/api/v1/telegram/collect-signals-sync")
        
        if response.status_code == 200:
            data = response.json()
            result = data.get('data', {})
            print(f"‚úÖ –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"   Success: {result.get('success', False)}")
            print(f"   Signals collected: {result.get('total_signals_collected', 0)}")
            print(f"   Signals saved: {result.get('total_signals_saved', 0)}")
            print(f"   Channels processed: {result.get('channels_processed', 0)}")
            print(f"   Collection time: {result.get('collection_time', 0):.2f}s")
            print(f"   Mode: {result.get('mode', 'real')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {response.status_code}")
            print(f"   Response: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö Telegram —Å–∏–≥–Ω–∞–ª–æ–≤...")
    try:
        response = requests.get(f"{base_url}/api/v1/telegram/signals/recent?limit=10")
        
        if response.status_code == 200:
            data = response.json()
            signals = data.get('data', [])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
            for signal in signals[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                print(f"   üìä {signal.get('symbol', 'unknown')} {signal.get('direction', 'unknown')}")
                print(f"      Entry: ${signal.get('entry_price', 0)}")
                print(f"      Targets: {signal.get('targets', [])}")
                print(f"      SL: ${signal.get('stop_loss', 'N/A')}")
                print(f"      Status: {signal.get('status', 'unknown')}")
                print(f"      Confidence: {signal.get('confidence_score', 0):.2f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –µ—â–µ —Ä–∞–∑ (–ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤)
    print("\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ—Å–ª–µ —Å–±–æ—Ä–∞)...")
    try:
        response = requests.get(f"{base_url}/api/v1/telegram/channels")
        
        if response.status_code == 200:
            data = response.json()
            channels = data.get('data', [])
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
            
            # –ù–∞–π–¥–µ–º –∫–∞–Ω–∞–ª —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            test_channel_id = None
            for channel in channels:
                if channel.get('signals_count', 0) > 0:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    test_channel_id = channel.get('id')
                    print(f"   üéØ –í—ã–±—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {channel.get('name')} (ID: {test_channel_id})")
                    print(f"      Signals: {channel.get('signals_count', 0)}")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    break
            
            # 6. –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if test_channel_id:
                print(f"\n6Ô∏è‚É£ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ ID {test_channel_id}...")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–Ω–∞–ª–∞
                response = requests.get(f"{base_url}/api/v1/telegram/channels/{test_channel_id}/signals?limit=5")
                if response.status_code == 200:
                    channel_data = response.json()
                    channel_signals = channel_data.get('data', {}).get('signals', [])
                    channel_info = channel_data.get('data', {}).get('channel', {})
                    
                    print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª—ã –∫–∞–Ω–∞–ª–∞ {channel_info.get('name', 'unknown')}: {len(channel_signals)}")
                    
                    for signal in channel_signals[:2]:
                        print(f"      üìà {signal.get('symbol')} {signal.get('direction')} @ ${signal.get('entry_price')}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
                response = requests.get(f"{base_url}/api/v1/telegram/channels/{test_channel_id}/statistics")
                if response.status_code == 200:
                    stats_data = response.json()
                    stats = stats_data.get('data', {})
                    
                    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞:")
                    print(f"      Total signals: {stats.get('total_signals', 0)}")
                    print(f"      Success signals: {stats.get('success_signals', 0)}")
                    print(f"      Failed signals: {stats.get('failed_signals', 0)}")
                    print(f"      Pending signals: {stats.get('pending_signals', 0)}")
                    print(f"      Accuracy rate: {stats.get('accuracy_rate', 0)}%")
                
                # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞
                response = requests.post(f"{base_url}/api/v1/telegram/channels/{test_channel_id}/toggle")
                if response.status_code == 200:
                    toggle_data = response.json()
                    result = toggle_data.get('data', {})
                    print(f"   üîÑ Status toggled: {result.get('is_active', 'unknown')}")
                    
                    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
                    requests.post(f"{base_url}/api/v1/telegram/channels/{test_channel_id}/toggle")
            else:
                print("   ‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    # 7. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ (background task)
    print("\n7Ô∏è‚É£ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ (background)...")
    try:
        response = requests.post(f"{base_url}/api/v1/telegram/collect-signals")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Background task started:")
            print(f"   Status: {data.get('status', 'unknown')}")
            print(f"   Message: {data.get('message', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ background task: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ background task: {e}")
    
    print("\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("‚úÖ Telegram Service —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Backend")
    print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è Telegram —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç (mock/real —Ä–µ–∂–∏–º—ã)")
    print("‚úÖ Database –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ Channel —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    print("‚úÖ Background tasks –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
    print("\nüöÄ –ó–∞–¥–∞—á–∞ 0.3.2 –í–´–ü–û–õ–ù–ï–ù–ê!")

def test_integration_with_existing_apis():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Telegram —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API
    """
    
    base_url = "http://localhost:8000"
    
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò API")
    print("=" * 45)
    
    # –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å channels API
    print("\n1Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—â–∏–º channels API...")
    try:
        response = requests.get(f"{base_url}/api/v1/channels/")
        
        if response.status_code == 200:
            data = response.json()
            all_channels = data.get('data', [])
            telegram_channels = [ch for ch in all_channels if ch.get('platform') == 'telegram']
            
            print(f"‚úÖ –û–±—â–∏–π channels API:")
            print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(all_channels)}")
            print(f"   Telegram –∫–∞–Ω–∞–ª–æ–≤: {len(telegram_channels)}")
            
            if telegram_channels:
                print(f"   –ü—Ä–∏–º–µ—Ä Telegram –∫–∞–Ω–∞–ª–∞: {telegram_channels[0].get('name', 'unknown')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ channels API: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ channels API: {e}")
    
    # –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å signals API
    print("\n2Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—â–∏–º signals API...")
    try:
        response = requests.get(f"{base_url}/api/v1/signals/")
        
        if response.status_code == 403:
            print("‚ö†Ô∏è Signals API —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
        elif response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Signals API –¥–æ—Å—Ç—É–ø–µ–Ω: {len(data.get('data', []))} —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            print(f"üìù Signals API status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ signals API: {e}")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    test_telegram_integration()
    
    # –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API
    test_integration_with_existing_apis()
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("üìã –ó–∞–¥–∞—á–∞ 0.3.2 - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ telegram_client.py - –í–´–ü–û–õ–ù–ï–ù–ê") 