#!/usr/bin/env python3
"""
üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRYPTO ANALYTICS PLATFORM
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import requests
import time
import json
from datetime import datetime
from typing import Dict, Any

def print_header():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ" + "=" * 68 + "üöÄ")
    print("üéâ CRYPTO ANALYTICS PLATFORM - –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø üéâ")
    print("üöÄ" + "=" * 68 + "üöÄ")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ò–°–û–í")
    print("-" * 50)
    
    services = {
        "Backend API": "http://127.0.0.1:8000/docs",
        "ML Service": "http://127.0.0.1:8001/docs",
        "ML Health": "http://127.0.0.1:8001/api/v1/health/"
    }
    
    all_working = True
    
    for service_name, url in services.items():
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {service_name}: –†–ê–ë–û–¢–ê–ï–¢")
            else:
                print(f"‚ùå {service_name}: –û–®–ò–ë–ö–ê {response.status_code}")
                all_working = False
        except Exception as e:
            print(f"‚ùå {service_name}: –ù–ï–î–û–°–¢–£–ü–ï–ù - {e}")
            all_working = False
    
    print()
    return all_working

def demonstrate_ml_predictions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üîÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("-" * 60)
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = [
        {
            "name": "Bitcoin Long Position",
            "data": {
                "asset": "BTCUSDT",
                "entry_price": 45000.0,
                "target_price": 47000.0,
                "stop_loss": 43000.0,
                "direction": "LONG"
            }
        },
        {
            "name": "Ethereum Short Position", 
            "data": {
                "asset": "ETHUSDT",
                "entry_price": 2500.0,
                "target_price": 2400.0,
                "stop_loss": 2600.0,
                "direction": "SHORT"
            }
        },
        {
            "name": "BNB Scalping Strategy",
            "data": {
                "asset": "BNBUSDT",
                "entry_price": 300.0,
                "target_price": 305.0,
                "stop_loss": 295.0,
                "direction": "LONG"
            }
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π {i}: {scenario['name']}")
        print("   " + "-" * 40)
        
        try:
            response = requests.post(
                "http://127.0.0.1:8001/api/v1/predictions/predict",
                json=scenario['data'],
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                
                print(f"   üí∞ –ê–∫—Ç–∏–≤: {result['asset']}")
                print(f"   üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result['prediction']}")
                print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
                print(f"   üíµ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['expected_return']:.2f}%")
                print(f"   ‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result['risk_level']}")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                market_data = result.get('market_data', {})
                if market_data.get('source') == 'bybit_real':
                    print(f"   üìä –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${market_data['current_price']:,.2f}")
                    print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data['change_24h']:.3f}%")
                    print(f"   üïí –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {market_data.get('timestamp', 'N/A')}")
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")
    
    print()

def demonstrate_market_data():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    popular_assets = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT"]
    
    for asset in popular_assets:
        try:
            response = requests.get(
                f"http://127.0.0.1:8001/api/v1/predictions/market-data/{asset}",
                timeout=5
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'market_data' in data:
                    market_info = data['market_data']
                    price = market_info.get('current_price', 'N/A')
                    change = market_info.get('change_24h', 'N/A')
                    source = market_info.get('source', 'unknown')
                    
                    print(f"üíé {asset}: ${price} ({change}% –∑–∞ 24—á) [{source}]")
                else:
                    print(f"‚ö†Ô∏è  {asset}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"‚ùå {asset}: –û—à–∏–±–∫–∞ {response.status_code}")
                
        except Exception as e:
            print(f"üí• {asset}: {e}")
    
    print()

def demonstrate_health_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üè• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ò–°–¢–ï–ú–´")
    print("-" * 40)
    
    health_endpoints = [
        ("–ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å", "http://127.0.0.1:8001/api/v1/health/"),
        ("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "http://127.0.0.1:8001/api/v1/health/detailed"),
        ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã", "http://127.0.0.1:8001/api/v1/health/readiness"),
        ("–ñ–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", "http://127.0.0.1:8001/api/v1/health/liveness")
    ]
    
    for name, url in health_endpoints:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                data = response.json()
                status = data.get('status', 'unknown')
                print(f"‚úÖ {name}: {status.upper()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                if 'system_metrics' in data:
                    metrics = data['system_metrics']
                    print(f"   üíª CPU: {metrics.get('cpu_percent', 'N/A')}%")
                    print(f"   üß† RAM: {metrics.get('memory_percent', 'N/A')}%")
                    print(f"   üíæ –î–∏—Å–∫: {metrics.get('disk_percent', 'N/A')}%")
                    
            else:
                print(f"‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
                
        except Exception as e:
            print(f"üí• {name}: {e}")
    
    print()

def demonstrate_supported_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    print("üåü –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–õ–ê–¢–§–û–†–ú–´")
    print("-" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
        response = requests.get("http://127.0.0.1:8001/api/v1/info", timeout=5)
        if response.status_code == 200:
            info = response.json()
            
            print(f"üè∑Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: {info.get('service_name', 'N/A')}")
            print(f"üîß –¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞: {info.get('service_type', 'N/A')}")
            print(f"üì¶ –í–µ—Ä—Å–∏—è: {info.get('version', 'N/A')}")
            print(f"ü§ñ –¢–∏–ø –º–æ–¥–µ–ª–∏: {info.get('model_type', 'N/A')}")
            
            features = info.get('features', [])
            print(f"‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ({len(features)}):")
            for feature in features:
                print(f"   ‚Ä¢ {feature}")
            
            assets = info.get('supported_assets', [])
            print(f"üí∞ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã ({len(assets)}):")
            print(f"   {', '.join(assets)}")
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint
        response = requests.get("http://127.0.0.1:8001/api/v1/predictions/supported-assets", timeout=5)
        if response.status_code == 200:
            data = response.json()
            supported = data.get('supported_assets', [])
            print(f"üìà –ê–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {len(supported)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    print()

def performance_benchmark():
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚ö° –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("-" * 35)
    
    test_requests = 5
    successful_requests = 0
    total_time = 0
    
    test_data = {
        "asset": "BTCUSDT",
        "entry_price": 45000.0,
        "target_price": 46000.0,
        "stop_loss": 44000.0,
        "direction": "LONG"
    }
    
    print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º {test_requests} –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    for i in range(test_requests):
        try:
            start_time = time.time()
            response = requests.post(
                "http://127.0.0.1:8001/api/v1/predictions/predict",
                json=test_data,
                timeout=10
            )
            end_time = time.time()
            
            request_time = end_time - start_time
            total_time += request_time
            
            if response.status_code == 200:
                successful_requests += 1
                print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: {request_time:.2f}s")
            else:
                print(f"   ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ {response.status_code}")
                
        except Exception as e:
            print(f"   üí• –ó–∞–ø—Ä–æ—Å {i+1}: {e}")
    
    if successful_requests > 0:
        avg_time = total_time / successful_requests
        success_rate = (successful_requests / test_requests) * 100
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{test_requests} ({success_rate:.1f}%)")
        print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s")
        print(f"   üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {1/avg_time:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    if not check_services():
        print("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
        return False
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    demonstrate_ml_predictions()
    demonstrate_market_data()
    demonstrate_health_monitoring()
    demonstrate_supported_features()
    performance_benchmark()
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("üéâ" + "=" * 68 + "üéâ")
    print("üèÜ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("üéØ Crypto Analytics Platform –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print()
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
    print("   üåê Backend API: http://127.0.0.1:8000/docs")
    print("   ü§ñ ML Service: http://127.0.0.1:8001/docs")
    print()
    print("‚ú® –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è:")
    print("   ‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("   ‚Ä¢ üîÆ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    print("   ‚Ä¢ üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("üéâ" + "=" * 68 + "üéâ")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 