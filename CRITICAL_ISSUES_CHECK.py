#!/usr/bin/env python3
"""
üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú –ò–ó –ü–õ–ê–ù–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ Comprehensive Analysis:
1. Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ë–õ–û–ö–ò–†–£–ï–¢ –ü–†–û–î–ê–ñ–ò
2. –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ ML Service - –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨  
3. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CI/CD –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –†–ò–°–ö–ò –î–ï–ü–õ–û–Ø
4. –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê
5. –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ - –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨
6. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Staging-–æ–∫—Ä—É–∂–µ–Ω–∏–µ
7. –ù–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
8. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
9. –ü—Ä–æ–±–ª–µ–º—ã —Å Onboarding –∏ User Experience
"""

import asyncio
import sys
import json
import time
import subprocess
import os
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Optional
import importlib.util

class CriticalIssuesChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∏–∑ –ø–ª–∞–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "total_checks": 0,
            "passed": 0,
            "failed": 0,
            "warnings": 0,
            "critical_issues": [],
            "details": {}
        }
        
    def log_check(self, category: str, check_name: str, status: str, message: str = "", error: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.results["total_checks"] += 1
        
        if status == "PASS":
            self.results["passed"] += 1
            print(f"‚úÖ {category}: {check_name} - {message}")
        elif status == "FAIL":
            self.results["failed"] += 1
            print(f"‚ùå {category}: {check_name} - {message}")
            if error:
                print(f"   –û—à–∏–±–∫–∞: {error}")
            self.results["critical_issues"].append(f"{category}: {check_name}")
        elif status == "WARNING":
            self.results["warnings"] += 1
            print(f"‚ö†Ô∏è  {category}: {check_name} - {message}")
            
        if category not in self.results["details"]:
            self.results["details"][category] = []
            
        self.results["details"][category].append({
            "check": check_name,
            "status": status,
            "message": message,
            "error": error
        })
    
    def check_frontend_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Frontend - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 1"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 1: Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ë–õ–û–ö–ò–†–£–ï–¢ –ü–†–û–î–ê–ñ–ò")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ frontend
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            frontend_dir = Path("frontend")
            if not frontend_dir.exists():
                self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "FAIL", "–ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
            package_json = frontend_dir / "package.json"
            if not package_json.exists():
                self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "FAIL", "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ npm –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ npm –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                npm_paths = ["npm", "C:\\Program Files\\nodejs\\npm.cmd", "C:\\Program Files (x86)\\nodejs\\npm.cmd"]
                npm_found = False
                
                for npm_path in npm_paths:
                    try:
                        subprocess.run([npm_path, "--version"], capture_output=True, check=True)
                        npm_found = True
                        npm_cmd = npm_path
                        break
                    except (subprocess.CalledProcessError, FileNotFoundError):
                        continue
                
                if not npm_found:
                    self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "FAIL", "npm –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
                    return
                    
            except Exception as e:
                self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "FAIL", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ npm: {str(e)}")
                return
                
            # –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
            result = subprocess.run(
                [npm_cmd, "run", "build"], 
                cwd=str(frontend_dir.absolute()), 
                capture_output=True, 
                text=True, 
                timeout=120
            )
            
            if result.returncode == 0:
                self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "PASS", "Frontend —É—Å–ø–µ—à–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è")
            else:
                self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "FAIL", "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend", result.stderr)
                return
                
        except Exception as e:
            self.log_check("Frontend", "–°–±–æ—Ä–∫–∞ Next.js", "FAIL", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É", str(e))
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            with open("frontend/package.json", "r") as f:
                package_data = json.load(f)
                
            required_deps = ["@mui/material", "next", "react"]
            missing_deps = []
            
            for dep in required_deps:
                if dep not in package_data.get("dependencies", {}):
                    missing_deps.append(dep)
            
            if not missing_deps:
                self.log_check("Frontend", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "PASS", "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.log_check("Frontend", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "FAIL", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
                
        except Exception as e:
            self.log_check("Frontend", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ package.json", str(e))
    
    def check_ml_service_stability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ML Service - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 2"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 2: –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ ML Service - –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            spec = importlib.util.spec_from_file_location("ml_main", "ml-service/main.py")
            ml_main = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(ml_main)
            
            self.log_check("ML Service", "–ò–º–ø–æ—Ä—Ç main.py", "PASS", "ML Service —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            
        except Exception as e:
            self.log_check("ML Service", "–ò–º–ø–æ—Ä—Ç main.py", "FAIL", "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ML Service", str(e))
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        try:
            models_dir = Path("ml-service/models")
            if models_dir.exists():
                model_files = list(models_dir.glob("*.py"))
                if model_files:
                    self.log_check("ML Service", "–ú–æ–¥–µ–ª–∏", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(model_files)} —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π")
                else:
                    self.log_check("ML Service", "–ú–æ–¥–µ–ª–∏", "WARNING", "–ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç–∞")
            else:
                self.log_check("ML Service", "–ú–æ–¥–µ–ª–∏", "WARNING", "–ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            self.log_check("ML Service", "–ú–æ–¥–µ–ª–∏", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π", str(e))
    
    def check_cicd_production(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CI/CD –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 3"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 3: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CI/CD –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –†–ò–°–ö–ò –î–ï–ü–õ–û–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GitHub Actions
        workflows_dir = Path(".github/workflows")
        if workflows_dir.exists():
            workflow_files = list(workflows_dir.glob("*.yml"))
            
            required_workflows = ["ci.yml", "deploy-production.yml", "deploy-staging.yml"]
            found_workflows = [f.name for f in workflow_files]
            
            missing_workflows = [w for w in required_workflows if w not in found_workflows]
            
            if not missing_workflows:
                self.log_check("CI/CD", "GitHub Actions", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(workflow_files)} workflow —Ñ–∞–π–ª–æ–≤")
            else:
                self.log_check("CI/CD", "GitHub Actions", "WARNING", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_workflows}")
        else:
            self.log_check("CI/CD", "GitHub Actions", "FAIL", "–ü–∞–ø–∫–∞ .github/workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            with open("docker-compose.yml", "r") as f:
                docker_config = f.read()
                
            required_services = ["backend", "frontend", "ml-service", "postgres", "redis"]
            missing_services = []
            
            for service in required_services:
                if service not in docker_config:
                    missing_services.append(service)
            
            if not missing_services:
                self.log_check("CI/CD", "Docker Compose", "PASS", "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                self.log_check("CI/CD", "Docker Compose", "FAIL", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ—Ä–≤–∏—Å—ã: {missing_services}")
                
        except Exception as e:
            self.log_check("CI/CD", "Docker Compose", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ docker-compose.yml", str(e))
    
    def check_automated_testing(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 4"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 4: –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ backend
        backend_tests_dir = Path("backend/tests")
        if backend_tests_dir.exists():
            test_files = list(backend_tests_dir.glob("test_*.py"))
            if test_files:
                self.log_check("Testing", "Backend —Ç–µ—Å—Ç—ã", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
            else:
                self.log_check("Testing", "Backend —Ç–µ—Å—Ç—ã", "WARNING", "–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.log_check("Testing", "Backend —Ç–µ—Å—Ç—ã", "FAIL", "–ü–∞–ø–∫–∞ backend/tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ frontend
        frontend_tests_dir = Path("frontend/tests")
        if frontend_tests_dir.exists():
            test_files = list(frontend_tests_dir.rglob("*.test.*"))
            if test_files:
                self.log_check("Testing", "Frontend —Ç–µ—Å—Ç—ã", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
            else:
                self.log_check("Testing", "Frontend —Ç–µ—Å—Ç—ã", "WARNING", "–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.log_check("Testing", "Frontend —Ç–µ—Å—Ç—ã", "WARNING", "–ü–∞–ø–∫–∞ frontend/tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        pytest_config = Path("backend/pytest.ini")
        if pytest_config.exists():
            self.log_check("Testing", "Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "PASS", "pytest.ini –Ω–∞–π–¥–µ–Ω")
        else:
            self.log_check("Testing", "Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "WARNING", "pytest.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def check_dependencies_stability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 5"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 5: –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ - –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'cp1251', 'latin-1', 'utf-16', 'utf-16le']
            backend_deps = None
            
            for encoding in encodings:
                try:
                    with open("backend/requirements.txt", "r", encoding=encoding) as f:
                        backend_deps = f.read()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    if 'fastapi' in backend_deps:
                        break
                except UnicodeDecodeError:
                    continue
            
            if backend_deps is None:
                self.log_check("Dependencies", "Backend requirements", "FAIL", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å requirements.txt")
                return
                
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"DEBUG: –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(backend_deps)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ requirements.txt")
            print(f"DEBUG: –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {repr(backend_deps[:100])}")
                
            critical_deps = ["fastapi", "sqlalchemy", "pydantic", "uvicorn"]
            missing_deps = []
            
            for dep in critical_deps:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ (—É–±–∏—Ä–∞–µ–º BOM)
                clean_deps = backend_deps.replace('\ufeff', '')
                if dep in clean_deps:
                    continue
                else:
                    missing_deps.append(dep)
            
            if not missing_deps:
                self.log_check("Dependencies", "Backend requirements", "PASS", "–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                self.log_check("Dependencies", "Backend requirements", "FAIL", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_deps}")
                
        except Exception as e:
            self.log_check("Dependencies", "Backend requirements", "FAIL", "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt", str(e))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
        try:
            with open("frontend/package.json", "r") as f:
                frontend_deps = json.load(f)
                
            critical_frontend_deps = ["next", "react", "react-dom"]
            missing_frontend_deps = []
            
            for dep in critical_frontend_deps:
                if dep not in frontend_deps.get("dependencies", {}):
                    missing_frontend_deps.append(dep)
            
            if not missing_frontend_deps:
                self.log_check("Dependencies", "Frontend package.json", "PASS", "–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                self.log_check("Dependencies", "Frontend package.json", "FAIL", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_frontend_deps}")
                
        except Exception as e:
            self.log_check("Dependencies", "Frontend package.json", "FAIL", "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json", str(e))
    
    def check_staging_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Staging-–æ–∫—Ä—É–∂–µ–Ω–∏—è - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 6"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 6: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Staging-–æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ staging workflow
        staging_workflow = Path(".github/workflows/deploy-staging.yml")
        if staging_workflow.exists():
            self.log_check("Staging", "Staging workflow", "PASS", "deploy-staging.yml –Ω–∞–π–¥–µ–Ω")
        else:
            self.log_check("Staging", "Staging workflow", "FAIL", "deploy-staging.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        env_files = [".env.example", "env.example"]
        found_env = False
        
        for env_file in env_files:
            if Path(env_file).exists():
                self.log_check("Staging", "Environment —Ñ–∞–π–ª—ã", "PASS", f"{env_file} –Ω–∞–π–¥–µ–Ω")
                found_env = True
                break
        
        if not found_env:
            self.log_check("Staging", "Environment —Ñ–∞–π–ª—ã", "WARNING", "–§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def check_security_audit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 7"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 7: –ù–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ security workflow
        security_workflow = Path(".github/workflows/security-audit.yml")
        if security_workflow.exists():
            self.log_check("Security", "Security workflow", "PASS", "security-audit.yml –Ω–∞–π–¥–µ–Ω")
        else:
            self.log_check("Security", "Security workflow", "WARNING", "security-audit.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã
        try:
            with open("docker-compose.yml", "r") as f:
                docker_content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ hardcoded —Å–µ–∫—Ä–µ—Ç—ã (–Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            hardcoded_patterns = [
                "password=",
                "secret=",
                "key=",
                "token="
            ]
            
            lines = docker_content.split('\n')
            hardcoded_found = []
            
            for line in lines:
                line_lower = line.lower().strip()
                if any(pattern in line_lower for pattern in hardcoded_patterns):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    if not line_lower.startswith(('- ', '  - ')) or '${' not in line:
                        hardcoded_found.append(line.strip())
            
            if hardcoded_found:
                self.log_check("Security", "Hardcoded secrets", "WARNING", f"–ù–∞–π–¥–µ–Ω–æ {len(hardcoded_found)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö hardcoded —Å–µ–∫—Ä–µ—Ç–æ–≤")
            else:
                self.log_check("Security", "Hardcoded secrets", "PASS", "Hardcoded —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            self.log_check("Security", "Hardcoded secrets", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤", str(e))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        try:
            with open(".gitignore", "r") as f:
                gitignore_content = f.read()
                
            security_patterns = [".env", "*.key", "*.pem", "secrets"]
            missing_patterns = []
            
            for pattern in security_patterns:
                if pattern not in gitignore_content:
                    missing_patterns.append(pattern)
            
            if not missing_patterns:
                self.log_check("Security", ".gitignore", "PASS", "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                self.log_check("Security", ".gitignore", "WARNING", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {missing_patterns}")
                
        except Exception as e:
            self.log_check("Security", ".gitignore", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ .gitignore", str(e))
    
    def check_data_processing_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 8"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 8: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ workers
        workers_dir = Path("workers")
        if workers_dir.exists():
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            worker_files = list(workers_dir.rglob("*.py"))
            critical_workers = ["telegram_scraper.py", "reddit_collector.py", "signal_patterns.py"]
            
            found_workers = [f.name for f in worker_files]
            missing_workers = [w for w in critical_workers if w not in found_workers]
            
            if not missing_workers:
                self.log_check("Data Processing", "Workers", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(worker_files)} worker —Ñ–∞–π–ª–æ–≤")
            else:
                self.log_check("Data Processing", "Workers", "WARNING", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_workers}")
        else:
            self.log_check("Data Processing", "Workers", "FAIL", "–ü–∞–ø–∫–∞ workers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ OCR
        try:
            ocr_service = Path("backend/app/services/ocr_service.py")
            if ocr_service.exists():
                self.log_check("Data Processing", "OCR Service", "PASS", "OCR —Å–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω")
            else:
                self.log_check("Data Processing", "OCR Service", "WARNING", "OCR —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log_check("Data Processing", "OCR Service", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OCR", str(e))
    
    def check_user_experience(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Onboarding –∏ User Experience - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 9"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê 9: –ü—Ä–æ–±–ª–µ–º—ã —Å Onboarding –∏ User Experience")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
        readme_files = ["README.md", "docs/README.md"]
        found_readme = False
        
        for readme in readme_files:
            if Path(readme).exists():
                self.log_check("UX", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "PASS", f"{readme} –Ω–∞–π–¥–µ–Ω")
                found_readme = True
                break
        
        if not found_readme:
            self.log_check("UX", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "WARNING", "README.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ onboarding –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        try:
            frontend_pages = Path("frontend/pages")
            if frontend_pages.exists():
                page_files = list(frontend_pages.glob("*.tsx"))
                if page_files:
                    self.log_check("UX", "Frontend —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(page_files)} —Å—Ç—Ä–∞–Ω–∏—Ü")
                else:
                    self.log_check("UX", "Frontend —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "WARNING", "–°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                self.log_check("UX", "Frontend —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "FAIL", "–ü–∞–ø–∫–∞ pages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            self.log_check("UX", "Frontend —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "FAIL", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü", str(e))
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò –ü–†–û–ë–õ–ï–ú –ò–ó –ü–õ–ê–ù–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò")
        print("=" * 80)
        
        start_time = time.time()
        
        self.check_frontend_availability()
        self.check_ml_service_stability()
        self.check_cicd_production()
        self.check_automated_testing()
        self.check_dependencies_stability()
        self.check_staging_environment()
        self.check_security_audit()
        self.check_data_processing_functionality()
        self.check_user_experience()
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total = self.results["total_checks"]
        passed = self.results["passed"]
        failed = self.results["failed"]
        warnings = self.results["warnings"]
        
        success_rate = (passed / total * 100) if total > 0 else 0
        
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò")
        print("=" * 80)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {passed} ({success_rate:.1f}%)")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
        
        if failed == 0:
            print("\nüéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!")
            print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        elif failed <= 2:
            print("\n‚úÖ –•–û–†–û–®–û: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ä–µ—à–µ–Ω—ã")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        if self.results["critical_issues"]:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in self.results["critical_issues"]:
                print(f"   ‚Ä¢ {issue}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"critical_issues_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        return success_rate

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = CriticalIssuesChecker()
    success_rate = checker.run_all_checks()
    return success_rate

if __name__ == "__main__":
    asyncio.run(main())
