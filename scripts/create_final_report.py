#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–¥–∞—á
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Tuple

class FinalReportGenerator:
    def __init__(self):
        self.root = Path.cwd()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        with open(self.root / 'project_analysis.json', 'r', encoding='utf-8') as f:
            self.analysis = json.load(f)
    
    def get_accurate_status(self, task_text: str) -> Tuple[str, str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        task_lower = task_text.lower()
        
        # Frontend –∑–∞–¥–∞—á–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'next.js' in task_lower or 'typescript' in task_lower:
            if self.analysis['frontend']['next.js –ø—Ä–æ–µ–∫—Ç'] and self.analysis['frontend']['typescript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if 'eslint' in task_lower or 'prettier' in task_lower or 'husky' in task_lower:
            if all([
                self.analysis['frontend']['eslint –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'],
                self.analysis['frontend']['prettier –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'],
                self.analysis['frontend']['husky pre-commit']
            ]):
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif any([
                self.analysis['frontend']['eslint –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'],
                self.analysis['frontend']['prettier –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'],
                self.analysis['frontend']['husky pre-commit']
            ]):
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if '–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' in task_lower or 'landing' in task_lower:
            if self.analysis['frontend']['–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in task_lower or '–≤—Ö–æ–¥' in task_lower or 'auth' in task_lower:
            if self.analysis['frontend']['—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞'] and self.analysis['frontend']['—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif self.analysis['frontend']['—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞'] or self.analysis['frontend']['—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']:
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if 'dashboard' in task_lower or '–¥–∞—à–±–æ—Ä–¥' in task_lower:
            if self.analysis['frontend']['–¥–∞—à–±–æ—Ä–¥']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if '–¥–µ–º–æ' in task_lower:
            if self.analysis['frontend']['—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–º–æ']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if 'shadcn' in task_lower or 'ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã' in task_lower:
            if self.analysis['frontend']['ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'] and self.analysis['frontend']['shadcn/ui –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif self.analysis['frontend']['ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã']:
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        # Backend –∑–∞–¥–∞—á–∏
        if 'fastapi' in task_lower or 'backend' in task_lower:
            if self.analysis['backend']['fastapi –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if 'auth endpoints' in task_lower or 'channels endpoints' in task_lower or 'signals endpoints' in task_lower:
            if all([
                self.analysis['backend']['auth endpoints'],
                self.analysis['backend']['channels endpoints'],
                self.analysis['backend']['signals endpoints']
            ]):
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif any([
                self.analysis['backend']['auth endpoints'],
                self.analysis['backend']['channels endpoints'],
                self.analysis['backend']['signals endpoints']
            ]):
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        if '–º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö' in task_lower or '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' in task_lower or 'alembic' in task_lower:
            if self.analysis['backend']['–º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö'] and self.analysis['backend']['–º–∏–≥—Ä–∞—Ü–∏–∏ alembic']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif self.analysis['backend']['–º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö'] or self.analysis['backend']['–º–∏–≥—Ä–∞—Ü–∏–∏ alembic']:
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        # ML Service –∑–∞–¥–∞—á–∏
        if 'ml' in task_lower or 'machine learning' in task_lower:
            if self.analysis['ml_service']['ml —Å–µ—Ä–≤–∏—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        # Workers –∑–∞–¥–∞—á–∏
        if 'celery' in task_lower or 'workers' in task_lower:
            if self.analysis['workers']['celery –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'] and self.analysis['workers']['tasks']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif self.analysis['workers']['tasks']:
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        # Docker –∑–∞–¥–∞—á–∏
        if 'docker' in task_lower or 'docker-compose' in task_lower:
            if self.analysis['docker']['docker-compose.yml'] and self.analysis['docker']['docker-compose.override.yml']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif self.analysis['docker']['docker-compose.yml']:
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        if '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' in task_lower or 'api –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' in task_lower:
            if self.analysis['documentation']['API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']:
                return '‚úÖ', 'IMPL', '–ì–û–¢–û–í–û'
            elif self.analysis['documentation']['README.md']:
                return 'üîÑ', 'PARTIAL', '–ß–ê–°–¢–ò–ß–ù–û'
            return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return '‚¨ú', 'TBD', '–ù–ï –ì–û–¢–û–í–û'
    
    def generate_final_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append('# –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–ê–¢–£–°–£ –ü–†–û–ï–ö–¢–ê')
        report.append('')
        report.append('## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏')
        report.append('')
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        total_components = 0
        implemented_components = 0
        
        for component, items in self.analysis.items():
            total = len(items)
            implemented = sum(1 for v in items.values() if v)
            total_components += total
            implemented_components += implemented
            
            percentage = (implemented / total * 100) if total > 0 else 0
            status_icon = '‚úÖ' if percentage == 100 else 'üîÑ' if percentage > 50 else '‚¨ú'
            
            report.append(f'### {status_icon} {component.upper()}')
            report.append(f'- **–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ:** {implemented}/{total} ({percentage:.1f}%)')
            report.append('')
        
        overall_percentage = (implemented_components / total_components * 100) if total_components > 0 else 0
        report.append(f'### üéØ –û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨: {overall_percentage:.1f}%')
        report.append('')
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        report.append('## üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º')
        report.append('')
        
        for component, items in self.analysis.items():
            report.append(f'### {component.upper()}')
            for item, status in items.items():
                status_icon = '‚úÖ' if status else '‚¨ú'
                report.append(f'- {status_icon} {item}')
            report.append('')
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
        report.append('## üöÄ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø')
        report.append('')
        
        report.append('### üî• –ö–†–ò–¢–ò–ß–ù–û (—Å–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å):')
        if not self.analysis['backend']['fastapi –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']:
            report.append('- ‚¨ú –°–æ–∑–¥–∞—Ç—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (main.py)')
        if not self.analysis['backend']['auth endpoints']:
            report.append('- ‚¨ú –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å auth endpoints')
        if not self.analysis['backend']['channels endpoints']:
            report.append('- ‚¨ú –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å channels endpoints')
        if not self.analysis['backend']['signals endpoints']:
            report.append('- ‚¨ú –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å signals endpoints')
        if not self.analysis['workers']['celery –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']:
            report.append('- ‚¨ú –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Celery –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
        report.append('')
        
        report.append('### ‚ö° –í–ê–ñ–ù–û (—Å–¥–µ–ª–∞—Ç—å –≤–æ –≤—Ç–æ—Ä—É—é –æ—á–µ—Ä–µ–¥—å):')
        if not self.analysis['docker']['docker-compose.override.yml']:
            report.append('- ‚¨ú –°–æ–∑–¥–∞—Ç—å docker-compose.override.yml')
        if not self.analysis['documentation']['API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']:
            report.append('- ‚¨ú –°–æ–∑–¥–∞—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é')
        report.append('')
        
        report.append('### üìù –ñ–ï–õ–ê–¢–ï–õ–¨–ù–û (—Å–¥–µ–ª–∞—Ç—å –≤ —Ç—Ä–µ—Ç—å—é –æ—á–µ—Ä–µ–¥—å):')
        report.append('- ‚¨ú –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã')
        report.append('- ‚¨ú –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
        report.append('- ‚¨ú –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        report.append('')
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append('## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò')
        report.append('')
        report.append('1. **Frontend –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤** - –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend')
        report.append('2. **Backend —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏** - –∫—Ä–∏—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞—Ç—å API endpoints')
        report.append('3. **ML Service –≥–æ—Ç–æ–≤** - –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º')
        report.append('4. **Workers —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤—ã** - –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Celery')
        report.append('5. **Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞** - –Ω—É–∂–µ–Ω override —Ñ–∞–π–ª')
        report.append('')
        
        report.append(f'**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {Path.cwd().stat().st_mtime}')
        
        return '\n'.join(report)

def main():
    generator = FinalReportGenerator()
    report = generator.generate_final_report()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_path = Path.cwd() / 'FINAL_PROJECT_STATUS_REPORT.md'
    report_path.write_text(report, encoding='utf-8')
    
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
    
    return 0

if __name__ == '__main__':
    exit(main())
