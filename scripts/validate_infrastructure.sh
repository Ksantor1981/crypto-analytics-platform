#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_vars() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    required_vars=(
        "POSTGRES_DB"
        "POSTGRES_USER"
        "POSTGRES_PASSWORD"
        "REDIS_URL"
        "SECRET_KEY"
        "DATABASE_URL"
    )

    missing_vars=()

    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done

    if [ ${#missing_vars[@]} -gt 0 ]; then
        log_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        for missing_var in "${missing_vars[@]}"; do
            echo "   - $missing_var"
        done
        log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å —ç—Ç–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"
    else
        log_success "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_docker_config() {
    echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    docker-compose config > /dev/null
    
    if [ $? -eq 0 ]; then
        log_success "Docker-–∫–æ–º–ø–æ–∑ –≤–∞–ª–∏–¥–µ–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ –≤ Docker-–∫–æ–º–ø–æ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ Frontend
check_frontend_types() {
    echo "üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ Frontend..."
    
    cd frontend
    npm run type-check
    
    if [ $? -eq 0 ]; then
        log_success "–¢–∏–ø–∏–∑–∞—Ü–∏—è Frontend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    else
        log_error "–û—à–∏–±–∫–∏ –≤ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ Frontend"
        exit 1
    fi
    cd ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database_migrations() {
    echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    cd backend
    alembic check
    
    if [ $? -eq 0 ]; then
        log_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∏ –≤ –º–∏–≥—Ä–∞—Ü–∏—è—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        exit 1
    fi
    cd ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–æ–≤
check_docker_images() {
    echo "üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–æ–≤..."
    
    docker-compose build --dry-run
    
    if [ $? -eq 0 ]; then
        log_success "–í—Å–µ Docker-–æ–±—Ä–∞–∑—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker-–æ–±—Ä–∞–∑–æ–≤"
        exit 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    check_env_vars
    check_docker_config
    check_frontend_types
    check_database_migrations
    check_docker_images
    
    echo -e "\n${GREEN}üéâ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω–∞!${NC}"
}

main
