#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: —Ü–µ–Ω—ã, —Å–≤–µ—á–∏, —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional
import logging
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ workers –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
workers_path = os.path.join(os.path.dirname(__file__), 'workers')
sys.path.insert(0, workers_path)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
try:
    from exchange.bybit_client import BybitClient, bybit_client
    from real_data_config import CRYPTO_SYMBOLS, SYMBOL_METADATA
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã bybit_client.py –∏ real_data_config.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ø–∞–ø–∫–µ workers")
    sys.exit(1)

class RealDataTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bybit"""
    
    def __init__(self):
        self.bybit_client = None
        self.ml_service_url = "http://localhost:8001"
        self.test_results = {}
        
    async def __aenter__(self):
        self.bybit_client = BybitClient()
        await self.bybit_client.__aenter__()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.bybit_client:
            await self.bybit_client.__aexit__(exc_type, exc_val, exc_tb)
    
    async def test_bybit_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API"""
        print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit...")
        
        try:
            connection_ok = await self.bybit_client.test_connection()
            if connection_ok:
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ")
                self.test_results['connection'] = True
                return True
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
                self.test_results['connection'] = False
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.test_results['connection'] = False
            return False
    
    async def test_current_prices(self) -> Dict[str, Decimal]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
        print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
            test_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT", "DOGEUSDT"]
            prices = await self.bybit_client.get_current_prices(test_symbols)
            
            if prices:
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω –¥–ª—è {len(prices)} –ø–∞—Ä:")
                for symbol, price in prices.items():
                    print(f"      {symbol}: ${price:,.4f}")
                
                self.test_results['prices'] = {
                    'count': len(prices),
                    'symbols': list(prices.keys()),
                    'sample_price': str(prices.get('BTCUSDT', 0))
                }
                return prices
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã")
                self.test_results['prices'] = False
                return {}
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            self.test_results['prices'] = False
            return {}
    
    async def test_klines_data(self) -> Dict[str, List]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π...")
        
        try:
            klines_data = {}
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è Bybit API
            intervals = ["1", "5", "15", "60", "240", "D"]  # 1m, 5m, 15m, 1h, 4h, 1d
            
            for interval in intervals:
                klines = await self.bybit_client.get_klines("BTCUSDT", interval, 24)
                if klines:
                    klines_data[interval] = klines
                    print(f"   ‚úÖ {interval}: {len(klines)} —Å–≤–µ—á–µ–π")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                    if klines:
                        last_kline = klines[-1]
                        print(f"      –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: O:{last_kline['open']:.2f} H:{last_kline['high']:.2f} L:{last_kline['low']:.2f} C:{last_kline['close']:.2f}")
                else:
                    print(f"   ‚ùå {interval}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            self.test_results['klines'] = {
                'intervals': list(klines_data.keys()),
                'total_klines': sum(len(klines) for klines in klines_data.values())
            }
            return klines_data
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}")
            self.test_results['klines'] = False
            return {}
    
    async def test_market_data(self) -> Dict[str, Dict]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            test_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"]
            market_data = await self.bybit_client.get_market_data(test_symbols)
            
            if market_data:
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} –ø–∞—Ä:")
                
                for symbol, data in market_data.items():
                    print(f"      {symbol}:")
                    print(f"        –¶–µ–Ω–∞: ${data['current_price']:,.4f}")
                    print(f"        –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {data.get('change_24h', 0):+.2f}%")
                    print(f"        –û–±—ä–µ–º 24—á: {data.get('volume_24h', 0):,.0f}")
                    print(f"        High 24—á: ${data.get('high_24h', 0):,.4f}")
                    print(f"        Low 24—á: ${data.get('low_24h', 0):,.4f}")
                
                self.test_results['market_data'] = {
                    'count': len(market_data),
                    'symbols': list(market_data.keys())
                }
                return market_data
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                self.test_results['market_data'] = False
                return {}
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.test_results['market_data'] = False
            return {}
    
    async def test_ml_service_integration(self, market_data: Dict) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML-—Å–µ—Ä–≤–∏—Å–∞
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(f"{self.ml_service_url}/api/v1/health/", timeout=5) as response:
                        if response.status == 200:
                            health_data = await response.json()
                            print("   ‚úÖ ML-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
                            print(f"      –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
                            print(f"      –í–µ—Ä—Å–∏—è: {health_data.get('version', 'unknown')}")
                            print(f"      –ú–æ–¥–µ–ª—å: {health_data.get('model_info', {}).get('type', 'unknown')}")
                        else:
                            print(f"   ‚ö†Ô∏è ML-—Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status}")
                            return False
                except Exception as e:
                    print(f"   ‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML-—Å–µ—Ä–≤–∏—Å–∞
            if not market_data:
                print("   ‚ö†Ô∏è –ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML-—Å–µ—Ä–≤–∏—Å–∞")
                return False
            
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ BTCUSDT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            btc_data = market_data.get("BTCUSDT")
            if not btc_data:
                print("   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö BTCUSDT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ ML-—Å–µ—Ä–≤–∏—Å—É
            ml_request = {
                "asset": "BTCUSDT",
                "entry_price": float(btc_data['current_price']),
                "target_price": float(btc_data['current_price']) * 1.02,  # +2% target
                "stop_loss": float(btc_data['current_price']) * 0.98,    # -2% stop loss
                "direction": "LONG"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ML-—Å–µ—Ä–≤–∏—Å—É
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(
                        f"{self.ml_service_url}/api/v1/predictions/predict",
                        json=ml_request,
                        timeout=10
                    ) as response:
                        if response.status == 200:
                            ml_response = await response.json()
                            print("   ‚úÖ ML-—Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å")
                            print(f"      –ü—Ä–æ–≥–Ω–æ–∑: {ml_response.get('prediction', 'N/A')}")
                            print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_response.get('confidence', 'N/A')}")
                            
                            self.test_results['ml_integration'] = True
                            return True
                        else:
                            print(f"   ‚ùå ML-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status}")
                            self.test_results['ml_integration'] = False
                            return False
                            
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ML-—Å–µ—Ä–≤–∏—Å—É: {e}")
                    self.test_results['ml_integration'] = False
                    return False
                    
        except Exception as e:
            print(f"   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML: {e}")
            self.test_results['ml_integration'] = False
            return False
    
    async def test_performance_metrics(self) -> Dict:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            performance_data = {}
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
            start_time = time.time()
            prices = await self.bybit_client.get_current_prices(["BTCUSDT", "ETHUSDT"])
            price_time = time.time() - start_time
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π
            start_time = time.time()
            klines = await self.bybit_client.get_klines("BTCUSDT", "1h", 24)
            kline_time = time.time() - start_time
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            start_time = time.time()
            market_data = await self.bybit_client.get_market_data(["BTCUSDT"])
            market_time = time.time() - start_time
            
            performance_data = {
                'price_request_time': price_time,
                'kline_request_time': kline_time,
                'market_data_time': market_time,
                'total_requests': 3
            }
            
            print(f"   ‚úÖ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω: {price_time:.3f}—Å")
            print(f"   ‚úÖ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–µ–π: {kline_time:.3f}—Å")
            print(f"   ‚úÖ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {market_time:.3f}—Å")
            print(f"   ‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è: {sum([price_time, kline_time, market_time]):.3f}—Å")
            
            self.test_results['performance'] = performance_data
            return performance_data
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.test_results['performance'] = False
            return {}
    
    async def test_data_quality(self, market_data: Dict) -> Dict:
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            quality_report = {
                'total_symbols': len(market_data),
                'valid_prices': 0,
                'valid_volumes': 0,
                'valid_changes': 0,
                'issues': []
            }
            
            for symbol, data in market_data.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
                if data.get('current_price', 0) > 0:
                    quality_report['valid_prices'] += 1
                else:
                    quality_report['issues'].append(f"{symbol}: –Ω–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
                if data.get('volume_24h', 0) >= 0:
                    quality_report['valid_volumes'] += 1
                else:
                    quality_report['issues'].append(f"{symbol}: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                change = data.get('change_24h', 0)
                if -100 <= change <= 1000:  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                    quality_report['valid_changes'] += 1
                else:
                    quality_report['issues'].append(f"{symbol}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {change}%")
            
            print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {quality_report['total_symbols']}")
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω: {quality_report['valid_prices']}")
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤: {quality_report['valid_volumes']}")
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {quality_report['valid_changes']}")
            
            if quality_report['issues']:
                print("   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
                for issue in quality_report['issues']:
                    print(f"      - {issue}")
            else:
                print("   ‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            self.test_results['data_quality'] = quality_report
            return quality_report
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.test_results['data_quality'] = False
            return {}
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() 
                          if result is not False and result is not None)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\n–î–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ—Å—Ç–∞–º:")
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result and result is not False else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"  {test_name}: {status}")
            
            if isinstance(result, dict):
                for key, value in result.items():
                    if isinstance(value, (int, float, str)):
                        print(f"    {key}: {value}")
        
        print("\n" + "="*60)
        
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        
        return passed_tests == total_tests

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• BYBIT")
    print("="*60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    async with RealDataTester() as tester:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        connection_ok = await tester.test_bybit_connection()
        
        if not connection_ok:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        prices = await tester.test_current_prices()
        klines = await tester.test_klines_data()
        market_data = await tester.test_market_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º
        await tester.test_ml_service_integration(market_data)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        await tester.test_performance_metrics()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        await tester.test_data_quality(market_data)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        success = tester.print_summary()
        
        return success

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        exit_code = 0 if success else 1
        exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1) 