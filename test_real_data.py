#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
from datetime import datetime

def test_real_market_data():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    test_sources = [
        {
            "name": "ML Service Mock Data",
            "url": "http://localhost:8001/api/v1/predictions/market-data/BTC"
        },
        {
            "name": "Backend API",
            "url": "http://localhost:8000/api/v1/signals"
        }
    ]
    
    for source in test_sources:
        print(f"\nüìä {source['name']}:")
        try:
            response = requests.get(source['url'], timeout=10)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if source['name'] == "ML Service Mock Data":
                    print(f"   –¶–µ–Ω–∞ BTC: ${data['data']['price']:.2f}")
                    print(f"   –û–±—ä–µ–º: {data['data']['volume']:.0f}")
                    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {data['data']['change_24h']:.2f}%")
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {data['source']}")
                else:
                    print(f"   –î–∞–Ω–Ω—ã–µ: {len(data) if isinstance(data, list) else 'N/A'} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_real_prediction():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
    try:
        response = requests.get("http://localhost:8001/api/v1/predictions/market-data/BTC")
        if response.status_code == 200:
            market_data = response.json()
            current_price = market_data['data']['price']
            
            print(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_price:.2f}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            entry_price = current_price
            target_price = current_price * 1.05  # +5%
            stop_loss = current_price * 0.98     # -2%
            
            prediction_data = {
                "asset": "BTC",
                "entry_price": entry_price,
                "target_price": target_price,
                "stop_loss": stop_loss,
                "direction": "LONG"
            }
            
            print(f"üéØ –°–∏–≥–Ω–∞–ª:")
            print(f"   –í—Ö–æ–¥: ${entry_price:.2f}")
            print(f"   –¶–µ–ª—å: ${target_price:.2f} (+5%)")
            print(f"   –°—Ç–æ–ø: ${stop_loss:.2f} (-2%)")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            response = requests.post(
                "http://localhost:8001/api/v1/predictions/predict",
                json=prediction_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['prediction']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['expected_return']:.1f}%")
                print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result['risk_level']}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'market_data' in result:
                    print(f"üìä –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ:")
                    print(f"   –¶–µ–Ω–∞: ${result['market_data']['price']:.2f}")
                    print(f"   –û–±—ä–µ–º: {result['market_data']['volume']:.0f}")
                    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {result['market_data']['change_24h']:.2f}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.status_code}")
                
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_data_sources():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API (–±–µ–∑ API –∫–ª—é—á–µ–π)
    external_sources = [
        {
            "name": "CoinGecko API (BTC)",
            "url": "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        },
        {
            "name": "Binance Public API (BTCUSDT)",
            "url": "https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT"
        }
    ]
    
    for source in external_sources:
        print(f"\nüåê {source['name']}:")
        try:
            response = requests.get(source['url'], timeout=10)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if 'bitcoin' in data:
                    print(f"   –¶–µ–Ω–∞ BTC: ${data['bitcoin']['usd']:.2f}")
                elif 'price' in data:
                    print(f"   –¶–µ–Ω–∞ BTC: ${float(data['price']):.2f}")
                else:
                    print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 50)
    
    try:
        test_real_market_data()
        test_real_prediction()
        test_data_sources()
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 50)

if __name__ == "__main__":
    main()
