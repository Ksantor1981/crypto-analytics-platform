#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å Telegram, Bybit API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
"""
import asyncio
import sys
import os
sys.path.append('workers')

from workers.real_data_config import *
from workers.exchange.bybit_client import BybitClient
from workers.telegram.telegram_client import TelegramSignalCollector
from workers.exchange.price_monitor import PriceMonitor

async def test_bybit_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bybit API"""
    print("üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bybit API...")
    
    try:
        async with BybitClient() as client:
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_ok = await client.test_connection()
            print(f"   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'OK' if connection_ok else 'FAILED'}")
            
            if connection_ok:
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
                test_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"]
                prices = await client.get_current_prices(test_symbols)
                print(f"   ‚úÖ –¶–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(prices)} —Å–∏–º–≤–æ–ª–æ–≤")
                for symbol, price in prices.items():
                    print(f"      {symbol}: ${price}")
                
                # –¢–µ—Å—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                market_data = await client.get_market_data(["BTCUSDT"])
                if market_data:
                    btc_data = market_data.get("BTCUSDT", {})
                    print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC:")
                    print(f"      –¶–µ–Ω–∞: ${btc_data.get('current_price', 'N/A')}")
                    print(f"      –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {btc_data.get('change_24h', 'N/A'):.2f}%")
                    print(f"      –û–±—ä–µ–º 24—á: {btc_data.get('volume_24h', 'N/A')}")
                
                return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Bybit: {e}")
        
    return False

async def test_telegram_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API...")
    
    try:
        collector = TelegramSignalCollector(use_real_config=True)
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        init_ok = await collector.initialize_client()
        print(f"   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'OK' if init_ok else 'FAILED'}")
        
        if init_ok:
            print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"      API ID: {TELEGRAM_API_ID}")
            print(f"      –ö–∞–Ω–∞–ª—ã: {len(REAL_TELEGRAM_CHANNELS)} —à—Ç")
            print(f"      –°–∏–º–≤–æ–ª—ã: {len(CRYPTO_SYMBOLS)} —à—Ç")
            
            # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (mock)
            test_message = """
            üöÄ BTC/USDT SIGNAL
            Direction: LONG
            Entry: 45000
            Target 1: 46000
            Target 2: 47000
            Stop Loss: 44000
            """
            
            from datetime import datetime
            signal = collector.parse_signal_message(test_message, datetime.now(), "test_channel")
            if signal:
                print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"      –ê–∫—Ç–∏–≤: {signal['asset']}")
                print(f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal['direction']}")
                print(f"      –í—Ö–æ–¥: {signal['entry_price']}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2f}")
            
            return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        
    return False

async def test_price_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
    
    try:
        monitor = PriceMonitor(use_real_data=True)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
        test_symbols = ["BTC/USDT", "ETH/USDT", "ADA/USDT"]
        prices = {}
        
        for symbol in test_symbols:
            price = await monitor.get_current_price(symbol)
            if price:
                prices[symbol] = price
                print(f"   ‚úÖ {symbol}: ${price:.2f}")
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω: {len(prices)}/{len(test_symbols)}")
        
        # –¢–µ—Å—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        market_data = await monitor.get_market_data_real(["BTCUSDT", "ETHUSDT"])
        if market_data:
            print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(market_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return len(prices) > 0
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        
    return False

async def test_full_integration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç Bybit
    results['bybit'] = await test_bybit_integration()
    print()
    
    # –¢–µ—Å—Ç Telegram
    results['telegram'] = await test_telegram_integration()
    print()
    
    # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
    results['price_monitor'] = await test_price_monitor()
    print()
    
    # –ò—Ç–æ–≥–∏
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for component, status in results.items():
        status_text = "‚úÖ PASSED" if status else "‚ùå FAILED"
        print(f"   {component.upper()}: {status_text}")
    
    print()
    print(f"üìä –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    elif passed_tests > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç.")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
    
    return passed_tests, total_tests

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    print(f"üìç –ü—Ä–æ–µ–∫—Ç: crypto-analytics-platform")
    print(f"üîë API –∫–ª—é—á–∏ –∏–∑: analyst_crypto")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    passed, total = await test_full_integration()
    
    print()
    print("üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if passed == total:
        print("   1. ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   2. ‚úÖ –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å ML –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   3. ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    else:
        print("   1. üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API")
        print("   2. üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("   3. üîß –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")

if __name__ == "__main__":
    from datetime import datetime
    asyncio.run(main()) 