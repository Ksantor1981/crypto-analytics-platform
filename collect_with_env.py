#!/usr/bin/env python3
"""
–°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ .env —Ñ–∞–π–ª–∞
"""
import os
import asyncio
from pathlib import Path

def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = Path('.env')
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞...")
    
    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
    return True

async def collect_real_data():
    """–°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        api_id = os.getenv('TELEGRAM_API_ID')
        api_hash = os.getenv('TELEGRAM_API_HASH')
        phone = os.getenv('TELEGRAM_PHONE')
        
        if not phone:
            print("üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7): ").strip()
            os.environ['TELEGRAM_PHONE'] = phone
        
        if not all([api_id, api_hash, phone]):
            print("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ Telegram API –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return 0
        
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   API_ID: {api_id}")
        print(f"   API_HASH: {api_hash[:10]}...")
        print(f"   PHONE: {phone}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä
        try:
            from workers.real_data_collector import RealDataCollector
            print("‚úÖ RealDataCollector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RealDataCollector: {e}")
            return 0
        
        print("\nüì° –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö...")
        collector = RealDataCollector()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ Telegram
        telegram_signals = await collector.collect_from_telegram()
        
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {telegram_signals} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            import sqlite3
            
            conn = sqlite3.connect('workers/signals.db')
            cur = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cur.execute("SELECT COUNT(*) FROM signals")
            total = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM signals WHERE signal_type = 'telegram_real'")
            real = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM signals WHERE signal_type = 'real_demo'")
            demo = cur.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            cur.execute("""
                SELECT channel, COUNT(*) as count 
                FROM signals 
                WHERE signal_type = 'telegram_real'
                GROUP BY channel 
                ORDER BY count DESC
            """)
            channels = cur.fetchall()
            
            conn.close()
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}")
            print(f"   ‚Ä¢ –†–ï–ê–õ–¨–ù–´–• –∏–∑ Telegram: {real}")
            print(f"   ‚Ä¢ –î–µ–º–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {demo}")
            
            if channels:
                print(f"\nüèÜ –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤:")
                for channel, count in channels[:5]:
                    print(f"   ‚Ä¢ {channel}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return telegram_signals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram")
    print("=" * 50)
    
    if not load_env_file():
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    signals = await collect_real_data()
    
    if signals > 0:
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {signals} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤!")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: python start_dashboard.py")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == '__main__':
    asyncio.run(main())
