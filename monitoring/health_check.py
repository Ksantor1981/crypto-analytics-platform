#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import asyncio
import httpx
import redis
import psycopg2
import logging
from datetime import datetime
from typing import Dict, List, Optional
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

class HealthChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.services = {
            'backend': 'http://localhost:8000/health',
            'ml-service': 'http://localhost:8001/health',
            'frontend': 'http://localhost:3000',
            'redis': 'redis://localhost:6379/0',
            'postgres': 'postgresql://crypto_analytics_user:secure_postgres_password_2024!@localhost:5432/crypto_analytics'
        }
        
    async def check_http_service(self, name: str, url: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(url)
                if response.status_code == 200:
                    return {
                        'service': name,
                        'status': 'healthy',
                        'response_time': response.elapsed.total_seconds(),
                        'timestamp': datetime.now().isoformat()
                    }
                else:
                    return {
                        'service': name,
                        'status': 'unhealthy',
                        'error': f'HTTP {response.status_code}',
                        'timestamp': datetime.now().isoformat()
                    }
        except Exception as e:
            return {
                'service': name,
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def check_redis(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis"""
        try:
            r = redis.from_url(self.services['redis'])
            r.ping()
            return {
                'service': 'redis',
                'status': 'healthy',
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            return {
                'service': 'redis',
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def check_postgres(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL"""
        try:
            conn = psycopg2.connect(self.services['postgres'])
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            cursor.fetchone()
            cursor.close()
            conn.close()
            return {
                'service': 'postgres',
                'status': 'healthy',
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            return {
                'service': 'postgres',
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    async def check_all_services(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        results = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å–µ—Ä–≤–∏—Å—ã
        http_tasks = []
        for name, url in self.services.items():
            if name in ['backend', 'ml-service', 'frontend']:
                http_tasks.append(self.check_http_service(name, url))
        
        http_results = await asyncio.gather(*http_tasks, return_exceptions=True)
        results.extend([r for r in http_results if isinstance(r, dict)])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        results.append(self.check_redis())
        results.append(self.check_postgres())
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        healthy_count = sum(1 for r in results if r.get('status') == 'healthy')
        total_count = len(results)
        
        return {
            'overall_status': 'healthy' if healthy_count == total_count else 'degraded',
            'healthy_services': healthy_count,
            'total_services': total_count,
            'services': results,
            'timestamp': datetime.now().isoformat()
        }

class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.alert_history = []
    
    def check_alerts(self, health_data: Dict) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []
        
        for service in health_data.get('services', []):
            if service.get('status') == 'unhealthy':
                alert = {
                    'type': 'service_down',
                    'service': service.get('service'),
                    'message': f"–°–µ—Ä–≤–∏—Å {service.get('service')} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {service.get('error', 'Unknown error')}",
                    'severity': 'high',
                    'timestamp': datetime.now().isoformat()
                }
                alerts.append(alert)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if health_data.get('overall_status') == 'degraded':
            alert = {
                'type': 'system_degraded',
                'message': f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ: {health_data.get('healthy_services')}/{health_data.get('total_services')} —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç",
                'severity': 'medium',
                'timestamp': datetime.now().isoformat()
            }
            alerts.append(alert)
        
        return alerts
    
    def send_alert(self, alert: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        logger.warning(f"ALERT: {alert['message']}")
        self.alert_history.append(alert)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack/Telegram/Email
        # self.send_to_slack(alert)
        # self.send_to_telegram(alert)
        # self.send_email(alert)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    health_checker = HealthChecker()
    alert_manager = AlertManager()
    
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    health_data = await health_checker.check_all_services()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø:")
    print("=" * 50)
    print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health_data['overall_status'].upper()}")
    print(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {health_data['healthy_services']}/{health_data['total_services']}")
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {health_data['timestamp']}")
    print("\n–î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:")
    
    for service in health_data['services']:
        status_icon = "‚úÖ" if service['status'] == 'healthy' else "‚ùå"
        print(f"  {status_icon} {service['service']}: {service['status']}")
        if service.get('error'):
            print(f"      –û—à–∏–±–∫–∞: {service['error']}")
        if service.get('response_time'):
            print(f"      –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {service['response_time']:.3f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    alerts = alert_manager.check_alerts(health_data)
    
    if alerts:
        print(f"\nüö® –ê–õ–ï–†–¢–´ ({len(alerts)}):")
        for alert in alerts:
            print(f"  {alert['severity'].upper()}: {alert['message']}")
            alert_manager.send_alert(alert)
    else:
        print("\n‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç - –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    
    print("=" * 50)
    
    return health_data

if __name__ == "__main__":
    asyncio.run(main())
