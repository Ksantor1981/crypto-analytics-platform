#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""

import asyncio
import time
import logging
import json
from datetime import datetime
from typing import Dict, List
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from health_check import HealthChecker, AlertManager
from performance_metrics import PerformanceMetrics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("monitoring.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MonitoringSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.health_checker = HealthChecker()
        self.alert_manager = AlertManager()
        self.performance_metrics = PerformanceMetrics()
        self.monitoring_data = []
        
    async def run_health_check(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è...")
        
        health_data = await self.health_checker.check_all_services()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        alerts = self.alert_manager.check_alerts(health_data)
        for alert in alerts:
            self.alert_manager.send_alert(alert)
        
        return health_data
    
    async def run_performance_check(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = self.performance_metrics.get_system_metrics()
        api_metrics = await self.performance_metrics.get_api_metrics()
        db_metrics = self.performance_metrics.get_database_metrics()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.performance_metrics.save_metrics(system_metrics, api_metrics, db_metrics)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = self.performance_metrics.get_metrics_summary(hours=1)
        
        return {
            'system_metrics': system_metrics,
            'api_metrics': api_metrics,
            'db_metrics': db_metrics,
            'summary': summary
        }
    
    def generate_report(self, health_data: Dict, performance_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'health': health_data,
            'performance': performance_data,
            'alerts': self.alert_manager.alert_history[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–ª–µ—Ä—Ç–æ–≤
            'status': 'healthy' if health_data.get('overall_status') == 'healthy' else 'degraded'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        self.monitoring_data.append(report)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.monitoring_data) > 100:
            self.monitoring_data = self.monitoring_data[-100:]
        
        return report
    
    def print_report(self, report: Dict):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("="*60)
        print(f"–í—Ä–µ–º—è: {report['timestamp']}")
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['status'].upper()}")
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        health = report['health']
        print(f"\nüè• –ó–î–û–†–û–í–¨–ï –°–ï–†–í–ò–°–û–í:")
        print(f"  –°—Ç–∞—Ç—É—Å: {health.get('overall_status', 'unknown')}")
        print(f"  –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {health.get('healthy_services', 0)}/{health.get('total_services', 0)}")
        
        for service in health.get('services', []):
            status_icon = "‚úÖ" if service['status'] == 'healthy' else "‚ùå"
            print(f"    {status_icon} {service['service']}: {service['status']}")
            if service.get('response_time'):
                print(f"      –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {service['response_time']:.3f}—Å")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf = report['performance']
        if perf.get('system_metrics'):
            sys_metrics = perf['system_metrics']
            print(f"\nüíª –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
            print(f"  CPU: {sys_metrics.get('cpu_percent', 0):.1f}%")
            print(f"  –ü–∞–º—è—Ç—å: {sys_metrics.get('memory_percent', 0):.1f}%")
            print(f"  –î–∏—Å–∫: {sys_metrics.get('disk_usage_percent', 0):.1f}%")
        
        if perf.get('api_metrics'):
            print(f"\nüåê API –ú–ï–¢–†–ò–ö–ò:")
            for metric in perf['api_metrics']:
                endpoint = metric['endpoint'].split('/')[-1]
                status = "‚úÖ" if metric.get('status_code') == 200 else "‚ùå"
                response_time = metric.get('response_time', 0)
                print(f"  {status} {endpoint}: {response_time:.3f}—Å")
        
        # –ê–ª–µ—Ä—Ç—ã
        alerts = report.get('alerts', [])
        if alerts:
            print(f"\nüö® –ü–û–°–õ–ï–î–ù–ò–ï –ê–õ–ï–†–¢–´ ({len(alerts)}):")
            for alert in alerts[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–ª–µ—Ä—Ç–æ–≤
                print(f"  {alert['severity'].upper()}: {alert['message']}")
        else:
            print(f"\n‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
        
        print("="*60)
    
    async def run_monitoring_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            health_data = await self.run_health_check()
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_data = await self.run_performance_check()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.generate_report(health_data, performance_data)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
            self.print_report(report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            self.save_report_to_file(report)
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return None
    
    def save_report_to_file(self, report: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"report_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def run_continuous_monitoring(self, interval_seconds: int = 60):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds}—Å)")
        
        cycle_count = 0
        
        while True:
            try:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ #{cycle_count}")
                
                await self.run_monitoring_cycle()
                
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(interval_seconds)
                
            except KeyboardInterrupt:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    os.makedirs(".", exist_ok=True)
    
    monitoring_system = MonitoringSystem()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    report = await monitoring_system.run_monitoring_cycle()
    
    if report:
        print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")

if __name__ == "__main__":
    asyncio.run(main())
