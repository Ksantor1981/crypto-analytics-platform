#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, Any

class Block4Demo:
    def __init__(self):
        self.backend_url = "http://localhost:8000"
        self.ml_service_url = "http://localhost:8001"
        self.results = {}
        
    async def demo_backend_integration(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±—ç–∫–µ–Ω–¥–∞"""
        print("üîß –î–ï–ú–û: Backend Integration")
        print("-" * 40)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # Health check
                response = await client.get(f"{self.backend_url}/health")
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ Backend Status: {data.get('status', 'unknown')}")
                    print(f"   Version: {data.get('version', 'N/A')}")
                    print(f"   Timestamp: {data.get('timestamp', 'N/A')}")
                
                # API endpoints
                endpoints = ["/api/v1/channels/", "/api/v1/signals/", "/api/v1/users/"]
                for endpoint in endpoints:
                    response = await client.get(f"{self.backend_url}{endpoint}")
                    status = "‚úÖ" if response.status_code in [200, 401, 403] else "‚ùå"
                    print(f"{status} {endpoint}: {response.status_code}")
                
                self.results['backend'] = True
                
        except Exception as e:
            print(f"‚ùå Backend Error: {str(e)}")
            self.results['backend'] = False
    
    async def demo_ml_service_integration(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ML-—Å–µ—Ä–≤–∏—Å–∞"""
        print("\nü§ñ –î–ï–ú–û: ML Service Integration")
        print("-" * 40)
        
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                # Health check
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ ML Service Status: {data.get('status', 'unknown')}")
                    print(f"   Model Version: {data.get('model_info', {}).get('version', 'N/A')}")
                    print(f"   Model Type: {data.get('model_info', {}).get('type', 'N/A')}")
                
                # Prediction demo
                test_signal = {
                    "asset": "BTCUSDT",
                    "direction": "LONG",
                    "entry_price": 45000.0,
                    "target_price": 47000.0,
                    "stop_loss": 43000.0,
                    "channel_id": 1,
                    "channel_accuracy": 0.75,
                    "confidence": 0.8
                }
                
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json=test_signal
                )
                
                if response.status_code == 200:
                    prediction = response.json()
                    print(f"‚úÖ ML Prediction:")
                    print(f"   Recommendation: {prediction.get('recommendation', 'N/A')}")
                    print(f"   Confidence: {prediction.get('confidence', 'N/A')}")
                    print(f"   Success Probability: {prediction.get('success_probability', 'N/A')}")
                
                # Market data demo
                response = await client.get(f"{self.ml_service_url}/api/v1/predictions/market-data/BTCUSDT")
                if response.status_code == 200:
                    market_data = response.json()
                    print(f"‚úÖ Real Market Data:")
                    print(f"   Current Price: ${market_data.get('current_price', 'N/A')}")
                    print(f"   24h Change: {market_data.get('change_24h', 'N/A')}%")
                
                self.results['ml_service'] = True
                
        except Exception as e:
            print(f"‚ùå ML Service Error: {str(e)}")
            self.results['ml_service'] = False
    
    async def demo_performance_metrics(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –î–ï–ú–û: Performance Metrics")
        print("-" * 40)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                import time
                
                # Backend performance
                start_time = time.time()
                response = await client.get(f"{self.backend_url}/health")
                backend_time = time.time() - start_time
                
                # ML service performance
                start_time = time.time()
                response = await client.get(f"{self.ml_service_url}/api/v1/health/")
                ml_time = time.time() - start_time
                
                print(f"‚úÖ Backend Response Time: {backend_time:.3f}s")
                print(f"‚úÖ ML Service Response Time: {ml_time:.3f}s")
                print(f"‚úÖ Total System Latency: {backend_time + ml_time:.3f}s")
                
                # Performance assessment
                if backend_time < 0.1 and ml_time < 0.5:
                    print("üéâ Performance: EXCELLENT")
                elif backend_time < 0.2 and ml_time < 1.0:
                    print("‚úÖ Performance: GOOD")
                else:
                    print("‚ö†Ô∏è Performance: NEEDS OPTIMIZATION")
                
                self.results['performance'] = True
                
        except Exception as e:
            print(f"‚ùå Performance Test Error: {str(e)}")
            self.results['performance'] = False
    
    async def demo_error_handling(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüõ°Ô∏è –î–ï–ú–û: Error Handling")
        print("-" * 40)
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                # Test 404 handling
                response = await client.get(f"{self.backend_url}/api/v1/nonexistent/")
                if response.status_code == 404:
                    print("‚úÖ 404 Error Handling: WORKING")
                else:
                    print(f"‚ö†Ô∏è Unexpected 404 response: {response.status_code}")
                
                # Test invalid data handling
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    json={"invalid": "data"}
                )
                if response.status_code in [422, 400]:
                    print("‚úÖ Data Validation: WORKING")
                else:
                    print(f"‚ö†Ô∏è Unexpected validation response: {response.status_code}")
                
                # Test malformed JSON
                response = await client.post(
                    f"{self.ml_service_url}/api/v1/predictions/predict",
                    content="invalid json"
                )
                if response.status_code in [422, 400]:
                    print("‚úÖ JSON Validation: WORKING")
                else:
                    print(f"‚ö†Ô∏è Unexpected JSON response: {response.status_code}")
                
                self.results['error_handling'] = True
                
        except Exception as e:
            print(f"‚ùå Error Handling Test Error: {str(e)}")
            self.results['error_handling'] = False
    
    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ë–õ–û–ö–ê 4")
        print("="*60)
        
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() if result)
        success_rate = passed_tests / total_tests if total_tests > 0 else 0
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {passed_tests}/{total_tests} ({success_rate:.1%})")
        print()
        
        for test_name, result in self.results.items():
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            print(f"{status} {test_name}")
        
        print()
        
        if success_rate >= 0.8:
            print("üéâ –ë–õ–û–ö 4 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print("   –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        elif success_rate >= 0.6:
            print("‚ö†Ô∏è –ë–õ–û–ö 4 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            print("   –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        else:
            print("üö® –ë–õ–û–ö 4 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ë–ª–æ–∫ 5 - Auto-trading")
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê 4")
        print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("="*60)
        
        demos = [
            self.demo_backend_integration,
            self.demo_ml_service_integration,
            self.demo_performance_metrics,
            self.demo_error_handling
        ]
        
        for demo in demos:
            try:
                await demo()
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–º–æ
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {str(e)}")
        
        self.generate_summary()

async def main():
    demo = Block4Demo()
    await demo.run_demo()

if __name__ == "__main__":
    asyncio.run(main()) 