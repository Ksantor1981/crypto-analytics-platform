#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def run_auto_collection():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ë–û–†–ê –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞
        from workers.telegram.telegram_client import collect_telegram_signals_sync
        
        print("üì° –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä
        result = collect_telegram_signals_sync()
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"   –°–∏–≥–Ω–∞–ª–æ–≤: {result.get('total_signals', 0)}")
        
        if result.get('signals'):
            print(f"\nüìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for i, signal in enumerate(result['signals'][:5], 1):
                print(f"   {i}. {signal.get('asset', 'N/A')} {signal.get('direction', 'N/A')}")
                print(f"      –í—Ö–æ–¥: ${signal.get('entry_price', 'N/A')}")
                print(f"      –ö–∞–Ω–∞–ª: {signal.get('channel', 'N/A')}")
                print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        import sqlite3
        conn = sqlite3.connect('backend/crypto_analytics.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM signals")
        total_signals = cursor.fetchone()[0]
        conn.close()
        
        print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î: {total_signals}")
        
        print("\n" + "=" * 50)
        if result.get('status') == 'success':
            print("üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–† –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print("‚ö†Ô∏è –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        print("=" * 50)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("=" * 50)

if __name__ == "__main__":
    run_auto_collection()
