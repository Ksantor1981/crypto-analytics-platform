#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram
"""
import os
import asyncio
from pathlib import Path

def check_telegram_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Telegram API"""
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    if not all([api_id, api_hash, phone]):
        print("‚ùå Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_telegram.py")
        return False
    
    print("‚úÖ Telegram API –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True

async def collect_telegram_data():
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram"""
    try:
        from workers.real_data_collector import RealDataCollector
        
        print("üì° –°–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram...")
        collector = RealDataCollector()
        
        signals_count = await collector.collect_from_telegram()
        
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {signals_count} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤")
        return signals_count
        
    except ImportError:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
        return 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {e}")
        return 0

def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        import sqlite3
        
        conn = sqlite3.connect('workers/signals.db')
        cur = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cur.execute("SELECT COUNT(*) FROM signals")
        total = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM signals WHERE signal_type = 'telegram_real'")
        real = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM signals WHERE signal_type = 'real_demo'")
        demo = cur.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        cur.execute("""
            SELECT channel, COUNT(*) as count 
            FROM signals 
            WHERE signal_type = 'telegram_real'
            GROUP BY channel 
            ORDER BY count DESC
        """)
        channels = cur.fetchall()
        
        conn.close()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}")
        print(f"   ‚Ä¢ –†–ï–ê–õ–¨–ù–´–• –∏–∑ Telegram: {real}")
        print(f"   ‚Ä¢ –î–µ–º–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {demo}")
        
        if channels:
            print(f"\nüèÜ –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤:")
            for channel, count in channels[:5]:
                print(f"   ‚Ä¢ {channel}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    if not check_telegram_api():
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    signals = await collect_telegram_data()
    
    if signals > 0:
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {signals} –†–ï–ê–õ–¨–ù–´–• —Å–∏–≥–Ω–∞–ª–æ–≤!")
        show_statistics()
        print("\n‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: python start_dashboard.py")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == '__main__':
    asyncio.run(main())
