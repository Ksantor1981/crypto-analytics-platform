#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
from bs4 import BeautifulSoup
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

async def check_telegram_web_extended(channel_username: str, max_messages: int = 50) -> List[Dict[str, Any]]:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = channel_username.replace('@', '')
    
    # URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞
    url = f"https://t.me/s/{username}"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=15) as response:
                if response.status == 200:
                    html = await response.text()
                    return parse_telegram_messages_extended(html, channel_username, max_messages)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –¥–ª—è {channel_username}")
                    return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {channel_username}: {e}")
        return []

def parse_telegram_messages_extended(html: str, channel_username: str, max_messages: int) -> List[Dict[str, Any]]:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    soup = BeautifulSoup(html, 'html.parser')
    messages = []
    
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    message_elements = soup.find_all('div', class_='tgme_widget_message')
    
    for msg in message_elements[:max_messages]:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_elem = msg.find('div', class_='tgme_widget_message_text')
            if text_elem:
                text = text_elem.get_text(strip=True)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                time_elem = msg.find('time')
                full_datetime = None
                if time_elem and time_elem.get('datetime'):
                    full_datetime = time_elem.get('datetime')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –¥–∞—Ç—É
                date_elem = msg.find('a', class_='tgme_widget_message_date')
                display_date = None
                if date_elem:
                    display_date = date_elem.get_text(strip=True)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                message_id = None
                message_link = msg.find('a', class_='tgme_widget_message_date')
                if message_link and message_link.get('href'):
                    href = message_link.get('href')
                    if '/' in href:
                        message_id = href.split('/')[-1]
                
                if text and len(text) > 5:  # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages.append({
                        'channel': channel_username,
                        'text': text,
                        'full_datetime': full_datetime,
                        'display_date': display_date,
                        'message_id': message_id,
                        'length': len(text)
                    })
        except Exception as e:
            continue
    
    return messages

def format_datetime(full_datetime: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not full_datetime:
        return "N/A"
    
    try:
        # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç
        dt = datetime.fromisoformat(full_datetime.replace('Z', '+00:00'))
        now = datetime.now(dt.tzinfo)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        diff = now - dt
        
        if diff.days > 0:
            return f"{dt.strftime('%d.%m.%Y –≤ %H:%M')} ({diff.days} –¥–Ω. –Ω–∞–∑–∞–¥)"
        elif diff.seconds >= 3600:
            hours = diff.seconds // 3600
            return f"{dt.strftime('%d.%m.%Y –≤ %H:%M')} ({hours} —á. –Ω–∞–∑–∞–¥)"
        else:
            minutes = diff.seconds // 60
            return f"{dt.strftime('%d.%m.%Y –≤ %H:%M')} ({minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥)"
    except:
        return full_datetime

def check_for_trading_signals(text: str) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_patterns = [
        r'\b(BTC|ETH|SOL|DOGE|ADA|XRP|BNB|MATIC|LINK|UNI|TRX|TON|ENS|ENA)\b',
        r'\b(LONG|SHORT|BUY|SELL)\b',
        r'\b(Entry|Target|TP|SL|Stop Loss)\b',
        r'\$[\d,]+',
        r'\b\d+\.?\d*\b',
        r'üöÄ|üìà|üìâ|üéØ|üõë|üìç|‚úÖ|üî•|üíé|‚ö°Ô∏è',
        r'\bSIGNAL\b',
        r'\bTake-Profit\b',
        r'\bProfit\b',
        r'\bUSDT\b'
    ]
    
    text_upper = text.upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    matches = 0
    for pattern in signal_patterns:
        if re.search(pattern, text_upper):
            matches += 1
    
    return matches >= 2

def check_for_recent_signals(messages: List[Dict[str, Any]], days_threshold: int = 3) -> List[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
    
    recent_signals = []
    now = datetime.now()
    
    for msg in messages:
        if msg.get('full_datetime'):
            try:
                dt = datetime.fromisoformat(msg['full_datetime'].replace('Z', '+00:00'))
                diff = now - dt
                
                if diff.days <= days_threshold and check_for_trading_signals(msg['text']):
                    recent_signals.append(msg)
            except:
                continue
    
    return recent_signals

async def check_channels_improved():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = [
        "binancekillers",
        "CryptoCapoTG", 
        "io_altsignals",
        "Wolf_of_Trading_singals",
        "fatpigsignals",
        "Signals_BTC_ETH",
        "cryptoceo_alex",  # –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª
        "Crypto_Futures_Signals",
        "TradingViewIdeas",
        "Crypto_Inner_Circler"
    ]
    
    print("üîç –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("="*120)
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
    print("="*120)
    
    all_recent_signals = []
    
    for channel in channels:
        print(f"\nüì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: @{channel}")
        messages = await check_telegram_web_extended(channel, max_messages=50)
        
        if messages:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            # –ò—â–µ–º —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
            recent_signals = check_for_recent_signals(messages, days_threshold=3)
            
            if recent_signals:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(recent_signals)}")
                all_recent_signals.extend(recent_signals)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                for i, signal in enumerate(recent_signals, 1):
                    formatted_date = format_datetime(signal.get('full_datetime'))
                    print(f"   {i}. {formatted_date}")
                    print(f"      ID: {signal.get('message_id', 'N/A')}")
                    print(f"      –¢–µ–∫—Å—Ç: {signal['text'][:100]}...")
            else:
                print("‚ùå –°–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                for i, msg in enumerate(messages[:3], 1):
                    formatted_date = format_datetime(msg.get('full_datetime'))
                    print(f"   {i}. {formatted_date}")
                    print(f"      ID: {msg.get('message_id', 'N/A')}")
                    print(f"      –¢–µ–∫—Å—Ç: {msg['text'][:80]}...")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*120}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–í–ï–ñ–ò–• –°–ò–ì–ù–ê–õ–û–í")
    print(f"{'='*120}")
    
    if all_recent_signals:
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_recent_signals)}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        all_recent_signals.sort(key=lambda x: x.get('full_datetime', ''), reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        for i, msg in enumerate(all_recent_signals, 1):
            formatted_date = format_datetime(msg.get('full_datetime'))
            print(f"\nüîç –°–í–ï–ñ–ò–ô –°–ò–ì–ù–ê–õ #{i}")
            print(f"üì∫ –ö–∞–Ω–∞–ª: @{msg['channel']}")
            print(f"‚è∞ –î–∞—Ç–∞: {formatted_date}")
            print(f"üÜî ID: {msg.get('message_id', 'N/A')}")
            print(f"üìù –¢–µ–∫—Å—Ç: {msg['text']}")
            print(f"üìè –î–ª–∏–Ω–∞: {msg['length']} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("‚ùå –°–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ö–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ")
        print("   - –°–∏–≥–Ω–∞–ª—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        print("   - –°–∏–≥–Ω–∞–ª—ã –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")
        print("   - –ù—É–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üö® –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•!")
    print("–ò—â–µ–º —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è...")
    
    await check_channels_improved()
    
    print(f"\n{'='*120}")
    print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print(f"{'='*120}")
    print("1. üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é")
    print("2. üñºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    print("3. üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    print("4. üìÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –Ω–∞ –±–∏—Ä–∂–∞—Ö")

if __name__ == "__main__":
    asyncio.run(main())
