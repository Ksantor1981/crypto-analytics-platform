"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ analyst_crypto
"""

import sys
import os
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_signal_extractor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Signal Extractor"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Signal Extractor...")
        
        from workers.shared.parsers.signal_extractor_migrated import MigratedSignalExtractor
        
        extractor = MigratedSignalExtractor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        test_texts = [
            "üöÄ BTC LONG Entry: $45,000 Target: $48,000 SL: $42,000",
            "ETH SHORT @ 3200 TP: 3000 SL: 3300",
            "SOL/USDT BUY Entry: 100 Target: 120 Stop Loss: 95",
            "üìà Bitcoin Long Entry: 45000 Target: 48000 Stop: 42000",
            "üìâ Ethereum Short @ 3200 TP: 3000 SL: 3300",
            "DOGE LONG Entry: 0.15 Target: 0.18 SL: 0.12"
        ]
        
        total_signals = 0
        successful_extractions = 0
        
        for i, text in enumerate(test_texts, 1):
            logger.info(f"\nüìù –¢–µ—Å—Ç {i}: {text}")
            
            signals = extractor.extract_from_text(text)
            
            if signals:
                successful_extractions += 1
                for signal in signals:
                    total_signals += 1
                    logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.asset} {signal.direction}")
                    logger.info(f"   Entry: {signal.entry_price}, Target: {signal.target_price}, SL: {signal.stop_loss}")
                    logger.info(f"   Confidence: {signal.confidence_score}%")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–∏–≥–Ω–∞–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ {i}")
        
        success_rate = (successful_extractions / len(test_texts)) * 100
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Signal Extractor:")
        logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(test_texts)}")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π: {successful_extractions}")
        logger.info(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        return success_rate >= 80  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Signal Extractor: {e}")
        return False

def test_telegram_channels_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤...")
        
        import json
        config_path = Path(__file__).parent.parent / "database" / "seeds" / "telegram_channels.json"
        
        if not config_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return False
        
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        channels = config.get('telegram_channels', {}).get('channels', [])
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        
        for channel in channels:
            logger.info(f"   üì∫ {channel.get('name')} (@{channel.get('username')})")
            logger.info(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {channel.get('category')}")
            logger.info(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {channel.get('priority')}")
            logger.info(f"      –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {channel.get('expected_accuracy')}")
            logger.info(f"      –°—Ç–∞—Ç—É—Å: {channel.get('status')}")
        
        return len(channels) > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return False

def test_telegram_collector_structure():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram Collector"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram Collector...")
        
        from workers.telegram.telegram_collector_migrated import MigratedTelegramCollector, CHANNELS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        logger.info(f"üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(CHANNELS)}")
        for channel in CHANNELS:
            logger.info(f"   - {channel}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        collector_class = MigratedTelegramCollector
        required_methods = [
            'process_message',
            'extract_signal_from_text', 
            'parse_forecast',
            'extract_entry_price',
            'extract_stop_loss',
            'calculate_confidence',
            'start_collection'
        ]
        
        missing_methods = []
        for method in required_methods:
            if not hasattr(collector_class, method):
                missing_methods.append(method)
        
        if missing_methods:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {missing_methods}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram Collector: {e}")
        return False

def test_celery_tasks():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery tasks"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery tasks...")
        
        from workers.telegram.telegram_tasks import (
            start_telegram_collector,
            process_telegram_message,
            test_telegram_connection,
            get_telegram_channels_status
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö tasks
        tasks = [
            start_telegram_collector,
            process_telegram_message,
            test_telegram_connection,
            get_telegram_channels_status
        ]
        
        for task in tasks:
            if not hasattr(task, 'delay'):
                logger.error(f"‚ùå Task {task.__name__} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Celery task")
                return False
        
        logger.info("‚úÖ –í—Å–µ Celery tasks –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Celery tasks: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    tests = [
        ("Signal Extractor", test_signal_extractor),
        ("Telegram Channels Config", test_telegram_channels_config),
        ("Telegram Collector Structure", test_telegram_collector_structure),
        ("Celery Tasks", test_celery_tasks),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–ï–°–¢: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"   {test_name}: {status}")
    
    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return True
    else:
        logger.error(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
