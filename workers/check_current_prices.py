#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""

import aiohttp
import asyncio
import json
from datetime import datetime

async def get_crypto_price(symbol: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd&include_24hr_change=true"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    return {"error": f"Status {response.status}"}
    except Exception as e:
        return {"error": str(e)}

def get_coin_id(symbol: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ ID –¥–ª—è CoinGecko"""
    
    coin_mapping = {
        "BTC": "bitcoin",
        "ETH": "ethereum", 
        "SOL": "solana",
        "UNI": "uniswap",
        "TRX": "tron",
        "TON": "the-open-network",
        "DOGE": "dogecoin",
        "ADA": "cardano",
        "XRP": "ripple",
        "BNB": "binancecoin",
        "MATIC": "matic-network",
        "LINK": "chainlink"
    }
    
    return coin_mapping.get(symbol.upper(), symbol.lower())

async def check_prices_from_signals():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    symbols = ["SOL", "UNI", "TRX", "TON", "BTC", "ETH"]
    
    print("üí∞ –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–£–ê–õ–¨–ù–´–• –¶–ï–ù –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢")
    print("="*60)
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
    print("="*60)
    
    prices = {}
    
    for symbol in symbols:
        coin_id = get_coin_id(symbol)
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {symbol}...")
        
        price_data = await get_crypto_price(coin_id)
        
        if "error" not in price_data and coin_id in price_data:
            price = price_data[coin_id]["usd"]
            change_24h = price_data[coin_id].get("usd_24h_change", 0)
            
            prices[symbol] = {
                "price": price,
                "change_24h": change_24h
            }
            
            change_emoji = "üìà" if change_24h > 0 else "üìâ"
            print(f"   üíµ {symbol}: ${price:,.2f} {change_emoji} {change_24h:+.2f}%")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    print(f"\n{'='*60}")
    print(f"üìä –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í –° –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –¶–ï–ù–ê–ú–ò")
    print(f"{'='*60}")
    
    # –°–∏–≥–Ω–∞–ª—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    real_signals = [
        {
            "symbol": "SOL",
            "signal": "SHORT Target 1: 200, Target 2: 195",
            "channel": "Binance Killers",
            "time": "12:40"
        },
        {
            "symbol": "SOL", 
            "signal": "$170-200 target was reached. Now bearish",
            "channel": "CryptoCapo TG",
            "time": "06:49"
        },
        {
            "symbol": "UNI",
            "signal": "Take-Profit target 5 ‚úÖ Profit: 37.60%",
            "channel": "Fat Pig Signals", 
            "time": "20:39"
        }
    ]
    
    for signal in real_signals:
        symbol = signal["symbol"]
        if symbol in prices:
            current_price = prices[symbol]["price"]
            change_24h = prices[symbol]["change_24h"]
            
            print(f"\nüéØ {symbol} - {signal['channel']} ({signal['time']})")
            print(f"   üìù –°–∏–≥–Ω–∞–ª: {signal['signal']}")
            print(f"   üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
            print(f"   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {change_24h:+.2f}%")
            
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            if "SHORT" in signal["signal"] and change_24h < 0:
                print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª –∞–∫—Ç—É–∞–ª–µ–Ω - —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç")
            elif "LONG" in signal["signal"] and change_24h > 0:
                print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª –∞–∫—Ç—É–∞–ª–µ–Ω - —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç")
            else:
                print(f"   ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üö® –ü–†–û–í–ï–†–Ø–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –¶–ï–ù –í –°–ò–ì–ù–ê–õ–ê–•!")
    
    await check_prices_from_signals()
    
    print(f"\n{'='*60}")
    print(f"üí° –í–´–í–û–î–´")
    print(f"{'='*60}")
    print("1. ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö")
    print("2. ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —Å CoinGecko")
    print("3. ‚úÖ –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏")
    print("4. ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

if __name__ == "__main__":
    asyncio.run(main())
