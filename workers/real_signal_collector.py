"""
–†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChannelType(Enum):
    SIGNAL = "signal"           # –ö–∞–Ω–∞–ª—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
    ANALYSIS = "analysis"       # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
    NEWS = "news"              # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    MIXED = "mixed"            # –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

class SignalQuality(Enum):
    HIGH = "high"              # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (—Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)
    MEDIUM = "medium"          # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    LOW = "low"                # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    UNKNOWN = "unknown"        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

@dataclass
class TelegramChannel:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –∫–∞–Ω–∞–ª–µ"""
    username: str
    title: str
    channel_type: ChannelType
    signal_quality: SignalQuality
    is_subscribed: bool
    last_activity: datetime
    signal_frequency: float  # –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
    success_rate: float      # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    languages: List[str]
    active: bool = True

@dataclass
class Signal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    trading_pair: str
    direction: str  # LONG/SHORT
    entry_price: float
    target_price: float
    stop_loss: float
    confidence: float
    source_channel: str
    message_id: str
    timestamp: datetime
    quality_score: float
    is_executed: bool = False
    result: Optional[str] = None  # SUCCESS/FAILURE/PENDING

class RealSignalCollector:
    """
    –†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self):
        # –ë–∞–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        self.known_channels = self._load_known_channels()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_stats = {}
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = {
            'min_confidence': 0.7,
            'max_channels_per_run': 50,
            'check_interval_minutes': 15,
            'signal_expiry_hours': 48
        }
    
    def _load_known_channels(self) -> List[TelegramChannel]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        # –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        channels = [
            TelegramChannel(
                username="signalsbitcoinandethereum",
                title="Bitcoin & Ethereum Signals",
                channel_type=ChannelType.SIGNAL,
                signal_quality=SignalQuality.MEDIUM,
                is_subscribed=True,
                last_activity=datetime.now(),
                signal_frequency=5.0,
                success_rate=0.65,
                languages=["en"]
            ),
            TelegramChannel(
                username="CryptoCapoTG",
                title="CryptoCapo",
                channel_type=ChannelType.ANALYSIS,
                signal_quality=SignalQuality.HIGH,
                is_subscribed=True,
                last_activity=datetime.now(),
                signal_frequency=2.0,
                success_rate=0.75,
                languages=["en"]
            ),
            TelegramChannel(
                username="binancesignals",
                title="Binance Trading Signals",
                channel_type=ChannelType.SIGNAL,
                signal_quality=SignalQuality.HIGH,
                is_subscribed=False,
                last_activity=datetime.now() - timedelta(days=1),
                signal_frequency=8.0,
                success_rate=0.70,
                languages=["en"]
            ),
            TelegramChannel(
                username="cryptosignals",
                title="Crypto Signals Pro",
                channel_type=ChannelType.SIGNAL,
                signal_quality=SignalQuality.MEDIUM,
                is_subscribed=True,
                last_activity=datetime.now(),
                signal_frequency=12.0,
                success_rate=0.60,
                languages=["en", "ru"]
            ),
            TelegramChannel(
                username="altcoinsignals",
                title="Altcoin Trading Hub",
                channel_type=ChannelType.SIGNAL,
                signal_quality=SignalQuality.LOW,
                is_subscribed=False,
                last_activity=datetime.now() - timedelta(hours=6),
                signal_frequency=15.0,
                success_rate=0.45,
                languages=["en"]
            )
        ]
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channels)} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        return channels
    
    def get_active_channels(self) -> List[TelegramChannel]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        return [ch for ch in self.known_channels if ch.active and ch.is_subscribed]
    
    def get_channels_by_type(self, channel_type: ChannelType) -> List[TelegramChannel]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ç–∏–ø—É"""
        return [ch for ch in self.known_channels if ch.channel_type == channel_type]
    
    def get_high_quality_channels(self) -> List[TelegramChannel]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        return [ch for ch in self.known_channels 
                if ch.signal_quality == SignalQuality.HIGH and ch.active]
    
    async def discover_new_channels(self) -> List[TelegramChannel]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        """
        logger.info("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º –∏ —Ç.–¥.
        
        new_channels = []
        
        # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        search_keywords = [
            "crypto signals", "trading signals", "bitcoin signals",
            "crypto analysis", "trading alerts", "crypto alerts"
        ]
        
        for keyword in search_keywords:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            logger.info(f"–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
            
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Telegram API
        
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_channels)} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        return new_channels
    
    async def analyze_channel_content(self, channel: TelegramChannel) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: {channel.username}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
        # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        analysis = {
            'channel_username': channel.username,
            'content_type': channel.channel_type.value,
            'signal_quality': channel.signal_quality.value,
            'signal_frequency': channel.signal_frequency,
            'success_rate': channel.success_rate,
            'last_activity': channel.last_activity.isoformat(),
            'recommendation': self._get_channel_recommendation(channel)
        }
        
        return analysis
    
    def _get_channel_recommendation(self, channel: TelegramChannel) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª—É"""
        if channel.signal_quality == SignalQuality.HIGH and channel.success_rate > 0.7:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
        elif channel.signal_quality == SignalQuality.MEDIUM and channel.success_rate > 0.6:
            return "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é"
        else:
            return "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
    
    async def collect_signals_from_channel(self, channel: TelegramChannel) -> List[Signal]:
        """
        –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        """
        logger.info(f"–°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–∞–Ω–∞–ª–∞: {channel.username}")
        
        signals = []
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            
            if channel.channel_type == ChannelType.SIGNAL:
                signals = await self._collect_trading_signals(channel)
            elif channel.channel_type == ChannelType.ANALYSIS:
                signals = await self._collect_analysis_signals(channel)
            else:
                signals = await self._collect_mixed_signals(channel)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            filtered_signals = [
                signal for signal in signals 
                if signal.confidence >= self.settings['min_confidence']
            ]
            
            logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(filtered_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å {channel.username}")
            return filtered_signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å {channel.username}: {e}")
            return []
    
    async def _collect_trading_signals(self, channel: TelegramChannel) -> List[Signal]:
        """–°–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —á–µ—Ä–µ–∑ Telegram API
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        test_signals = [
            Signal(
                trading_pair="BTC/USDT",
                direction="LONG",
                entry_price=45000.0,
                target_price=47000.0,
                stop_loss=44000.0,
                confidence=0.8,
                source_channel=channel.username,
                message_id="test_1",
                timestamp=datetime.now(),
                quality_score=channel.success_rate
            )
        ]
        
        return test_signals
    
    async def _collect_analysis_signals(self, channel: TelegramChannel) -> List[Signal]:
        """–°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CryptoCapoAnalyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from analyze_crypto_capo import CryptoCapoAnalyzer
        
        analyzer = CryptoCapoAnalyzer()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        
        return []
    
    async def _collect_mixed_signals(self, channel: TelegramChannel) -> List[Signal]:
        """–°–±–æ—Ä —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        signals = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        trading_signals = await self._collect_trading_signals(channel)
        signals.extend(trading_signals)
        
        # –ó–∞—Ç–µ–º –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ
        analysis_signals = await self._collect_analysis_signals(channel)
        signals.extend(analysis_signals)
        
        return signals
    
    async def run_signal_collection(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        start_time = datetime.now()
        all_signals = []
        channel_stats = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        active_channels = self.get_active_channels()
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(active_channels)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel in active_channels[:self.settings['max_channels_per_run']]:
            try:
                signals = await self.collect_signals_from_channel(channel)
                all_signals.extend(signals)
                
                channel_stats[channel.username] = {
                    'signals_count': len(signals),
                    'channel_type': channel.channel_type.value,
                    'quality': channel.signal_quality.value,
                    'success_rate': channel.success_rate
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
                channel.last_activity = datetime.now()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel.username}: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        valid_signals = [
            signal for signal in all_signals
            if signal.timestamp > datetime.now() - timedelta(hours=self.settings['signal_expiry_hours'])
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        valid_signals.sort(key=lambda x: x.quality_score * x.confidence, reverse=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'timestamp': datetime.now().isoformat(),
            'total_signals': len(all_signals),
            'valid_signals': len(valid_signals),
            'channels_processed': len(active_channels),
            'channel_stats': channel_stats,
            'signals': [
                {
                    'trading_pair': signal.trading_pair,
                    'direction': signal.direction,
                    'entry_price': signal.entry_price,
                    'target_price': signal.target_price,
                    'stop_loss': signal.stop_loss,
                    'confidence': signal.confidence,
                    'source': signal.source_channel,
                    'quality_score': signal.quality_score,
                    'timestamp': signal.timestamp.isoformat()
                }
                for signal in valid_signals
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('signal_collection_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        logger.info(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(valid_signals)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(all_signals)}")
        
        return results

async def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    collector = RealSignalCollector()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    print("üìã –ò–ó–í–ï–°–¢–ù–´–ï –ö–ê–ù–ê–õ–´:")
    print("=" * 60)
    
    for channel in collector.known_channels:
        print(f"–ö–∞–Ω–∞–ª: {channel.username}")
        print(f"  –¢–∏–ø: {channel.channel_type.value}")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ: {channel.signal_quality.value}")
        print(f"  –ü–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ' if channel.is_subscribed else '‚ùå'}")
        print(f"  –ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {channel.signal_frequency}/–¥–µ–Ω—å")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {channel.success_rate:.1%}")
        print("-" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\nüöÄ –ó–ê–ü–£–°–ö –°–ë–û–†–ê –°–ò–ì–ù–ê–õ–û–í:")
    print("=" * 60)
    
    results = await collector.run_signal_collection()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {results['total_signals']}")
    print(f"–í–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {results['valid_signals']}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {results['channels_processed']}")
    
    if results['signals']:
        print(f"\nüéØ –õ–£–ß–®–ò–ï –°–ò–ì–ù–ê–õ–´:")
        for i, signal in enumerate(results['signals'][:5]):
            print(f"{i+1}. {signal['trading_pair']} {signal['direction']}")
            print(f"   Entry: {signal['entry_price']} Target: {signal['target_price']}")
            print(f"   Confidence: {signal['confidence']:.2f} Quality: {signal['quality_score']:.2f}")
            print(f"   Source: {signal['source']}")

if __name__ == "__main__":
    asyncio.run(main())
