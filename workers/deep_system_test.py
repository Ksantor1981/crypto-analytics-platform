#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∞—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Crypto Analytics Platform
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""
import asyncio
import sys
import json
import time
import traceback
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Optional
import importlib.util
import subprocess
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))
sys.path.append(str(current_dir.parent))

class DeepSystemTest:
    """–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "total_tests": 0,
            "passed": 0,
            "failed": 0,
            "warnings": 0,
            "test_time": 0,
            "categories": {}
        }
        self.start_time = time.time()
    
    def log_test(self, category: str, test_name: str, status: str, details: str = "", error: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        if category not in self.results["categories"]:
            self.results["categories"][category] = []
        
        test_result = {
            "test": test_name,
            "status": status,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        
        self.results["categories"][category].append(test_result)
        self.results["total_tests"] += 1
        
        if status == "PASS":
            self.results["passed"] += 1
            print(f"‚úÖ {category}: {test_name} - {details}")
        elif status == "FAIL":
            self.results["failed"] += 1
            print(f"‚ùå {category}: {test_name} - {error}")
        elif status == "WARNING":
            self.results["warnings"] += 1
            print(f"‚ö†Ô∏è {category}: {test_name} - {details}")
    
    async def test_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
        
        required_files = [
            "README.md",
            "TASKS2.md",
            "docker-compose.yml",
            "backend/app/main.py",
            "backend/app/models/feedback.py",
            "backend/app/schemas/feedback.py",
            "backend/app/api/endpoints/feedback.py",
            "frontend/components/FeedbackForm.tsx",
            "frontend/pages/feedback.tsx",
            "workers/telegram/telegram_scraper.py",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
            "workers/reddit_collector.py",
            "workers/signal_patterns.py",
            "workers/telegram_feedback_bot.py",
            "workers/channel_discovery_system.py"
        ]
        
        for file_path in required_files:
            if Path(file_path).exists():
                self.log_test("File Structure", f"–§–∞–π–ª {file_path}", "PASS", "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            else:
                self.log_test("File Structure", f"–§–∞–π–ª {file_path}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    async def test_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
        
        modules_to_test = [
            ("signal_patterns", "SignalPatterns"),
            ("reddit_collector", "RedditSignalCollector"),
            ("telegram.telegram_scraper", "TelegramSignalScraper"),
            ("channel_discovery_system", "ChannelDiscoverySystem")
        ]
        
        for module_name, class_name in modules_to_test:
            try:
                module = importlib.import_module(module_name)
                if hasattr(module, class_name):
                    self.log_test("Imports", f"–ò–º–ø–æ—Ä—Ç {class_name}", "PASS", f"–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                else:
                    self.log_test("Imports", f"–ò–º–ø–æ—Ä—Ç {class_name}", "FAIL", "", f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_name}")
            except Exception as e:
                self.log_test("Imports", f"–ò–º–ø–æ—Ä—Ç {class_name}", "FAIL", "", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {str(e)}")
    
    async def test_signal_patterns(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        try:
            from signal_patterns import SignalPatterns
            
            patterns = SignalPatterns()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            test_signals = [
                "BTC/USDT LONG @ 45000 SL: 44000 TP: 47000",
                "ETH/USDT SHORT @ 3200 SL: 3300 TP: 3000",
                "ADA/USDT LONG @ 0.45 SL: 0.42 TP: 0.50",
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –±–µ–∑ –ø–∞—Ä—ã",
                "BTC/USDT @ 45000"  # –ù–µ–ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            ]
            
            for i, signal in enumerate(test_signals):
                try:
                    result = patterns.extract_signal_info(signal)
                    if result.get("pair") and result.get("direction"):
                        self.log_test("Signal Processing", f"–°–∏–≥–Ω–∞–ª {i+1}", "PASS", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω: {result['pair']} {result['direction']}")
                    else:
                        self.log_test("Signal Processing", f"–°–∏–≥–Ω–∞–ª {i+1}", "WARNING", f"–ù–µ–ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {result}")
                except Exception as e:
                    self.log_test("Signal Processing", f"–°–∏–≥–Ω–∞–ª {i+1}", "FAIL", "", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                    
        except Exception as e:
            self.log_test("Signal Processing", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "FAIL", "", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    async def test_telegram_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            from telegram.telegram_scraper import TelegramSignalScraper
            
            scraper = TelegramSignalScraper()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(scraper, 'scrape_channel_messages'):
                self.log_test("Telegram Integration", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∞–ø–µ—Ä–∞", "PASS", "TelegramSignalScraper —Å–æ–∑–¥–∞–Ω")
            else:
                self.log_test("Telegram Integration", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∞–ø–µ—Ä–∞", "FAIL", "", "–ú–µ—Ç–æ–¥ scrape_channel_messages –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            self.log_test("Telegram Integration", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "FAIL", "", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    async def test_reddit_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Reddit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Reddit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            from reddit_collector import RedditSignalCollector
            
            collector = RedditSignalCollector()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(collector, 'collect_signals_from_all_subreddits'):
                self.log_test("Reddit Integration", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞", "PASS", "RedditSignalCollector —Å–æ–∑–¥–∞–Ω")
            else:
                self.log_test("Reddit Integration", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞", "FAIL", "", "–ú–µ—Ç–æ–¥ collect_signals_from_all_subreddits –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            self.log_test("Reddit Integration", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "FAIL", "", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    async def test_feedback_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_files = [
            "backend/app/models/feedback.py",
            "backend/app/schemas/feedback.py", 
            "backend/app/api/endpoints/feedback.py",
            "frontend/components/FeedbackForm.tsx",
            "frontend/pages/feedback.tsx",
            "workers/telegram_feedback_bot.py"
        ]
        
        for file_path in feedback_files:
            if Path(file_path).exists():
                self.log_test("Feedback System", f"–§–∞–π–ª {Path(file_path).name}", "PASS", "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            else:
                self.log_test("Feedback System", f"–§–∞–π–ª {Path(file_path).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        try:
            from telegram_feedback_bot import TelegramFeedbackBot
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            bot = TelegramFeedbackBot("test_token")
            self.log_test("Feedback System", "Telegram –±–æ—Ç", "PASS", "TelegramFeedbackBot —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            if "Update" in str(e):
                self.log_test("Feedback System", "Telegram –±–æ—Ç", "WARNING", "Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.log_test("Feedback System", "Telegram –±–æ—Ç", "FAIL", "", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {str(e)}")
    
    async def test_channel_discovery(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤...")
        
        try:
            from channel_discovery_system import ChannelDiscoverySystem
            
            discovery = ChannelDiscoverySystem()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(discovery, 'discover_all_channels'):
                self.log_test("Channel Discovery", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "PASS", "ChannelDiscoverySystem —Å–æ–∑–¥–∞–Ω")
            else:
                self.log_test("Channel Discovery", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "FAIL", "", "–ú–µ—Ç–æ–¥ discover_all_channels –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            self.log_test("Channel Discovery", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "FAIL", "", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    async def test_configuration_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        config_files = [
            "docker-compose.yml",
            "backend/requirements.txt",
            "workers/requirements.txt",
            "frontend/package.json"
        ]
        
        for config_file in config_files:
            if Path(config_file).exists():
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    encodings = ['utf-8', 'cp1251', 'latin-1']
                    content = None
                    
                    for encoding in encodings:
                        try:
                            with open(config_file, 'r', encoding=encoding) as f:
                                content = f.read()
                                break
                        except UnicodeDecodeError:
                            continue
                    
                    if content and len(content.strip()) > 0:
                        self.log_test("Configuration", f"–§–∞–π–ª {Path(config_file).name}", "PASS", "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π")
                    else:
                        self.log_test("Configuration", f"–§–∞–π–ª {Path(config_file).name}", "WARNING", "–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π")
                except Exception as e:
                    self.log_test("Configuration", f"–§–∞–π–ª {Path(config_file).name}", "FAIL", "", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            else:
                self.log_test("Configuration", f"–§–∞–π–ª {Path(config_file).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def test_database_schema(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        db_files = [
            "backend/app/models/feedback.py",
            "backend/app/models/channel.py",
            "database/seeds/telegram_channels.json"
        ]
        
        for db_file in db_files:
            if Path(db_file).exists():
                try:
                    with open(db_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if len(content.strip()) > 0:
                            self.log_test("Database Schema", f"–§–∞–π–ª {Path(db_file).name}", "PASS", "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π")
                        else:
                            self.log_test("Database Schema", f"–§–∞–π–ª {Path(db_file).name}", "WARNING", "–§–∞–π–ª –ø—É—Å—Ç–æ–π")
                except Exception as e:
                    self.log_test("Database Schema", f"–§–∞–π–ª {Path(db_file).name}", "FAIL", "", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            else:
                self.log_test("Database Schema", f"–§–∞–π–ª {Path(db_file).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def test_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        api_files = [
            "backend/app/api/endpoints/feedback.py",
            "backend/app/api/endpoints/ocr_integration.py",
            "backend/app/api/endpoints/reddit_integration.py"
        ]
        
        for api_file in api_files:
            if Path(api_file).exists():
                try:
                    with open(api_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if "router" in content and "endpoint" in content.lower():
                            self.log_test("API Endpoints", f"–§–∞–π–ª {Path(api_file).name}", "PASS", "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
                        else:
                            self.log_test("API Endpoints", f"–§–∞–π–ª {Path(api_file).name}", "WARNING", "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                except Exception as e:
                    self.log_test("API Endpoints", f"–§–∞–π–ª {Path(api_file).name}", "FAIL", "", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            else:
                self.log_test("API Endpoints", f"–§–∞–π–ª {Path(api_file).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def test_frontend_components(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        frontend_files = [
            "frontend/components/FeedbackForm.tsx",
            "frontend/pages/feedback.tsx"
        ]
        
        for frontend_file in frontend_files:
            if Path(frontend_file).exists():
                try:
                    with open(frontend_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if "export" in content and ("function" in content or "const" in content):
                            self.log_test("Frontend Components", f"–§–∞–π–ª {Path(frontend_file).name}", "PASS", "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
                        else:
                            self.log_test("Frontend Components", f"–§–∞–π–ª {Path(frontend_file).name}", "WARNING", "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
                except Exception as e:
                    self.log_test("Frontend Components", f"–§–∞–π–ª {Path(frontend_file).name}", "FAIL", "", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            else:
                self.log_test("Frontend Components", f"–§–∞–π–ª {Path(frontend_file).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def test_worker_scripts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ worker —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        print("\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ worker —Å–∫—Ä–∏–ø—Ç–æ–≤...")
        
        worker_scripts = [
            "workers/telegram/telegram_scraper.py",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
            "workers/reddit_collector.py",
            "workers/signal_patterns.py",
            "workers/telegram_feedback_bot.py",
            "workers/channel_discovery_system.py"
        ]
        
        for script in worker_scripts:
            if Path(script).exists():
                try:
                    with open(script, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if "class" in content and "def" in content:
                            self.log_test("Worker Scripts", f"–°–∫—Ä–∏–ø—Ç {Path(script).name}", "PASS", "Python –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
                        else:
                            self.log_test("Worker Scripts", f"–°–∫—Ä–∏–ø—Ç {Path(script).name}", "WARNING", "–ö–ª–∞—Å—Å—ã –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                except Exception as e:
                    self.log_test("Worker Scripts", f"–°–∫—Ä–∏–ø—Ç {Path(script).name}", "FAIL", "", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            else:
                self.log_test("Worker Scripts", f"–°–∫—Ä–∏–ø—Ç {Path(script).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def test_documentation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        doc_files = [
            "README.md",
            "TASKS2.md",
            "COMPREHENSIVE_FUNCTIONALITY_REPORT.md",
            "FEEDBACK_SYSTEM_REPORT.md"
        ]
        
        for doc_file in doc_files:
            if Path(doc_file).exists():
                try:
                    with open(doc_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if len(content.strip()) > 100:  # –ú–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
                            self.log_test("Documentation", f"–î–æ–∫—É–º–µ–Ω—Ç {Path(doc_file).name}", "PASS", "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç")
                        else:
                            self.log_test("Documentation", f"–î–æ–∫—É–º–µ–Ω—Ç {Path(doc_file).name}", "WARNING", "–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                except Exception as e:
                    self.log_test("Documentation", f"–î–æ–∫—É–º–µ–Ω—Ç {Path(doc_file).name}", "FAIL", "", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}")
            else:
                self.log_test("Documentation", f"–î–æ–∫—É–º–µ–Ω—Ç {Path(doc_file).name}", "FAIL", "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def test_integration_scenarios(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤—Å—é —Å–∏—Å—Ç–µ–º—É
        try:
            from signal_patterns import SignalPatterns
            patterns = SignalPatterns()
            
            test_signal = "BTC/USDT LONG @ 45000 SL: 44000 TP: 47000"
            result = patterns.extract_signal_info(test_signal)
            
            if result.get("trading_pair") == "BTC/USDT" and result.get("direction") == "LONG":
                self.log_test("Integration Scenarios", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞", "PASS", "–°–∏–≥–Ω–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                self.log_test("Integration Scenarios", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞", "WARNING", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏–≥–Ω–∞–ª: {result.get('trading_pair', 'N/A')} {result.get('direction', 'N/A')}")
                
        except Exception as e:
            self.log_test("Integration Scenarios", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞", "FAIL", "", f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        try:
            from telegram_feedback_bot import TelegramFeedbackBot
            bot = TelegramFeedbackBot("test_token")
            
            if hasattr(bot, 'start_command'):
                self.log_test("Integration Scenarios", "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "PASS", "Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                self.log_test("Integration Scenarios", "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "WARNING", "–ú–µ—Ç–æ–¥ start_command –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            if "Update" in str(e):
                self.log_test("Integration Scenarios", "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "WARNING", "Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.log_test("Integration Scenarios", "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "FAIL", "", f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ô –ü–†–û–í–ï–†–ö–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        await self.test_file_structure()
        await self.test_imports()
        await self.test_signal_patterns()
        await self.test_telegram_integration()
        await self.test_reddit_integration()
        await self.test_feedback_system()
        await self.test_channel_discovery()
        await self.test_configuration_files()
        await self.test_database_schema()
        await self.test_api_endpoints()
        await self.test_frontend_components()
        await self.test_worker_scripts()
        await self.test_documentation()
        await self.test_integration_scenarios()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results["test_time"] = time.time() - self.start_time
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.print_final_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report()
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–õ–£–ë–û–ö–û–ô –ü–†–û–í–ï–†–ö–ò")
        print("=" * 60)
        
        total = self.results["total_tests"]
        passed = self.results["passed"]
        failed = self.results["failed"]
        warnings = self.results["warnings"]
        
        success_rate = (passed / total * 100) if total > 0 else 0
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {passed} ({success_rate:.1f}%)")
        print(f"   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.results['test_time']:.2f} —Å–µ–∫")
        
        print(f"\nüèÜ –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:")
        if success_rate >= 95:
            print("   üöÄ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        elif success_rate >= 85:
            print("   ‚úÖ –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
        elif success_rate >= 70:
            print("   ‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, tests in self.results["categories"].items():
            category_passed = sum(1 for test in tests if test["status"] == "PASS")
            category_total = len(tests)
            category_rate = (category_passed / category_total * 100) if category_total > 0 else 0
            print(f"   ‚Ä¢ {category}: {category_passed}/{category_total} ({category_rate:.1f}%)")
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"deep_system_test_report_{timestamp}.json"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = DeepSystemTest()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
