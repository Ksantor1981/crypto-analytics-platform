#!/usr/bin/env python3
"""
–î–µ–º–æ-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ analyst_crypto
"""

import json
import sys
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

def load_channels_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    config_path = Path(__file__).parent.parent / "database" / "seeds" / "telegram_channels.json"
    
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    return config.get('telegram_channels', {}).get('channels', [])

def generate_demo_signals():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å —á–µ—Ç–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏
    demo_signals = [
        {
            "channel": "üéØ Binance Killers",
            "username": "@binancekillers",
            "timestamp": datetime.now() - timedelta(hours=2),
            "signal_text": "üöÄ BTC LONG Entry: $45,200 Target: $47,500 SL: $44,000",
            "extracted": {
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 45200.0,
                "target_price": 47500.0,
                "stop_loss": 44000.0,
                "confidence": 95.0
            }
        },
        {
            "channel": "üìà Crypto Futures Signals",
            "username": "@Crypto_Futures_Signals", 
            "timestamp": datetime.now() - timedelta(hours=4),
            "signal_text": "ETH SHORT @ 3200 TP: 3000 SL: 3300 Leverage: 3x",
            "extracted": {
                "asset": "ETH",
                "direction": "SHORT",
                "entry_price": 3200.0,
                "target_price": 3000.0,
                "stop_loss": 3300.0,
                "confidence": 88.0
            }
        },
        {
            "channel": "üî• CryptoCapo TG",
            "username": "@CryptoCapoTG",
            "timestamp": datetime.now() - timedelta(hours=6),
            "signal_text": "SOL/USDT BUY Entry: 98.50 Target: 115.00 Stop Loss: 92.00",
            "extracted": {
                "asset": "SOL",
                "direction": "LONG",
                "entry_price": 98.50,
                "target_price": 115.00,
                "stop_loss": 92.00,
                "confidence": 92.0
            }
        },
        {
            "channel": "üê∫ Wolf of Trading",
            "username": "@Wolf_of_Trading_singals",
            "timestamp": datetime.now() - timedelta(hours=8),
            "signal_text": "üìà Bitcoin Long Entry: 44800 Target: 46500 Stop: 43800",
            "extracted": {
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 44800.0,
                "target_price": 46500.0,
                "stop_loss": 43800.0,
                "confidence": 85.0
            }
        },
        {
            "channel": "üìä Altsignals.io",
            "username": "@io_altsignals",
            "timestamp": datetime.now() - timedelta(hours=10),
            "signal_text": "DOGE LONG Entry: 0.082 Target: 0.095 SL: 0.075",
            "extracted": {
                "asset": "DOGE",
                "direction": "LONG",
                "entry_price": 0.082,
                "target_price": 0.095,
                "stop_loss": 0.075,
                "confidence": 78.0
            }
        },
        {
            "channel": "üê∑ Fat Pig Signals",
            "username": "@fatpigsignals",
            "timestamp": datetime.now() - timedelta(hours=12),
            "signal_text": "üìâ Ethereum Short @ 3180 TP: 2950 SL: 3250",
            "extracted": {
                "asset": "ETH",
                "direction": "SHORT",
                "entry_price": 3180.0,
                "target_price": 2950.0,
                "stop_loss": 3250.0,
                "confidence": 82.0
            }
        }
    ]
    
    return demo_signals

def check_signal_freshness(timestamp: datetime) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    now = datetime.now()
    time_diff = now - timestamp
    
    hours_diff = time_diff.total_seconds() / 3600
    
    if hours_diff < 1:
        freshness = "üî• –û–ß–ï–ù–¨ –°–í–ï–ñ–ò–ô"
        status = "ACTIVE"
        color = "üü¢"
    elif hours_diff < 6:
        freshness = "‚úÖ –°–í–ï–ñ–ò–ô"
        status = "ACTIVE"
        color = "üü¢"
    elif hours_diff < 24:
        freshness = "‚ö†Ô∏è –°–¢–ê–†–ï–ï–¢"
        status = "WARNING"
        color = "üü°"
    else:
        freshness = "‚ùå –£–°–¢–ê–†–ï–õ"
        status = "EXPIRED"
        color = "üî¥"
    
    return {
        "freshness": freshness,
        "status": status,
        "color": color,
        "hours_ago": round(hours_diff, 1)
    }

def format_timestamp(timestamp: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
    now = datetime.now()
    time_diff = now - timestamp
    
    if time_diff.days > 0:
        return f"{timestamp.strftime('%d.%m.%Y –≤ %H:%M')} ({time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥)"
    elif time_diff.seconds >= 3600:
        hours = time_diff.seconds // 3600
        return f"{timestamp.strftime('%d.%m.%Y –≤ %H:%M')} ({hours} —á. –Ω–∞–∑–∞–¥)"
    else:
        minutes = time_diff.seconds // 60
        return f"{timestamp.strftime('%d.%m.%Y –≤ %H:%M')} ({minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥)"

def analyze_signal_performance(signal: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    import random
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success_chance = signal["extracted"]["confidence"] / 100.0
    is_successful = random.random() < success_chance
    
    if is_successful:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
        if signal["extracted"]["direction"] == "LONG":
            profit_pct = (signal["extracted"]["target_price"] - signal["extracted"]["entry_price"]) / signal["extracted"]["entry_price"] * 100
        else:
            profit_pct = (signal["extracted"]["entry_price"] - signal["extracted"]["target_price"]) / signal["extracted"]["entry_price"] * 100
        
        status = "SUCCESS"
        profit = round(profit_pct, 2)
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–±—ã—Ç–æ–∫
        if signal["extracted"]["direction"] == "LONG":
            loss_pct = (signal["extracted"]["stop_loss"] - signal["extracted"]["entry_price"]) / signal["extracted"]["entry_price"] * 100
        else:
            loss_pct = (signal["extracted"]["entry_price"] - signal["extracted"]["stop_loss"]) / signal["extracted"]["entry_price"] * 100
        
        status = "FAILURE"
        profit = round(loss_pct, 2)
    
    return {
        "status": status,
        "profit_pct": profit,
        "execution_time": random.randint(2, 48),  # —á–∞—Å—ã
        "volume_24h": random.randint(1000000, 50000000)  # USD
    }

def print_signal_analysis(signal: Dict[str, Any], performance: Dict[str, Any]):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    
    print(f"\n{'='*100}")
    print(f"üìä –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–ê")
    print(f"{'='*100}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    freshness = check_signal_freshness(signal['timestamp'])
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üì∫ –ö–∞–Ω–∞–ª: {signal['channel']} ({signal['username']})")
    print(f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {format_timestamp(signal['timestamp'])}")
    print(f"üïê –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: {freshness['color']} {freshness['freshness']} ({freshness['hours_ago']} —á. –Ω–∞–∑–∞–¥)")
    print(f"üìù –¢–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞: {signal['signal_text']}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    extracted = signal["extracted"]
    print(f"\nüéØ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"   üí∞ –ê–∫—Ç–∏–≤: {extracted['asset']}")
    print(f"   üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {extracted['direction']}")
    print(f"   üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${extracted['entry_price']:,.2f}")
    print(f"   üéØ –¶–µ–ª—å: ${extracted['target_price']:,.2f}")
    print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${extracted['stop_loss']:,.2f}")
    print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {extracted['confidence']}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    status_emoji = "‚úÖ" if performance["status"] == "SUCCESS" else "‚ùå"
    print(f"   {status_emoji} –°—Ç–∞—Ç—É—Å: {performance['status']}")
    print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {performance['profit_pct']:+.2f}%")
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {performance['execution_time']} —á–∞—Å–æ–≤")
    print(f"   üìä –û–±—ä–µ–º 24—á: ${performance['volume_24h']:,}")
    
    # Risk/Reward –∞–Ω–∞–ª–∏–∑
    if extracted['entry_price'] and extracted['target_price'] and extracted['stop_loss']:
        if extracted['direction'] == 'LONG':
            reward = extracted['target_price'] - extracted['entry_price']
            risk = extracted['entry_price'] - extracted['stop_loss']
        else:
            reward = extracted['entry_price'] - extracted['target_price']
            risk = extracted['stop_loss'] - extracted['entry_price']
        
        if risk > 0:
            rr_ratio = reward / risk
            print(f"   ‚öñÔ∏è Risk/Reward: 1:{rr_ratio:.2f}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• –°–ò–ì–ù–ê–õ–û–í")
    print("="*100)
    print("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ analyst_crypto")
    print("="*100)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    print(f"\nüïê –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
    channels = load_channels_config()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(channels)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª—ã
    signals = generate_demo_signals()
    print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    signals.sort(key=lambda x: x['timestamp'], reverse=True)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
    for i, signal in enumerate(signals, 1):
        print(f"\n{'='*100}")
        print(f"üîç –°–ò–ì–ù–ê–õ #{i}")
        print(f"{'='*100}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        performance = analyze_signal_performance(signal)
        
        # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        print_signal_analysis(signal, performance)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*100}")
    print(f"üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*100}")
    
    total_signals = len(signals)
    successful_signals = sum(1 for s in signals if analyze_signal_performance(s)["status"] == "SUCCESS")
    success_rate = (successful_signals / total_signals) * 100
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    fresh_signals = sum(1 for s in signals if check_signal_freshness(s['timestamp'])['status'] == 'ACTIVE')
    warning_signals = sum(1 for s in signals if check_signal_freshness(s['timestamp'])['status'] == 'WARNING')
    expired_signals = sum(1 for s in signals if check_signal_freshness(s['timestamp'])['status'] == 'EXPIRED')
    
    print(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_signals}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_signals - successful_signals}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüïê –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –°–ò–ì–ù–ê–õ–û–í:")
    print(f"üü¢ –°–≤–µ–∂–∏–µ (< 6 —á): {fresh_signals}")
    print(f"üü° –°—Ç–∞—Ä–µ—é—Ç (6-24 —á): {warning_signals}")
    print(f"üî¥ –£—Å—Ç–∞—Ä–µ–ª–∏ (> 24 —á): {expired_signals}")
    
    # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
    total_profit = 0
    for signal in signals:
        performance = analyze_signal_performance(signal)
        total_profit += performance["profit_pct"]
    
    avg_profit = total_profit / total_signals
    print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:+.2f}%")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ analyst_crypto")

if __name__ == "__main__":
    main()
