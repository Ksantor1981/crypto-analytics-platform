import urllib.request
import urllib.parse
import json
import re
from datetime import datetime, timedelta
import time
import ssl

class RealTelegramParser:
    """–†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        
        self.opener = urllib.request.build_opener(
            urllib.request.HTTPSHandler(context=self.ssl_context)
        )
        self.opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'),
            ('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'),
            ('Accept-Language', 'en-US,en;q=0.5'),
            ('Accept-Encoding', 'gzip, deflate'),
            ('Connection', 'keep-alive'),
            ('Upgrade-Insecure-Requests', '1'),
        ]
    
    def get_channel_content(self, username):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = f"https://t.me/s/{username}"
            print(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {username}...")
            
            with self.opener.open(url, timeout=15) as response:
                content = response.read().decode('utf-8')
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {username}")
                return content
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {username}: {e}")
            return None
    
    def extract_messages_from_html(self, html_content, username):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ HTML —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        messages = []
        
        if not html_content:
            return messages
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        patterns = [
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            r'<div class="tgme_widget_message[^"]*"[^>]*data-post="(\d+)"[^>]*>.*?<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>.*?<time[^>]*datetime="([^"]*)"[^>]*>',
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            r'<div class="tgme_widget_message[^"]*"[^>]*>.*?<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>',
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, html_content, re.DOTALL)
            
            for i, match in enumerate(matches):
                if isinstance(match, tuple):
                    if len(match) >= 3:
                        message_id, text_html, date_str = match[0], match[1], match[2]
                    else:
                        text_html = match[0]
                        message_id = f"msg_{i}"
                        date_str = datetime.now().isoformat()
                else:
                    text_html = match
                    message_id = f"msg_{i}"
                    date_str = datetime.now().isoformat()
                
                # –û—á–∏—â–∞–µ–º HTML –∏–∑ —Ç–µ–∫—Å—Ç–∞
                text = re.sub(r'<[^>]+>', '', text_html)
                text = re.sub(r'&nbsp;', ' ', text)
                text = re.sub(r'&amp;', '&', text)
                text = re.sub(r'&lt;', '<', text)
                text = re.sub(r'&gt;', '>', text)
                text = text.strip()
                
                if text and len(text) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages.append({
                        'id': message_id,
                        'text': text,
                        'date': date_str,
                        'username': username
                    })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
        return messages
    
    def extract_signals_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        signals = []
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        patterns = [
            # –ü–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å Entry, Target, Stop
            r'(\w+)/USDT\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)\s+Target:\s*\$?([\d,]+\.?\d*)\s+Stop:\s*\$?([\d,]+\.?\d*)',
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)\s+Target:\s*\$?([\d,]+\.?\d*)\s+Stop:\s*\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å —Å—Ç—Ä–µ–ª–∫–∞–º–∏
            r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)\s*[‚Üí‚û°Ô∏è]\s*\$?([\d,]+\.?\d*)\s*üõë\s*\$?([\d,]+\.?\d*)',
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å —Ü–µ–Ω–æ–π
            r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            r'(\w+)\s+(LONG|SHORT)\s+[+-]\d+%\s+\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å —Ç–æ—á–∫–∞–º–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            r'(\w+)\.(LONG|SHORT)\.\$?([\d,]+\.?\d*)',
            r'(\w+)_(LONG|SHORT)_\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å BUY/SELL
            r'(\w+)\s+(BUY|SELL)\s+\$?([\d,]+\.?\d*)',
            r'[üöÄüìâüî•]\s*(\w+)\s+(BUY|SELL)\s+\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å CALL/PUT
            r'(\w+)\s+(CALL|PUT)\s+\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑ —Ü–µ–Ω—ã
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT|BUY|SELL)',
            r'(\w+)\s+(LONG|SHORT|BUY|SELL)\s*[üöÄüìâüî•]',
        ]
        
        for pattern in patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                groups = match.groups()
                
                if len(groups) >= 3:
                    signal = {
                        "asset": groups[0].upper(),
                        "direction": groups[1].upper(),
                        "entry_price": float(groups[2].replace(',', '')) if groups[2].replace(',', '').replace('.', '').isdigit() else None,
                        "target_price": float(groups[3].replace(',', '')) if len(groups) > 3 and groups[3].replace(',', '').replace('.', '').isdigit() else None,
                        "stop_loss": float(groups[4].replace(',', '')) if len(groups) > 4 and groups[4].replace(',', '').replace('.', '').isdigit() else None,
                        "pattern_used": pattern[:50] + "...",
                        "original_text": text[:200] + "..." if len(text) > 200 else text
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç
                    if not any(s['asset'] == signal['asset'] and s['direction'] == signal['direction'] for s in signals):
                        signals.append(signal)
        
        return signals
    
    def parse_channel(self, username, hours_back=24):
        """–ü–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞
        content = self.get_channel_content(username)
        if not content:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = self.extract_messages_from_html(content, username)
        if not messages:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        all_signals = []
        for message in messages:
            signals = self.extract_signals_from_text(message['text'])
            for signal in signals:
                signal.update({
                    'channel': username,
                    'message_id': message['id'],
                    'timestamp': message['date'],
                    'extraction_time': datetime.now().isoformat()
                })
                all_signals.extend(signals)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {username}")
        return all_signals
    
    def parse_all_channels(self, channels, hours_back=24):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        all_signals = []
        channel_stats = {}
        
        for username in channels:
            try:
                signals = self.parse_channel(username, hours_back)
                all_signals.extend(signals)
                
                channel_stats[username] = {
                    'signals_found': len(signals),
                    'channel_name': username
                }
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {username}: {e}")
                channel_stats[username] = {
                    'signals_found': 0,
                    'channel_name': username,
                    'error': str(e)
                }
        
        return all_signals, channel_stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = RealTelegramParser()
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    channels = [
        'signalsbitcoinandethereum',
        'CryptoCapoTG',
        'cryptosignals',
        'binance_signals',
        'crypto_analytics'
    ]
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    signals, stats = parser.parse_all_channels(channels, hours_back=24)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = {
        'success': True,
        'total_signals': len(signals),
        'signals': signals,
        'channel_stats': stats,
        'collection_time': datetime.now().isoformat(),
        'hours_back': 24
    }
    
    with open('real_telegram_signals_fixed.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: real_telegram_signals_fixed.json")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
    for channel, stat in stats.items():
        print(f"üì± {channel}: {stat['signals_found']} —Å–∏–≥–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    main()
