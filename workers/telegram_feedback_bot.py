#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application, CommandHandler, MessageHandler, CallbackQueryHandler,
        ConversationHandler, filters, ContextTypes
    )
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
try:
    from backend.app.models.feedback import Feedback, FeedbackType, FeedbackStatus
    from backend.app.core.database import SessionLocal
    DB_AVAILABLE = True
except ImportError:
    DB_AVAILABLE = False
    print("‚ö†Ô∏è Backend –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_TYPE, ENTERING_SUBJECT, ENTERING_MESSAGE, ENTERING_CONTACT = range(4)

class TelegramFeedbackBot:
    """Telegram –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = None
        self.user_sessions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        if TELEGRAM_AVAILABLE:
            self.application = Application.builder().token(token).build()
            self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        start_handler = CommandHandler("start", self.start_command)
        self.application.add_handler(start_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
        feedback_handler = CommandHandler("feedback", self.feedback_command)
        self.application.add_handler(feedback_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        help_handler = CommandHandler("help", self.help_command)
        self.application.add_handler(help_handler)
        
        # Conversation handler –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("send_feedback", self.start_feedback)],
            states={
                CHOOSING_TYPE: [CallbackQueryHandler(self.choose_feedback_type)],
                ENTERING_SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_subject)],
                ENTERING_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_message)],
                ENTERING_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_contact)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_feedback)]
        )
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Analytics Platform!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìä `/feedback` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
‚ùì `/help` - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
üìà `/signals` - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
üì∞ `/news` - –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞

**–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?** 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/feedback` –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏!
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def feedback_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback"""
        
        feedback_text = """
üìù **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏! 

**–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/send_feedback`
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
3. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É
4. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
5. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞

**–¢–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:**
‚ùì **–í–æ–ø—Ä–æ—Å** - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–µ
üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ** - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
üêõ **–û—à–∏–±–∫–∞** - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ
üöÄ **–§—É–Ω–∫—Ü–∏—è** - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
üìù **–û–±—â–µ–µ** - –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ù–∞–∂–º–∏—Ç–µ `/send_feedback` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
        """
        
        await update.message.reply_text(feedback_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        
        help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìä `/feedback` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
üìà `/signals` - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
üì∞ `/news` - –ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
üìä `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

**–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:**
üìù `/send_feedback` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
‚ùå `/cancel` - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
üîó `/website` - –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç
üìß `/contact` - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

**–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/feedback` –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def start_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        self.user_sessions[user_id] = {
            'user_id': user_id,
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å", callback_data="question"),
                InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggestion")
            ],
            [
                InlineKeyboardButton("üêõ –û—à–∏–±–∫–∞", callback_data="bug_report"),
                InlineKeyboardButton("üöÄ –§—É–Ω–∫—Ü–∏—è", callback_data="feature_request")
            ],
            [
                InlineKeyboardButton("üìù –û–±—â–µ–µ", callback_data="general")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìù **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:**\n\n"
            "‚ùì **–í–æ–ø—Ä–æ—Å** - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–µ\n"
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ** - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n"
            "üêõ **–û—à–∏–±–∫–∞** - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
            "üöÄ **–§—É–Ω–∫—Ü–∏—è** - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é\n"
            "üìù **–û–±—â–µ–µ** - –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CHOOSING_TYPE
    
    async def choose_feedback_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        feedback_type = query.data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.user_sessions[user_id]['feedback_type'] = feedback_type
        
        await query.edit_message_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤' –∏–ª–∏ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'",
            parse_mode='Markdown'
        )
        
        return ENTERING_SUBJECT
    
    async def enter_subject(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º—ã"""
        
        user_id = update.effective_user.id
        subject = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        self.user_sessions[user_id]['subject'] = subject
        
        await update.message.reply_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. "
            "–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å!",
            parse_mode='Markdown'
        )
        
        return ENTERING_MESSAGE
    
    async def enter_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        user_id = update.effective_user.id
        message = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.user_sessions[user_id]['message'] = message
        
        await update.message.reply_text(
            "üìß **–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞?**\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"
            "‚Ä¢ Email –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ Telegram username\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!",
            parse_mode='Markdown'
        )
        
        return ENTERING_CONTACT
    
    async def enter_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        
        user_id = update.effective_user.id
        contact = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        session_data = self.user_sessions.get(user_id, {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞
        user_email = None
        user_telegram = None
        
        if contact.lower() in ['–Ω–µ—Ç', 'no', 'n']:
            pass
        elif '@' in contact and '.' in contact:
            user_email = contact
        elif contact.startswith('@'):
            user_telegram = contact
        else:
            user_telegram = f"@{contact}" if not contact.startswith('@') else contact
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        success = await self.save_feedback(
            user_id=user_id,
            username=session_data.get('username'),
            feedback_type=session_data.get('feedback_type'),
            subject=session_data.get('subject'),
            message=session_data.get('message'),
            user_email=user_email,
            user_telegram=user_telegram
        )
        
        if success:
            await update.message.reply_text(
                "‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!**\n\n"
                "üìù **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n"
                f"**–¢–∏–ø:** {self.get_feedback_type_name(session_data.get('feedback_type'))}\n"
                f"**–¢–µ–º–∞:** {session_data.get('subject')}\n"
                f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {session_data.get('message')[:100]}...\n\n"
                "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
                parse_mode='Markdown'
            )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        return ConversationHandler.END
    
    async def cancel_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        await update.message.reply_text(
            "‚ùå **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.**\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/feedback` –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
    
    async def save_feedback(self, user_id: int, username: str, feedback_type: str, 
                          subject: str, message: str, user_email: str = None, 
                          user_telegram: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –ë–î"""
        
        try:
            if DB_AVAILABLE:
                db = SessionLocal()
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    feedback = Feedback(
                        user_id=user_id,
                        user_email=user_email,
                        user_telegram=user_telegram,
                        feedback_type=FeedbackType(feedback_type),
                        subject=subject,
                        message=message,
                        source="telegram",
                        user_agent=f"Telegram Bot - User: {username}",
                        ip_address="telegram"
                    )
                    
                    db.add(feedback)
                    db.commit()
                    db.refresh(feedback)
                    
                    logger.info(f"Feedback saved: ID={feedback.id}, Type={feedback_type}, User={username}")
                    return True
                    
                except Exception as e:
                    logger.error(f"Error saving feedback to DB: {e}")
                    db.rollback()
                    return False
                finally:
                    db.close()
            else:
                # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                await self.save_feedback_local(user_id, username, feedback_type, subject, message, user_email, user_telegram)
                return True
                
        except Exception as e:
            logger.error(f"Error in save_feedback: {e}")
            return False
    
    async def save_feedback_local(self, user_id: int, username: str, feedback_type: str,
                                subject: str, message: str, user_email: str = None,
                                user_telegram: str = None):
        """–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ñ–∞–π–ª"""
        
        feedback_data = {
            'id': f"tg_{user_id}_{int(datetime.now().timestamp())}",
            'user_id': user_id,
            'username': username,
            'feedback_type': feedback_type,
            'subject': subject,
            'message': message,
            'user_email': user_email,
            'user_telegram': user_telegram,
            'source': 'telegram',
            'created_at': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        import json
        filename = f"telegram_feedback_{datetime.now().strftime('%Y%m%d')}.json"
        
        try:
            existing_data = []
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            except FileNotFoundError:
                pass
            
            existing_data.append(feedback_data)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"Feedback saved locally: {filename}")
            
        except Exception as e:
            logger.error(f"Error saving feedback locally: {e}")
    
    def get_feedback_type_name(self, feedback_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        type_names = {
            'question': '‚ùì –í–æ–ø—Ä–æ—Å',
            'suggestion': 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            'bug_report': 'üêõ –û—à–∏–±–∫–∞',
            'feature_request': 'üöÄ –§—É–Ω–∫—Ü–∏—è',
            'general': 'üìù –û–±—â–µ–µ'
        }
        
        return type_names.get(feedback_type, 'üìù –û–±—â–µ–µ')
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        
        logger.error(f"Exception while handling an update: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏.",
                parse_mode='Markdown'
            )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        
        if not TELEGRAM_AVAILABLE:
            logger.error("Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        
        logger.info("Starting Telegram Feedback Bot...")
        
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("Telegram Feedback Bot started successfully!")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            await self.application.updater.idle()
            
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
        finally:
            if self.application:
                await self.application.stop()
                await self.application.shutdown()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        return
    
    bot = TelegramFeedbackBot(BOT_TOKEN)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
