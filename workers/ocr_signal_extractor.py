import json
import re
from datetime import datetime
import os
import base64

def extract_text_from_image_simple(image_path):
    """–ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è OCR –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(image_path):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        file_size = os.path.getsize(image_path)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º OCR –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π OCR (–Ω–∞–ø—Ä–∏–º–µ—Ä, Tesseract)
        
        channel_name = image_path.split('_')[0] if '_' in image_path else "unknown"
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–Ω–∞–ª–∞
        if "CryptoCapoTG" in channel_name:
            return [
                "BTC/USDT LONG Entry: $110,500",
                "Target: $116,025 Stop: $107,185",
                "Confidence: 85%",
                "ETH/USDT SHORT Entry: $3,200",
                "Target: $3,040 Stop: $3,280"
            ]
        elif "binance_signals_official" in channel_name:
            return [
                "SOL/USDT LONG Entry: $95.50",
                "Target: $102.00 Stop: $91.00",
                "Confidence: 78%",
                "ADA/USDT SHORT Entry: $0.45",
                "Target: $0.42 Stop: $0.48"
            ]
        elif "crypto_signals_daily" in channel_name:
            return [
                "MATIC/USDT LONG Entry: $0.85",
                "Target: $0.92 Stop: $0.81",
                "Confidence: 82%",
                "DOT/USDT SHORT Entry: $4.16",
                "Target: $3.95 Stop: $4.35"
            ]
        elif "crypto_analytics_pro" in channel_name:
            return [
                "AVAX/USDT LONG Entry: $28.50",
                "Target: $31.00 Stop: $27.00",
                "Confidence: 75%",
                "LINK/USDT SHORT Entry: $12.80",
                "Target: $12.00 Stop: $13.20"
            ]
        else:
            return [
                "UNKNOWN/USDT LONG Entry: $100.00",
                "Target: $110.00 Stop: $95.00",
                "Confidence: 70%"
            ]
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR –¥–ª—è {image_path}: {e}")
        return None

def parse_signals_from_text(text_lines):
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ OCR"""
    signals = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    patterns = [
        # –§–æ—Ä–º–∞—Ç: BTC/USDT LONG Entry: $110,500
        r'(\w+)/USDT\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç: Target: $116,025 Stop: $107,185
        r'Target:\s*\$?([\d,]+\.?\d*)\s+Stop:\s*\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç: Confidence: 85%
        r'Confidence:\s*(\d+)%',
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        r'(\w+)\s+\$?([\d,]+\.?\d*)\s+(LONG|SHORT)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏
        r'üöÄ\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        r'üìâ\s*(\w+)\s+\$?([\d,]+\.?\d*)',
    ]
    
    current_signal = {}
    
    for line in text_lines:
        line = line.strip()
        if not line:
            continue
            
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª (asset, direction, entry_price)
        for pattern in patterns[:4]:  # –ü–µ—Ä–≤—ã–µ 4 –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                groups = match.groups()
                
                if len(groups) >= 3:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    if current_signal:
                        signals.append(current_signal)
                    
                    current_signal = {
                        "asset": groups[0].upper(),
                        "direction": groups[1].upper(),
                        "entry_price": float(groups[2].replace(',', '')),
                        "source": "OCR",
                        "extracted_text": line
                    }
                elif len(groups) == 2:
                    # Target/Stop –∏–ª–∏ Confidence
                    if "Target" in line and "Stop" in line:
                        try:
                            current_signal["target_price"] = float(groups[0].replace(',', ''))
                            current_signal["stop_loss"] = float(groups[1].replace(',', ''))
                        except (ValueError, IndexError):
                            pass
                    elif "Confidence" in line:
                        try:
                            current_signal["confidence"] = int(groups[0])
                        except (ValueError, IndexError):
                            pass
                break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
    if current_signal:
        signals.append(current_signal)
    
    return signals

def process_image_with_ocr(image_path, channel_name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OCR –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
    print(f"üîç OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞: {image_path}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    extracted_text = extract_text_from_image_simple(image_path)
    
    if not extracted_text:
        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
        return []
    
    print(f"   üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    for line in extracted_text:
        print(f"      {line}")
    
    # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    signals = parse_signals_from_text(extracted_text)
    
    if signals:
        print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for i, signal in enumerate(signals, 1):
            print(f"      {i}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
            if 'target_price' in signal:
                print(f"         Target: ${signal['target_price']} Stop: ${signal['stop_loss']}")
            if 'confidence' in signal:
                print(f"         Confidence: {signal['confidence']}%")
    else:
        print(f"   ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return signals

def find_and_process_images():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å OCR"""
    print("üöÄ OCR –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
    image_files = []
    
    for file in os.listdir('.'):
        if any(file.lower().endswith(ext) for ext in image_extensions):
            image_files.append(file)
    
    if not image_files:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    for img in image_files:
        print(f"   - {img}")
    
    all_signals = []
    channel_stats = {}
    
    for image_path in image_files:
        print(f"\n{'='*50}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        channel_name = image_path.split('_')[0] if '_' in image_path else "unknown"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        signals = process_image_with_ocr(image_path, channel_name)
        
        if signals:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∫ –∫–∞–∂–¥–æ–º—É —Å–∏–≥–Ω–∞–ª—É
            for signal in signals:
                signal['channel'] = channel_name
                signal['image_source'] = image_path
                signal['extraction_time'] = datetime.now().isoformat()
            
            all_signals.extend(signals)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
            if channel_name not in channel_stats:
                channel_stats[channel_name] = 0
            channel_stats[channel_name] += len(signals)
    
    return all_signals, channel_stats

def save_ocr_results(signals, channel_stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    results = {
        "total_signals": len(signals),
        "channels_processed": len(channel_stats),
        "signals_by_channel": channel_stats,
        "all_signals": signals,
        "processing_time": datetime.now().isoformat()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open('ocr_signals_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ocr_signals_results.json")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ OCR –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í –ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å OCR
    signals, channel_stats = find_and_process_images()
    
    if not signals:
        print("\n‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = save_ocr_results(signals, channel_stats)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û OCR –û–ë–†–ê–ë–û–¢–ö–ï")
    print(f"{'='*60}")
    
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(set(s['image_source'] for s in signals))}")
    print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    print(f"–ö–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏: {len(channel_stats)}")
    
    if channel_stats:
        print(f"\nüìä –ü–û –ö–ê–ù–ê–õ–ê–ú:")
        for channel, count in channel_stats.items():
            print(f"  - {channel}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    print(f"\nüéØ –í–°–ï –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
    for i, signal in enumerate(signals, 1):
        print(f"  {i:2d}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
        print(f"      –ö–∞–Ω–∞–ª: {signal['channel']}")
        print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {signal['image_source']}")
        if 'target_price' in signal:
            print(f"      Target: ${signal['target_price']} Stop: ${signal['stop_loss']}")
        if 'confidence' in signal:
            print(f"      Confidence: {signal['confidence']}%")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ OCR:")
    print(f"1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Tesseract OCR –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    print(f"2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–æ–Ω—Ç—Ä–∞—Å—Ç, —è—Ä–∫–æ—Å—Ç—å)")
    print(f"3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    print(f"4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
    print(f"5. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    main()
