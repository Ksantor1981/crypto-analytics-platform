import urllib.request
import json
import re

def debug_channel_content(username):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∫–∞–Ω–∞–ª–∞: {username}")
    print("=" * 50)
    
    try:
        url = f"https://t.me/s/{username}"
        print(f"URL: {url}")
        
        opener = urllib.request.build_opener()
        opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ]
        
        with opener.open(url, timeout=10) as response:
            content = response.read().decode('utf-8')
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
            print(f"–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if "This channel is private" in content:
                print("‚ùå –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                return False
            
            if "This group is private" in content:
                print("‚ùå –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è")
                return False
            
            if "Channel not found" in content:
                print("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message_count = len(re.findall(r'class="tgme_widget_message', content))
            print(f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            text_blocks = len(re.findall(r'class="tgme_widget_message_text', content))
            print(f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞: {text_blocks}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            print(f"\n–ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
            print("-" * 30)
            print(content[:1000])
            print("-" * 30)
            
            # –ò—â–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            crypto_patterns = [
                r'BTC', r'ETH', r'SOL', r'BNB', r'XRP', r'DOGE', r'DOT', r'ADA', r'MATIC'
            ]
            
            found_crypto = []
            for pattern in crypto_patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    found_crypto.extend(matches)
            
            if found_crypto:
                print(f"\n–ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {list(set(found_crypto))}")
            else:
                print(f"\n–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–¢–õ–ê–î–ö–ê TELEGRAM –ö–ê–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    channels = [
        "signalsbitcoinandethereum",
        "CryptoCapoTG",
        "cryptosignals",
        "binance_signals",
        "crypto_analytics"
    ]
    
    results = {}
    
    for username in channels:
        print(f"\n{'='*60}")
        success = debug_channel_content(username)
        results[username] = {
            "accessible": success,
            "checked_at": "2025-01-23"
        }
        
        if not success:
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª –≤—Ä—É—á–Ω—É—é –Ω–∞ https://t.me/{username}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('debug_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò –û–¢–õ–ê–î–ö–ò:")
    
    accessible = [k for k, v in results.items() if v['accessible']]
    inaccessible = [k for k, v in results.items() if not v['accessible']]
    
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(accessible)}")
    print(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(inaccessible)}")
    
    if accessible:
        print(f"\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
        for channel in accessible:
            print(f"  - {channel}")
    
    if inaccessible:
        print(f"\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
        for channel in inaccessible:
            print(f"  - {channel}")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ debug_results.json")

if __name__ == "__main__":
    main()
