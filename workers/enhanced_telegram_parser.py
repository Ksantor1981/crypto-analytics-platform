"""
Enhanced Telegram Parser with OCR Support
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ analyst_crypto –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import urllib.request
import json
import re
from datetime import datetime
import time
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SignalDirection(Enum):
    BUY = "BUY"
    SELL = "SELL" 
    LONG = "LONG"
    SHORT = "SHORT"
    HOLD = "HOLD"

@dataclass
class TelegramSignal:
    """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞"""
    symbol: str
    direction: SignalDirection
    entry_price: Optional[float] = None
    target_price: Optional[float] = None
    stop_loss: Optional[float] = None
    confidence: float = 0.0
    raw_text: str = ""
    cleaned_text: str = ""
    channel: str = ""
    message_id: str = ""
    timestamp: str = ""

class TelegramTextCleaner:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Telegram –∏ OCR
        self.text_corrections = {
            # HTML entities
            '&#036;': '$', '&#39;': "'", '&amp;': '&', '&lt;': '<', '&gt;': '>',
            '&nbsp;': ' ', '&quot;': '"',
            
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
            '–ë–¢–°': 'BTC', 'B–¢–°': 'BTC', '–°–¢–°': 'BTC', '–í–¢–°': 'BTC', 
            '–ï–¢–ù': 'ETH', '–ï–¢–ò': 'ETH', '–ï7–ù': 'ETH',
            '–ë–ò–ì': 'BUY', '–ë–ê–ô': 'BUY', '–õ–û–ù–ì': 'LONG', '–®–û–†–¢': 'SHORT',
            '–°–ï–õ–õ': 'SELL', '–¢–ê–†–ì–ï–¢': 'TARGET', '–¶–ï–õ–¨': 'TARGET', '–°–¢–û–ü': 'STOP',
            
            # –¶–∏—Ñ—Ä–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            '–û': '0', '–æ': '0', '–ó': '3', '–ë': '6', '–¢': '7', '–í': '8'
        }
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è–º–∏
        self.crypto_symbols = {
            'BTC', 'ETH', 'ADA', 'SOL', 'DOT', 'LINK', 'UNI', 'AVAX',
            'MATIC', 'ATOM', 'XRP', 'DOGE', 'SHIB', 'LTC', 'BCH', 'BNB',
            'USDT', 'USDC', 'BUSD', 'DAI', 'LUNA', 'NEAR', 'FTM', 'ALGO',
            'SYS', 'ENA', 'ZIG', 'ATA', 'MAVIA', 'DXY', 'ALTCOINS',
            'ORDI', 'BAND', 'BSW', 'WOO', 'JASMY', 'MEME', 'PUMP'
        }
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –æ—à–∏–±–æ–∫ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç"""
        if not text:
            return ""
        
        cleaned = text.strip()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º HTML –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        for wrong, correct in self.text_corrections.items():
            cleaned = cleaned.replace(wrong, correct)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = re.sub(r'\s+', ' ', cleaned)
        
        logger.debug(f"Cleaned: '{text[:50]}...' ‚Üí '{cleaned[:50]}...'")
        return cleaned

class EnhancedSignalExtractor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.cleaner = TelegramTextCleaner()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_patterns = {
            # –ü–æ–ª–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Ü–µ–Ω–∞–º–∏ (–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
            'full_signal': [
                r'(\w+)/USDT\s+(LONG|SHORT|BUY|SELL)\s+Entry[:\s]*\$?([\d,]+\.?\d*)\s+Target[:\s]*\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+(LONG|SHORT|BUY|SELL)\s+\$?([\d,]+\.?\d*)\s*[‚Üí‚û°Ô∏è]\s*\$?([\d,]+\.?\d*)',
                r'[üöÄüìâüî•üí∞]\s*([A-Z]+)\s+(LONG|SHORT|BUY|SELL)\s+Entry[:\s]*\$?([\d,]+\.?\d*)',
                r'LONGING\s+\$([A-Z]+)\s+HERE',
                r'(\w+)\s+(LONG|SHORT|BUY|SELL)\s+@\s+\$?([\d,]+\.?\d*)',
            ],
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å)
            'direction_signal': [
                r'([A-Z]+)\s+(LONG|SHORT|BUY|SELL)\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+(LONG|SHORT|BUY|SELL)',
                r'[üöÄüìâüî•üí∞]\s*([A-Z]+)\s+(LONG|SHORT|BUY|SELL)',
                r'(\w+)\s+(LONG|SHORT|BUY|SELL)\s+update',
                r'\$([A-Z]+)\s+(LONG|SHORT|BUY|SELL)',
            ],
            
            # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º (—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å)
            'technical_analysis': [
                r'\$([A-Z]+)\s+(gives|breaks|reaches|targets)\s+.*?(\d+[kK]?)',
                r'([A-Z]+)\s+(bullish|bearish|pumping|dumping)',
                r'([A-Z]+)\s+to\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+(resistance|support)\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+update.*?(\d+[kK]?)',
                # –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                r'([A-Z]+)\s+breaks\s+(under|below)\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+targets?\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+support\s+at\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+resistance\s+at\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+key\s+zone\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+)\s+main\s+support\s+\$?([\d,]+\.?\d*)',
            ],
            
            # –¶–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã (–Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
            'price_target': [
                r'([A-Z]+)\s+target[:\s]*\$?([\d,]+\.?\d*)',
                r'([A-Z]+).*?next.*?\$?([\d,]+\.?\d*)',
                r'([A-Z]+).*?above\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+).*?below\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+).*?towards\s+\$?([\d,]+\.?\d*)',
                r'([A-Z]+).*?down\s+to\s+\$?([\d,]+\.?\d*)',
            ]
        }
    
    def extract_signals(self, text: str, channel: str = "", message_id: str = "") -> List[TelegramSignal]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        if not text or not text.strip():
            return []
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        cleaned_text = self.cleaner.clean_text(text)
        
        signals = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for category, patterns in self.signal_patterns.items():
            category_signals = self._extract_by_patterns(patterns, cleaned_text, text, category)
            signals.extend(category_signals)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_signals = self._remove_duplicates(signals)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for signal in unique_signals:
            signal.channel = channel
            signal.message_id = message_id
            signal.timestamp = datetime.now().isoformat()
        
        logger.info(f"Extracted {len(unique_signals)} signals from text: '{text[:50]}...'")
        return unique_signals
    
    def _extract_by_patterns(self, patterns: List[str], cleaned_text: str, raw_text: str, category: str) -> List[TelegramSignal]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        
        signals = []
        
        for pattern in patterns:
            matches = re.finditer(pattern, cleaned_text, re.IGNORECASE)
            
            for match in matches:
                groups = match.groups()
                
                if len(groups) >= 2:
                    signal = self._create_signal_from_match(groups, cleaned_text, raw_text, category)
                    if signal:
                        signals.append(signal)
        
        return signals
    
    def _create_signal_from_match(self, groups: Tuple, cleaned_text: str, raw_text: str, category: str) -> Optional[TelegramSignal]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ regex –ø–æ–∏—Å–∫–∞"""
        
        try:
            symbol = groups[0].upper()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
            if not self._is_valid_crypto_symbol(symbol):
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            direction = self._parse_direction(groups[1] if len(groups) > 1 else "", cleaned_text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
            entry_price = self._parse_price(groups[2]) if len(groups) > 2 else None
            target_price = self._parse_price(groups[3]) if len(groups) > 3 else None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            confidence = self._calculate_confidence(category, len(groups), entry_price, target_price)
            
            signal = TelegramSignal(
                symbol=symbol,
                direction=direction,
                entry_price=entry_price,
                target_price=target_price,
                confidence=confidence,
                raw_text=raw_text[:200] + "..." if len(raw_text) > 200 else raw_text,
                cleaned_text=cleaned_text[:200] + "..." if len(cleaned_text) > 200 else cleaned_text
            )
            
            return signal
            
        except Exception as e:
            logger.error(f"Error creating signal from match: {e}")
            return None
    
    def _is_valid_crypto_symbol(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –≤–∞–ª–∏–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        return symbol in self.cleaner.crypto_symbols
    
    def _parse_direction(self, direction_text: str, full_text: str = "") -> SignalDirection:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        direction_upper = direction_text.upper()
        full_text_upper = full_text.upper()
        
        # –Ø–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if direction_upper in ['BUY', 'LONG', 'BULL', 'BULLISH', 'PUMPING']:
            return SignalDirection.BUY
        elif direction_upper in ['SELL', 'SHORT', 'BEAR', 'BEARISH', 'DUMPING']:
            return SignalDirection.SELL
        elif 'LONG' in direction_upper:
            return SignalDirection.LONG
        elif 'SHORT' in direction_upper:
            return SignalDirection.SHORT
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if full_text:
            # Bearish –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if any(word in full_text_upper for word in ['BEARISH', 'DUMPING', 'DOWN', 'BREAKS UNDER', 'CAPITULATION', 'DECLINE']):
                return SignalDirection.SELL
            # Bullish –∫–æ–Ω—Ç–µ–∫—Å—Ç
            elif any(word in full_text_upper for word in ['BULLISH', 'PUMPING', 'UP', 'BREAKS ABOVE', 'RALLY', 'RECOVERY']):
                return SignalDirection.BUY
        
        return SignalDirection.HOLD
    
    def _parse_price(self, price_text: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not price_text:
            return None
            
        try:
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            cleaned_price = re.sub(r'[\$,\s]', '', price_text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (k, K –¥–ª—è —Ç—ã—Å—è—á)
            if cleaned_price.endswith(('k', 'K')):
                cleaned_price = cleaned_price[:-1]
                return float(cleaned_price) * 1000
            
            return float(cleaned_price)
            
        except (ValueError, AttributeError):
            return None
    
    def _calculate_confidence(self, category: str, groups_count: int, entry_price: Optional[float], target_price: Optional[float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ"""
        
        base_confidence = {
            'full_signal': 0.85,         # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
            'direction_signal': 0.65,    # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
            'technical_analysis': 0.60,  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å)
            'price_target': 0.45         # –¶–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏ (–Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
        }.get(category, 0.25)
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if entry_price:
            base_confidence += 0.15
        if target_price:
            base_confidence += 0.10
        if groups_count >= 4:
            base_confidence += 0.05
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if base_confidence < 0.4:
            base_confidence = 0.0  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        
        return min(base_confidence, 1.0)
    
    def _remove_duplicates(self, signals: List[TelegramSignal]) -> List[TelegramSignal]:
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        seen = set()
        unique_signals = []
        
        for signal in signals:
            key = (signal.symbol, signal.direction.value)
            if key not in seen:
                seen.add(key)
                unique_signals.append(signal)
        
        return unique_signals

class EnhancedTelegramParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.opener = urllib.request.build_opener()
        self.opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
        ]
        self.signal_extractor = EnhancedSignalExtractor()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            from universal_signal_parser import UniversalSignalParser
            self.universal_parser = UniversalSignalParser()
            logger.info("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        except ImportError:
            self.universal_parser = None
            logger.warning("‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def get_channel_content(self, username: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞"""
        try:
            url = f"https://t.me/s/{username}"
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {username}...")
            
            with self.opener.open(url, timeout=15) as response:
                content = response.read().decode('utf-8')
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {username}")
                return content
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {username}: {e}")
            return None
    
    def extract_messages_from_html(self, html_content: str, username: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ HTML"""
        messages = []
        
        if not html_content:
            return messages
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
        message_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
        matches = re.findall(message_pattern, html_content, re.DOTALL)
        
        for i, text_html in enumerate(matches):
            # –û—á–∏—â–∞–µ–º HTML –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = re.sub(r'<[^>]+>', '', text_html)
            text = re.sub(r'&nbsp;', ' ', text)
            text = re.sub(r'&amp;', '&', text)
            text = re.sub(r'&lt;', '<', text)
            text = re.sub(r'&gt;', '>', text)
            text = re.sub(r'&#036;', '$', text)
            text = re.sub(r'&#39;', "'", text)
            text = text.strip()
            
            if text and len(text) > 10:
                messages.append({
                    'id': f"msg_{i}",
                    'text': text,
                    'date': datetime.now().isoformat(),
                    'username': username
                })
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
        return messages
    
    def parse_channel(self, username: str, hours_back: int = 24) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        logger.info(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞
        content = self.get_channel_content(username)
        if not content:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = self.extract_messages_from_html(content, username)
        if not messages:
            logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        all_signals = []
        for message in messages:
            signals = self._extract_signals_from_message(message, username)
            all_signals.extend(signals)
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {username}")
        return all_signals
    
    def _extract_signals_from_message(self, message: Dict, username: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–æ–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        signals = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if self.universal_parser:
            try:
                universal_signal = self.universal_parser.parse_signal(message['text'], username)
                if universal_signal:
                    standard_signal = self.universal_parser.convert_to_standard_format(universal_signal)
                    standard_signal['message_id'] = message['id']
                    standard_signal['original_text'] = message['text'][:200] + "..." if len(message['text']) > 200 else message['text']
                    standard_signal['cleaned_text'] = message['text'][:200] + "..." if len(message['text']) > 200 else message['text']
                    signals.append(standard_signal)
                    logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑–≤–ª–µ—á–µ–Ω: {universal_signal.asset} {universal_signal.direction}")
                    return signals  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–µ –∏—â–µ–º –¥—Ä—É–≥–∏–µ
            except Exception as e:
                logger.debug(f"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        telegram_signals = self.signal_extractor.extract_signals(
            message['text'], 
            channel=username, 
            message_id=message['id']
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for signal in telegram_signals:
            signal_dict = {
                'id': f"{username}_{signal.message_id}_{signal.symbol}",
                'asset': signal.symbol,
                'direction': signal.direction.value,
                'entry_price': signal.entry_price,
                'target_price': signal.target_price,
                'stop_loss': signal.stop_loss,
                'confidence': round(signal.confidence * 100, 1),
                'channel': signal.channel,
                'message_id': signal.message_id,
                'timestamp': signal.timestamp,
                'extraction_time': datetime.now().isoformat(),
                'original_text': signal.raw_text,
                'cleaned_text': signal.cleaned_text,
                'bybit_available': self._check_bybit_availability(signal.symbol),
                'signal_type': 'telegram'
            }
            signals.append(signal_dict)
        
        return signals
    
    def _check_bybit_availability(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –Ω–∞ Bybit"""
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä –Ω–∞ Bybit
        bybit_pairs = {
            'BTC', 'ETH', 'SOL', 'AVAX', 'MATIC', 'DOT', 'LINK', 'UNI',
            'DOGE', 'ADA', 'XRP', 'LTC', 'BCH', 'ETC', 'ATOM', 'NEAR',
            'ORDI', 'BAND', 'BSW', 'WOO', 'JASMY', 'MEME', 'PUMP'
        }
        return symbol in bybit_pairs
    
    def parse_all_channels(self, channels: List[str], hours_back: int = 24) -> Tuple[List[Dict], Dict]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        all_signals = []
        channel_stats = {}
        
        for username in channels:
            try:
                signals = self.parse_channel(username, hours_back)
                all_signals.extend(signals)
                
                channel_stats[username] = {
                    'signals_found': len(signals),
                    'channel_name': username
                }
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {username}: {e}")
                channel_stats[username] = {
                    'signals_found': 0,
                    'channel_name': username,
                    'error': str(e)
                }
        
        return all_signals, channel_stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = EnhancedTelegramParser()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    channels = [
        'CryptoCapoTG',
        'signalsbitcoinandethereum',
        'cryptosignals',
        'binance_signals',
        'crypto_analytics',
        'binance_signals_official',
        'coinbase_signals',
        'kraken_signals',
        'crypto_signals_daily',
        'bitcoin_signals',
        'ethereum_signals_daily',
        'altcoin_signals_pro',
        'defi_signals_daily',
        'trading_signals_24_7',
        'crypto_analytics_pro',
        'market_signals',
        'price_alerts',
        'crypto_news_signals',
        'BinanceKillers_Free',  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        'Wolf_of_Trading',
        'Crypto_Inner_Circle',
        'Traders_Diary',
        'Crypto_Trading_RU'
    ]
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    signals, stats = parser.parse_all_channels(channels, hours_back=24)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = {
        'success': True,
        'total_signals': len(signals),
        'signals': signals,
        'channel_stats': stats,
        'collection_time': datetime.now().isoformat(),
        'hours_back': 24,
        'parser_version': 'enhanced_v2.0_with_universal'
    }
    
    with open('enhanced_telegram_signals.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    logger.info(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    logger.info(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: enhanced_telegram_signals.json")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
    for channel, stat in stats.items():
        logger.info(f"üì± {channel}: {stat['signals_found']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if signals:
        logger.info(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
        for i, signal in enumerate(signals[:10], 1):  # –ü–µ—Ä–≤—ã–µ 10
            logger.info(f"   {i}. {signal['asset']} {signal['direction']} ${signal['entry_price'] or 'N/A'} (conf: {signal['confidence']}%)")

if __name__ == "__main__":
    main()
