#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Å–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–æ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import asyncio
import aiohttp
import json
import sys
import re
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional, Set
from bs4 import BeautifulSoup
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChannelDiscoverySystem:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å–æ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        self.discovered_channels = set()
        self.active_channels = []
        self.channel_sources = {
            'telegram': [],
            'reddit': [],
            'discord': [],  # –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            'twitter': [],  # –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            'youtube': []   # –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.known_channels = {
            'telegram': [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                "binancekillers", "CryptoCapoTG", "io_altsignals", 
                "Wolf_of_Trading_singals", "fatpigsignals", "Signals_BTC_ETH",
                "cryptoceo_alex", "Crypto_Futures_Signals", "TradingViewIdeas",
                "Crypto_Inner_Circler", "CryptoSignalsPro", "BitcoinSignals",
                "AltcoinSignals", "FuturesSignals", "SpotSignals",
                
                # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
                "CryptoCompass", "TradingView", "CoinDesk", "CoinTelegraph",
                "CryptoNews", "BitcoinNews", "EthereumNews", "AltcoinNews",
                
                # VIP –∏ –ø—Ä–µ–º–∏—É–º –∫–∞–Ω–∞–ª—ã
                "VIP_Crypto_Signals", "PremiumSignals", "EliteTraders",
                "CryptoMasters", "TradingElite", "SignalMasters",
                
                # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                "CryptoNews", "BitcoinNews", "EthereumNews", "AltcoinNews",
                "DeFiNews", "NFTNews", "MetaverseNews", "Web3News",
                
                # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                "CryptoTutorials", "TradingEducation", "CryptoAcademy",
                "BlockchainBasics", "DeFiEducation", "NFTEducation"
            ],
            'reddit': [
                # –û—Å–Ω–æ–≤–Ω—ã–µ subreddit'—ã
                "CryptoCurrency", "Bitcoin", "Ethereum", "CryptoMarkets",
                "CryptoMoonShots", "CryptoCurrencyTrading", "CryptoSignals",
                "BitcoinMarkets", "EthereumMarkets", "AltcoinMarkets",
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ subreddit'—ã
                "CryptoCurrencyTrading", "CryptoSignals", "CryptoMoonShots",
                "CryptoCurrency", "BitcoinMarkets", "EthereumMarkets",
                "AltcoinMarkets", "CryptoCurrencyTrading", "CryptoSignals",
                
                # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ subreddit'—ã
                "CryptoNews", "BitcoinNews", "EthereumNews", "AltcoinNews",
                "DeFiNews", "NFTNews", "MetaverseNews", "Web3News"
            ]
        }
    
    async def discover_telegram_channels(self) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤"""
        
        print("üîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï TELEGRAM –ö–ê–ù–ê–õ–û–í")
        print("="*80)
        
        discovered_channels = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        for channel in self.known_channels['telegram']:
            try:
                is_active = await self.check_telegram_channel_status(channel)
                if is_active:
                    channel_info = await self.get_telegram_channel_info(channel)
                    if channel_info:
                        discovered_channels.append(channel_info)
                        print(f"‚úÖ @{channel}: –ê–ö–¢–ò–í–ï–ù - {channel_info.get('subscribers', 'N/A')} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                    else:
                        print(f"‚ö†Ô∏è @{channel}: –î–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                else:
                    print(f"‚ùå @{channel}: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ùå @{channel}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
        
        # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        new_channels = await self.find_telegram_recommendations(discovered_channels)
        discovered_channels.extend(new_channels)
        
        return discovered_channels
    
    async def check_telegram_channel_status(self, channel_username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∫–∞–Ω–∞–ª–∞"""
        
        username = channel_username.replace('@', '')
        url = f"https://t.me/s/{username}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    return response.status == 200
        except:
            return False
    
    async def get_telegram_channel_info(self, channel_username: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram –∫–∞–Ω–∞–ª–µ"""
        
        username = channel_username.replace('@', '')
        url = f"https://t.me/{username}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        html = await response.text()
                        return self.parse_telegram_channel_info(html, channel_username)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_username}: {e}")
        
        return None
    
    def parse_telegram_channel_info(self, html: str, channel_username: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        
        soup = BeautifulSoup(html, 'html.parser')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        title_elem = soup.find('div', class_='tgme_channel_info_header_title')
        title = title_elem.get_text(strip=True) if title_elem else channel_username
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description_elem = soup.find('div', class_='tgme_channel_info_description')
        description = description_elem.get_text(strip=True) if description_elem else ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_elem = soup.find('div', class_='tgme_channel_info_counter')
        subscribers = subscribers_elem.get_text(strip=True) if subscribers_elem else "N/A"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = self.classify_channel_content(description, title)
        
        return {
            'username': channel_username,
            'title': title,
            'description': description,
            'subscribers': subscribers,
            'content_type': content_type,
            'platform': 'telegram',
            'url': f"https://t.me/{channel_username.replace('@', '')}",
            'discovered_at': datetime.now().isoformat(),
            'is_active': True
        }
    
    def classify_channel_content(self, description: str, title: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞"""
        
        text = f"{title} {description}".lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        signal_patterns = ['signal', 'trade', 'trading', 'buy', 'sell', 'long', 'short', 'entry', 'target']
        news_patterns = ['news', 'update', 'announcement', 'breaking', 'latest']
        analysis_patterns = ['analysis', 'technical', 'fundamental', 'chart', 'price']
        educational_patterns = ['learn', 'education', 'tutorial', 'guide', 'how to']
        
        if any(pattern in text for pattern in signal_patterns):
            return 'signals'
        elif any(pattern in text for pattern in news_patterns):
            return 'news'
        elif any(pattern in text for pattern in analysis_patterns):
            return 'analysis'
        elif any(pattern in text for pattern in educational_patterns):
            return 'educational'
        else:
            return 'mixed'
    
    async def find_telegram_recommendations(self, known_channels: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        
        print("\nüîç –ü–û–ò–°–ö –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ù–û–í–´–• –ö–ê–ù–ê–õ–û–í")
        
        new_channels = []
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
        for channel in known_channels:
            if channel.get('description'):
                mentioned_channels = self.extract_mentioned_channels(channel['description'])
                for mentioned in mentioned_channels:
                    if mentioned not in [c['username'] for c in known_channels]:
                        try:
                            is_active = await self.check_telegram_channel_status(mentioned)
                            if is_active:
                                channel_info = await self.get_telegram_channel_info(mentioned)
                                if channel_info:
                                    new_channels.append(channel_info)
                                    print(f"üéØ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: @{mentioned}")
                        except:
                            continue
        
        return new_channels
    
    def extract_mentioned_channels(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
        patterns = [
            r'@(\w+)',
            r't\.me/(\w+)',
            r'telegram\.me/(\w+)',
            r'–∫–∞–Ω–∞–ª (\w+)',
            r'channel (\w+)'
        ]
        
        mentioned = set()
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            mentioned.update(matches)
        
        return list(mentioned)
    
    async def discover_reddit_channels(self) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö Reddit –∫–∞–Ω–∞–ª–æ–≤"""
        
        print("\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï REDDIT –ö–ê–ù–ê–õ–û–í")
        print("="*80)
        
        discovered_channels = []
        
        for subreddit in self.known_channels['reddit']:
            try:
                subreddit_info = await self.get_reddit_subreddit_info(subreddit)
                if subreddit_info:
                    discovered_channels.append(subreddit_info)
                    print(f"‚úÖ r/{subreddit}: –ê–ö–¢–ò–í–ï–ù - {subreddit_info.get('subscribers', 'N/A')} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                else:
                    print(f"‚ùå r/{subreddit}: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ùå r/{subreddit}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
        
        return discovered_channels
    
    async def get_reddit_subreddit_info(self, subreddit: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Reddit subreddit"""
        
        url = f"https://www.reddit.com/r/{subreddit}/about.json"
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self.parse_reddit_subreddit_info(data, subreddit)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ subreddit {subreddit}: {e}")
        
        return None
    
    def parse_reddit_subreddit_info(self, data: Dict[str, Any], subreddit: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Reddit subreddit"""
        
        if 'data' not in data:
            return None
        
        subreddit_data = data['data']
        
        return {
            'username': f"r/{subreddit}",
            'title': subreddit_data.get('title', subreddit),
            'description': subreddit_data.get('public_description', ''),
            'subscribers': subreddit_data.get('subscribers', 'N/A'),
            'content_type': 'mixed',  # Reddit subreddit'—ã –æ–±—ã—á–Ω–æ —Å–º–µ—à–∞–Ω–Ω—ã–µ
            'platform': 'reddit',
            'url': f"https://www.reddit.com/r/{subreddit}",
            'discovered_at': datetime.now().isoformat(),
            'is_active': True
        }
    
    async def discover_all_channels(self) -> Dict[str, List[Dict[str, Any]]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å–æ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í –°–û –í–°–ï–• –†–ï–°–£–†–°–û–í")
        print("="*100)
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
        print("="*100)
        
        all_channels = {}
        
        # Telegram –∫–∞–Ω–∞–ª—ã
        print("\nüì± TELEGRAM –ö–ê–ù–ê–õ–´")
        telegram_channels = await self.discover_telegram_channels()
        all_channels['telegram'] = telegram_channels
        
        # Reddit –∫–∞–Ω–∞–ª—ã
        print("\nüî¥ REDDIT –ö–ê–ù–ê–õ–´")
        reddit_channels = await self.discover_reddit_channels()
        all_channels['reddit'] = reddit_channels
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self.save_discovered_channels(all_channels)
        
        return all_channels
    
    async def save_discovered_channels(self, all_channels: Dict[str, List[Dict[str, Any]]]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        filename = f"discovered_channels_{timestamp}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(all_channels, f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        await self.create_discovery_report(all_channels, filename)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
    
    async def create_discovery_report(self, all_channels: Dict[str, List[Dict[str, Any]]], filename: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        
        report_filename = f"channel_discovery_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write("# üìä –û–¢–ß–ï–¢ –û–ë –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ò –ö–ê–ù–ê–õ–û–í\n\n")
            f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}\n")
            f.write(f"**–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:** {filename}\n\n")
            
            total_channels = sum(len(channels) for channels in all_channels.values())
            f.write(f"**–í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:** {total_channels}\n\n")
            
            for platform, channels in all_channels.items():
                f.write(f"## {platform.upper()}\n")
                f.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤:** {len(channels)}\n\n")
                
                for channel in channels:
                    f.write(f"### {channel['username']}\n")
                    f.write(f"- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel['title']}\n")
                    f.write(f"- **–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:** {channel['subscribers']}\n")
                    f.write(f"- **–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {channel['content_type']}\n")
                    f.write(f"- **URL:** {channel['url']}\n")
                    f.write(f"- **–û–ø–∏—Å–∞–Ω–∏–µ:** {channel['description'][:100]}...\n\n")
        
        print(f"üìã –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_filename}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–í")
    print("–°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å–æ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    discovery_system = ChannelDiscoverySystem()
    all_channels = await discovery_system.discover_all_channels()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*100}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*100}")
    
    total_channels = 0
    for platform, channels in all_channels.items():
        print(f"\nüì± {platform.upper()}: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
        total_channels += len(channels)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        sorted_channels = sorted(channels, key=lambda x: str(x.get('subscribers', '0')), reverse=True)
        for i, channel in enumerate(sorted_channels[:5], 1):
            print(f"   {i}. {channel['username']} - {channel.get('subscribers', 'N/A')} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
    print(f"\nüéØ –í–°–ï–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–û: {total_channels} –∫–∞–Ω–∞–ª–æ–≤")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main())
