import urllib.request
import json
import re
from datetime import datetime, timedelta
import time

class FixedWebParser:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.opener = urllib.request.build_opener()
        self.opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ]
    
    def get_channel_content(self, username):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞"""
        try:
            url = f"https://t.me/s/{username}"
            print(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {username}...")
            
            with self.opener.open(url, timeout=10) as response:
                content = response.read().decode('utf-8')
                return content
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {username}: {e}")
            return None
    
    def extract_messages_from_html(self, html_content, username):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ HTML —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
        messages = []
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_pattern = r'<div class="tgme_widget_message[^"]*"[^>]*data-post="(\d+)"[^>]*>(.*?)</div>\s*</div>\s*</div>'
        
        matches = re.findall(message_pattern, html_content, re.DOTALL)
        
        for match in matches:
            message_id, message_html = match
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ
            text_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
            text_match = re.search(text_pattern, message_html, re.DOTALL)
            
            if text_match:
                text_html = text_match.group(1)
                # –û—á–∏—â–∞–µ–º HTML –∏–∑ —Ç–µ–∫—Å—Ç–∞
                text = re.sub(r'<[^>]+>', '', text_html)
                text = text.strip()
                
                # –ò—â–µ–º –¥–∞—Ç—É
                date_pattern = r'<time[^>]*datetime="([^"]*)"[^>]*>'
                date_match = re.search(date_pattern, message_html)
                date_str = date_match.group(1) if date_match else datetime.now().isoformat()
                
                if text:
                    messages.append({
                        'id': message_id,
                        'text': text,
                        'date': date_str,
                        'username': username
                    })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
        return messages
    
    def extract_signals_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        signals = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        patterns = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            r'(\w+)/USDT\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)\s+Target:\s*\$?([\d,]+\.?\d*)\s+Stop:\s*\$?([\d,]+\.?\d*)',
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)\s+Target:\s*\$?([\d,]+\.?\d*)\s+Stop:\s*\$?([\d,]+\.?\d*)',
            r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)\s*[‚Üí‚û°Ô∏è]\s*\$?([\d,]+\.?\d*)\s*üõë\s*\$?([\d,]+\.?\d*)',
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            r'(\w+)\s+(LONG|SHORT)\s+[+-]\d+%\s+\$?([\d,]+\.?\d*)',
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            r'(\w+)\.(LONG|SHORT)\.\$?([\d,]+\.?\d*)',
            r'(\w+)_(LONG|SHORT)_\$?([\d,]+\.?\d*)',
            
            # –§–æ—Ä–º–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏
            r'üöÄ\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            r'üìâ\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            r'üî•\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            
            # –§–æ—Ä–º–∞—Ç—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            r'(\w+)\s+(LONG|SHORT)\s+\+(\d+)%\s+\$?([\d,]+\.?\d*)',
            r'(\w+)\s+(LONG|SHORT)\s+-(\d+)%\s+\$?([\d,]+\.?\d*)',
            
            # –§–æ—Ä–º–∞—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏ –∏ –∑–∞–ø—è—Ç—ã–º–∏
            r'(\w+)\s+(LONG|SHORT)\s+@\s*\$?([\d,]+\.?\d*)',
            r'(\w+)\s+(LONG|SHORT)\s+:\s*\$?([\d,]+\.?\d*)',
        ]
        
        for pattern in patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                if len(match.groups()) >= 3:
                    signal = {
                        "asset": match.group(1).upper(),
                        "direction": match.group(2).upper(),
                        "entry_price": float(match.group(3).replace(',', '')),
                        "target_price": None,
                        "stop_loss": None,
                        "pattern_used": pattern[:50] + "..."
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º target –∏ stop loss –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
                    if len(match.groups()) >= 5:
                        signal["target_price"] = float(match.group(4).replace(',', ''))
                        signal["stop_loss"] = float(match.group(5).replace(',', ''))
                    
                    signals.append(signal)
        
        return signals
    
    def collect_signals_from_channel(self, username, hours_back=24):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        print(f"üîç –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}...")
        
        html_content = self.get_channel_content(username)
        if not html_content:
            return []
        
        messages = self.extract_messages_from_html(html_content, username)
        signals = []
        
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        for message in messages:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                date_str = message['date']
                if 'T' in date_str:
                    message_time = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                else:
                    message_time = datetime.now()
                
                if message_time >= cutoff_time:
                    extracted_signals = self.extract_signals_from_text(message['text'])
                    
                    for signal in extracted_signals:
                        signal.update({
                            "channel_username": username,
                            "message_id": message['id'],
                            "message_date": message['date'],
                            "message_text": message['text'][:200] + "..." if len(message['text']) > 200 else message['text']
                        })
                        signals.append(signal)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {username}")
        return signals
    
    def collect_all_signals(self, channels, hours_back=24):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        
        all_signals = []
        channel_stats = {}
        
        for channel in channels:
            username = channel.get('username', channel)
            try:
                signals = self.collect_signals_from_channel(username, hours_back)
                all_signals.extend(signals)
                channel_stats[username] = {
                    "signals_found": len(signals),
                    "channel_name": channel.get('name', username)
                }
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(3)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {username}: {e}")
                channel_stats[username] = {
                    "signals_found": 0,
                    "error": str(e),
                    "channel_name": channel.get('name', username)
                }
        
        results = {
            "success": True,
            "total_signals": len(all_signals),
            "signals": all_signals,
            "channel_stats": channel_stats,
            "collection_time": datetime.now().isoformat(),
            "hours_back": hours_back
        }
        
        print(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –í–ï–ë-–ü–ê–†–°–ï–†–ê TELEGRAM –ö–ê–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    channels = [
        {"username": "CryptoCapoTG", "name": "Crypto Capo"},
        {"username": "cryptosignals", "name": "Crypto Signals"},
        {"username": "binance_signals", "name": "Binance Signals"}
    ]
    
    parser = FixedWebParser()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    results = parser.collect_all_signals(channels, hours_back=24)
    
    if results['success']:
        print(f"\n‚úÖ –°–ë–û–† –ó–ê–í–ï–†–®–ï–ù:")
        print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {results['total_signals']}")
        
        for username, stats in results['channel_stats'].items():
            print(f"  {username}: {stats['signals_found']} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('fixed_web_signals.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fixed_web_signals.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if results['signals']:
            print(f"\nüìä –ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
            for i, signal in enumerate(results['signals'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  {i}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
                print(f"     –ö–∞–Ω–∞–ª: {signal['channel_username']}")
                if signal['target_price']:
                    print(f"     Target: ${signal['target_price']}")
                if signal['stop_loss']:
                    print(f"     Stop: ${signal['stop_loss']}")
                print()
        else:
            print(f"\n‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("- –ö–∞–Ω–∞–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            print("- –°–∏–≥–Ω–∞–ª—ã –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
            print("- –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {results.get('error', 'Unknown error')}")

if __name__ == "__main__":
    main()
