import urllib.request
import json
import re
from datetime import datetime

def extract_messages_simple(username):
    """–ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}")
    
    try:
        url = f"https://t.me/s/{username}"
        
        opener = urllib.request.build_opener()
        opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ]
        
        with opener.open(url, timeout=10) as response:
            content = response.read().decode('utf-8')
            
            messages = []
            
            # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            text_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
            text_matches = re.findall(text_pattern, content, re.DOTALL)
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(text_matches)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
            
            for i, text_html in enumerate(text_matches):
                # –û—á–∏—â–∞–µ–º HTML
                text = re.sub(r'<[^>]+>', '', text_html)
                text = text.strip()
                
                if text:
                    # –ò—â–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_id = f"{username}_{i+1}"
                    
                    messages.append({
                        'id': message_id,
                        'text': text,
                        'date': datetime.now().isoformat(),
                        'username': username
                    })
                    
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {text[:100]}...")
            
            return messages
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def extract_signals_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    signals = []
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    patterns = [
        # BTC LONG $110,500
        r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        # üöÄ BTC LONG $110,500
        r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        # BTC/USDT LONG $110,500
        r'(\w+)/USDT\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
    ]
    
    for pattern in patterns:
        matches = re.finditer(pattern, text, re.IGNORECASE)
        for match in matches:
            if len(match.groups()) >= 3:
                signal = {
                    "asset": match.group(1).upper(),
                    "direction": match.group(2).upper(),
                    "entry_price": float(match.group(3).replace(',', '')),
                    "pattern_used": pattern[:30] + "..."
                }
                signals.append(signal)
    
    return signals

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–°–¢–û–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
    username = "CryptoCapoTG"
    
    messages = extract_messages_simple(username)
    
    if messages:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        all_signals = []
        
        for message in messages:
            signals = extract_signals_from_text(message['text'])
            for signal in signals:
                signal.update({
                    "channel_username": username,
                    "message_id": message['id'],
                    "message_text": message['text'][:200] + "..." if len(message['text']) > 200 else message['text']
                })
                all_signals.append(signal)
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        for i, signal in enumerate(all_signals, 1):
            print(f"  {i}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
            print(f"     –¢–µ–∫—Å—Ç: {signal['message_text'][:100]}...")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            "success": True,
            "total_signals": len(all_signals),
            "signals": all_signals,
            "collection_time": datetime.now().isoformat()
        }
        
        with open('simple_signals.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ simple_signals.json")
        
    else:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()
