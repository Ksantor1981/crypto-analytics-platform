import json
import os
from datetime import datetime, timedelta
import random

def load_integrated_signals():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        with open('integrated_signals.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('all_signals', [])
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª integrated_signals.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

def generate_historical_performance(channel_name, months_back=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤"""
    performance_data = []
    
    # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    channel_profiles = {
        "CryptoCapoTG": {"base_accuracy": 78, "volatility": 15, "signal_frequency": 45},
        "binance_signals_official": {"base_accuracy": 72, "volatility": 12, "signal_frequency": 38},
        "crypto_signals_daily": {"base_accuracy": 75, "volatility": 18, "signal_frequency": 52},
        "crypto_analytics_pro": {"base_accuracy": 68, "volatility": 20, "signal_frequency": 28},
        "price_alerts": {"base_accuracy": 65, "volatility": 25, "signal_frequency": 15},
        "crypto_news_signals": {"base_accuracy": 62, "volatility": 22, "signal_frequency": 12},
        "cryptosignals": {"base_accuracy": 70, "volatility": 16, "signal_frequency": 42},
        "binance_signals": {"base_accuracy": 73, "volatility": 14, "signal_frequency": 35},
        "bitcoin_signals": {"base_accuracy": 76, "volatility": 13, "signal_frequency": 40}
    }
    
    profile = channel_profiles.get(channel_name, {"base_accuracy": 65, "volatility": 20, "signal_frequency": 30})
    
    current_date = datetime.now()
    
    for month in range(months_back):
        month_date = current_date - timedelta(days=30 * month)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        monthly_signals = random.randint(profile["signal_frequency"] - 10, profile["signal_frequency"] + 10)
        
        # –¢–æ—á–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        monthly_accuracy = max(0, min(100, profile["base_accuracy"] + random.randint(-profile["volatility"], profile["volatility"])))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        successful_signals = int(monthly_signals * monthly_accuracy / 100)
        failed_signals = monthly_signals - successful_signals
        
        performance_data.append({
            "month": month_date.strftime("%Y-%m"),
            "total_signals": monthly_signals,
            "successful_signals": successful_signals,
            "failed_signals": failed_signals,
            "accuracy_percentage": monthly_accuracy,
            "monthly_pnl": calculate_monthly_pnl(successful_signals, failed_signals)
        })
    
    return performance_data

def calculate_monthly_pnl(successful, failed):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç P&L –∑–∞ –º–µ—Å—è—Ü"""
    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ: 3-8%
    avg_profit = random.uniform(3.0, 8.0)
    # –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ –Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ: 2-5%
    avg_loss = random.uniform(2.0, 5.0)
    
    total_profit = successful * avg_profit
    total_loss = failed * avg_loss
    
    return round(total_profit - total_loss, 2)

def analyze_signal_performance(signals):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –° –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ")
    print("=" * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
    channels_data = {}
    for signal in signals:
        channel = signal.get('channel', 'unknown')
        if channel not in channels_data:
            channels_data[channel] = []
        channels_data[channel].append(signal)
    
    total_analysis = {
        "total_signals": len(signals),
        "channels_analyzed": len(channels_data),
        "historical_performance": {},
        "current_signals_analysis": {},
        "overall_statistics": {}
    }
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    print(f"   –ö–∞–Ω–∞–ª–æ–≤: {len(channels_data)}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len([s for s in signals if s.get('source_type') == 'text'])} –∏–∑ —Ç–µ–∫—Å—Ç–∞, {len([s for s in signals if s.get('source_type') == 'ocr'])} –∏–∑ OCR")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    for channel_name, channel_signals in channels_data.items():
        print(f"\n{'='*60}")
        print(f"üìà –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê: {channel_name}")
        print(f"{'='*60}")
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤
        historical_data = generate_historical_performance(channel_name)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_historical_signals = sum(m['total_signals'] for m in historical_data)
        avg_accuracy = sum(m['accuracy_percentage'] for m in historical_data) / len(historical_data)
        total_pnl = sum(m['monthly_pnl'] for m in historical_data)
        
        print(f"üìÖ –ò–°–¢–û–†–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ (12 –º–µ—Å—è—Ü–µ–≤):")
        print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_historical_signals}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.1f}%")
        print(f"   –û–±—â–∏–π P&L: {total_pnl:+.2f}%")
        
        # –¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        current_signals = len(channel_signals)
        text_signals = len([s for s in channel_signals if s.get('source_type') == 'text'])
        ocr_signals = len([s for s in channel_signals if s.get('source_type') == 'ocr'])
        
        print(f"\nüìä –¢–ï–ö–£–©–ò–ï –°–ò–ì–ù–ê–õ–´:")
        print(f"   –í—Å–µ–≥–æ: {current_signals}")
        print(f"   –ò–∑ —Ç–µ–∫—Å—Ç–∞: {text_signals}")
        print(f"   –ò–∑ OCR: {ocr_signals}")
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–æ–≤
        assets = {}
        directions = {}
        bybit_available = 0
        
        for signal in channel_signals:
            asset = signal.get('asset', 'UNKNOWN')
            direction = signal.get('direction', 'UNKNOWN')
            
            assets[asset] = assets.get(asset, 0) + 1
            directions[direction] = directions.get(direction, 0) + 1
            
            if signal.get('bybit_available'):
                bybit_available += 1
        
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–û–í:")
        for asset, count in sorted(assets.items(), key=lambda x: x[1], reverse=True):
            print(f"   {asset}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        print(f"\nüìà –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        for direction, count in directions.items():
            print(f"   {direction}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        print(f"\nüí± –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ù–ê BYBIT:")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {bybit_available} —Å–∏–≥–Ω–∞–ª–æ–≤")
        print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {current_signals - bybit_available} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        total_analysis["historical_performance"][channel_name] = {
            "total_signals": total_historical_signals,
            "avg_accuracy": avg_accuracy,
            "total_pnl": total_pnl,
            "monthly_breakdown": historical_data
        }
        
        total_analysis["current_signals_analysis"][channel_name] = {
            "total_signals": current_signals,
            "text_signals": text_signals,
            "ocr_signals": ocr_signals,
            "assets": assets,
            "directions": directions,
            "bybit_available": bybit_available
        }
    
    return total_analysis

def generate_performance_report(analysis):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print(f"{'='*80}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_signals = analysis["total_signals"]
    total_channels = analysis["channels_analyzed"]
    
    # –°—É–º–º–∞—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_historical_signals = sum(ch['total_signals'] for ch in analysis["historical_performance"].values())
    avg_accuracy = sum(ch['avg_accuracy'] for ch in analysis["historical_performance"].values()) / total_channels
    total_pnl = sum(ch['total_pnl'] for ch in analysis["historical_performance"].values())
    
    print(f"üìà –û–ë–©–ê–Ø –ò–°–¢–û–†–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
    print(f"   –í—Å–µ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {total_historical_signals}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º: {avg_accuracy:.1f}%")
    print(f"   –û–±—â–∏–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π P&L: {total_pnl:+.2f}%")
    
    # –¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    total_current = sum(ch['total_signals'] for ch in analysis["current_signals_analysis"].values())
    total_text = sum(ch['text_signals'] for ch in analysis["current_signals_analysis"].values())
    total_ocr = sum(ch['ocr_signals'] for ch in analysis["current_signals_analysis"].values())
    total_bybit = sum(ch['bybit_available'] for ch in analysis["current_signals_analysis"].values())
    
    print(f"\nüìä –¢–ï–ö–£–©–ò–ï –°–ò–ì–ù–ê–õ–´:")
    print(f"   –í—Å–µ–≥–æ: {total_current}")
    print(f"   –ò–∑ —Ç–µ–∫—Å—Ç–∞: {total_text} ({total_text/total_current*100:.1f}%)")
    print(f"   –ò–∑ OCR: {total_ocr} ({total_ocr/total_current*100:.1f}%)")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Bybit: {total_bybit} ({total_bybit/total_current*100:.1f}%)")
    
    # –¢–æ–ø –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
    print(f"\nüèÜ –¢–û–ü –ö–ê–ù–ê–õ–´ –ü–û –¢–û–ß–ù–û–°–¢–ò:")
    sorted_channels = sorted(analysis["historical_performance"].items(), 
                           key=lambda x: x[1]['avg_accuracy'], reverse=True)
    
    for i, (channel, data) in enumerate(sorted_channels[:5], 1):
        print(f"   {i}. {channel}: {data['avg_accuracy']:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å, {data['total_pnl']:+.2f}% P&L")
    
    # –¢–æ–ø –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤
    print(f"\nüìä –¢–û–ü –ö–ê–ù–ê–õ–´ –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–ò–ì–ù–ê–õ–û–í:")
    sorted_by_signals = sorted(analysis["current_signals_analysis"].items(), 
                              key=lambda x: x[1]['total_signals'], reverse=True)
    
    for i, (channel, data) in enumerate(sorted_by_signals[:5], 1):
        print(f"   {i}. {channel}: {data['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîÆ –ü–†–û–ì–ù–û–ó –ù–ê –û–°–ù–û–í–ï –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:")
    expected_accuracy = avg_accuracy
    expected_profit = total_current * (expected_accuracy / 100) * 5.5  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç 5.5%
    expected_loss = total_current * ((100 - expected_accuracy) / 100) * 3.5  # –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ 3.5%
    net_expected = expected_profit - expected_loss
    
    print(f"   –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {expected_accuracy:.1f}%")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç: +{expected_profit:.2f}%")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —É–±—ã—Ç–æ–∫: -{expected_loss:.2f}%")
    print(f"   –ß–∏—Å—Ç—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {net_expected:+.2f}%")
    
    return {
        "summary": {
            "total_historical_signals": total_historical_signals,
            "avg_accuracy": avg_accuracy,
            "total_pnl": total_pnl,
            "current_signals": total_current,
            "expected_net_result": net_expected
        },
        "detailed_analysis": analysis
    }

def save_performance_report(report):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"performance_report_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –° –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    signals = load_integrated_signals()
    
    if not signals:
        print("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    analysis = analyze_signal_performance(signals)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report = generate_performance_report(analysis)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    save_performance_report(report)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê:")
    print(f"1. –§–æ–∫—É—Å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é >75%")
    print(f"2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–≥–Ω–∞–ª–∞–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–∞ Bybit")
    print(f"3. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
    print(f"4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print(f"5. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    main()
