import requests
import json
from datetime import datetime

def check_channel_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    channels = [
        "signalsbitcoinandethereum",
        "CryptoCapoTG", 
        "cryptosignals",
        "binance_signals",
        "crypto_analytics",
        "bitcoin_analysis",
        "ethereum_signals",
        "trading_signals_pro",
        "crypto_insights",
        "altcoin_signals",
        "defi_signals",
        "crypto_trading_pro",
        "market_analysis",
        "crypto_alerts",
        "binance_signals"
    ]
    
    accessible_channels = []
    inaccessible_channels = []
    
    for username in channels:
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {username}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            url = f"https://t.me/{username}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                if "This channel is private" in response.text or "This group is private" in response.text:
                    print(f"‚ùå {username} - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                    inaccessible_channels.append({
                        "username": username,
                        "error": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
                        "accessible": False
                    })
                else:
                    print(f"‚úÖ {username} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                    accessible_channels.append({
                        "username": username,
                        "accessible": True,
                        "url": url
                    })
            else:
                print(f"‚ùå {username} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
                inaccessible_channels.append({
                    "username": username,
                    "error": f"HTTP {response.status_code}",
                    "accessible": False
                })
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {username} - –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            inaccessible_channels.append({
                "username": username,
                "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}",
                "accessible": False
            })
        except Exception as e:
            print(f"‚ùå {username} - –æ—à–∏–±–∫–∞: {e}")
            inaccessible_channels.append({
                "username": username,
                "error": str(e),
                "accessible": False
            })
    
    return accessible_channels, inaccessible_channels

def suggest_alternative_channels():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    print("\nüìã –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ö–ê–ù–ê–õ–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
    
    alternative_channels = [
        "binance_signals_official",
        "coinbase_signals", 
        "kraken_signals",
        "crypto_signals_daily",
        "bitcoin_signals",
        "ethereum_signals_daily",
        "altcoin_signals_pro",
        "defi_signals_daily",
        "trading_signals_24_7",
        "crypto_analytics_pro",
        "market_signals",
        "price_alerts",
        "crypto_news_signals",
        "technical_analysis_signals",
        "fundamental_analysis_signals"
    ]
    
    for i, channel in enumerate(alternative_channels, 1):
        print(f"  {i:2d}. {channel}")
    
    return alternative_channels

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò TELEGRAM –ö–ê–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
    accessible, inaccessible = check_channel_availability()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(accessible)}")
    print(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(inaccessible)}")
    
    if accessible:
        print("\n‚úÖ –î–û–°–¢–£–ü–ù–´–ï –ö–ê–ù–ê–õ–´:")
        for channel in accessible:
            print(f"  - {channel['username']}")
    
    if inaccessible:
        print("\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ö–ê–ù–ê–õ–´:")
        for channel in inaccessible:
            print(f"  - {channel['username']}: {channel['error']}")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    alternatives = suggest_alternative_channels()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "check_time": datetime.now().isoformat(),
        "accessible_channels": accessible,
        "inaccessible_channels": inaccessible,
        "alternative_channels": alternatives,
        "total_accessible": len(accessible),
        "total_inaccessible": len(inaccessible),
        "total_alternatives": len(alternatives)
    }
    
    with open('channel_availability_check.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ channel_availability_check.json")
    
    if accessible:
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"1. –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(accessible)}")
        print(f"2. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏—Ç—å —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã")
        print(f"3. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
    else:
        print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:")
        print(f"1. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞")
        print(f"2. –ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ")
        print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")

if __name__ == "__main__":
    main()
