"""
–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∫–∞–Ω–∞–ª–∞
"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram.authorized_scraper import AuthorizedTelegramScraper
from real_data_config import TELEGRAM_API_ID, TELEGRAM_API_HASH

async def get_last_signal():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567): ").strip()
    
    if not phone:
        print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return
    
    scraper = AuthorizedTelegramScraper(TELEGRAM_API_ID, TELEGRAM_API_HASH, phone)
    
    try:
        print("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if await scraper.start():
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
            print("üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
            last_signal = await scraper.get_last_signal("signalsbitcoinandethereum")
            
            if last_signal:
                print("\nüéØ –ü–û–°–õ–ï–î–ù–ò–ô –°–ò–ì–ù–ê–õ:")
                print("=" * 50)
                print(f"–ö–∞–Ω–∞–ª: {last_signal['channel_title']}")
                print(f"–ü–∞—Ä–∞: {last_signal['trading_pair']}")
                print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {last_signal['direction']}")
                print(f"Entry: {last_signal['entry_price']}")
                print(f"Target: {last_signal['target_price']}")
                print(f"Stop: {last_signal['stop_loss']}")
                print(f"–î–∞—Ç–∞: {last_signal['message_date']}")
                print(f"Confidence: {last_signal['confidence']}")
                print("=" * 50)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                print("\nüìä –ù–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–∑–∞ 24 —á–∞—Å–∞):")
                recent_signals = await scraper.get_recent_signals("signalsbitcoinandethereum", hours_back=24)
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(recent_signals)}")
                
                for i, signal in enumerate(recent_signals[:5]):
                    print(f"{i+1}. {signal['trading_pair']} {signal['direction']} Entry:{signal['entry_price']} Target:{signal['target_price']}")
                
            else:
                print("‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("- –ö–∞–Ω–∞–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                print("- –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É")
                print("- –°–∏–≥–Ω–∞–ª—ã —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ")
        
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        await scraper.stop()

if __name__ == "__main__":
    asyncio.run(get_last_signal())
