import urllib.request
import json
import re
from datetime import datetime

def get_messages_with_images_fixed(username):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        url = f"https://t.me/s/{username}"
        
        opener = urllib.request.build_opener()
        opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ]
        
        with opener.open(url, timeout=10) as response:
            content = response.read().decode('utf-8')
            
            messages = []
            
            # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_pattern = r'<div class="tgme_widget_message[^"]*"[^>]*>(.*?)</div>'
            message_matches = re.findall(message_pattern, content, re.DOTALL)
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(message_matches)} –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            for i, message_html in enumerate(message_matches):
                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
                image_patterns = [
                    r'<img[^>]*src="([^"]*)"[^>]*>',  # –õ—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    r'<img[^>]*class="[^"]*photo[^"]*"[^>]*src="([^"]*)"[^>]*>',  # –§–æ—Ç–æ
                    r'<img[^>]*class="[^"]*image[^"]*"[^>]*src="([^"]*)"[^>]*>',  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    r'<img[^>]*class="[^"]*media[^"]*"[^>]*src="([^"]*)"[^>]*>',  # –ú–µ–¥–∏–∞
                ]
                
                images = []
                for pattern in image_patterns:
                    matches = re.findall(pattern, message_html, re.IGNORECASE)
                    images.extend(matches)
                
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                images = list(set(images))
                
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                text_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
                text_match = re.search(text_pattern, message_html, re.DOTALL)
                
                text = ""
                if text_match:
                    text = re.sub(r'<[^>]+>', '', text_match.group(1))
                    text = text.strip()
                
                if images or text:
                    messages.append({
                        'id': f"{username}_{i+1}",
                        'text': text,
                        'images': images,
                        'image_count': len(images),
                        'date': datetime.now().isoformat()
                    })
                    
                    if images:
                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        for img in images[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                            print(f"  üì∑ {img}")
            
            return messages
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def analyze_single_channel_images(username):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
    print(f"üîç –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í –ö–ê–ù–ê–õ–ï: {username}")
    print("=" * 60)
    
    messages = get_messages_with_images_fixed(username)
    
    if not messages:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    image_stats = {
        "channel_username": username,
        "total_messages": len(messages),
        "messages_with_images": 0,
        "total_images": 0,
        "messages_with_text": 0,
        "sample_images": []
    }
    
    for i, message in enumerate(messages[:5]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}:")
        
        if message['text']:
            print(f"   –¢–µ–∫—Å—Ç: {message['text'][:100]}...")
            image_stats["messages_with_text"] += 1
        
        if message['images']:
            print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {message['image_count']}")
            image_stats["messages_with_images"] += 1
            image_stats["total_images"] += message['image_count']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if len(image_stats["sample_images"]) < 3:
                for img_url in message['images'][:3]:
                    image_stats["sample_images"].append({
                        "url": img_url,
                        "message_id": message['id'],
                        "message_text": message['text'][:100] if message['text'] else ""
                    })
                    print(f"      üì∑ {img_url}")
        else:
            print(f"   üìÑ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {image_stats['total_messages']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {image_stats['messages_with_images']}")
    print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_stats['total_images']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º: {image_stats['messages_with_text']}")
    
    return image_stats

def download_and_analyze_images(image_stats):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not image_stats or not image_stats["sample_images"]:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"\nüì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    downloaded = []
    
    for i, img_info in enumerate(image_stats["sample_images"]):
        try:
            url = img_info["url"]
            filename = f"{image_stats['channel_username']}_image_{i+1}.jpg"
            
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i+1}: {url}")
            
            opener = urllib.request.build_opener()
            opener.addheaders = [
                ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
            ]
            
            with opener.open(url, timeout=10) as response:
                with open(filename, 'wb') as f:
                    f.write(response.read())
            
            downloaded.append({
                "filename": filename,
                "url": url,
                "message_id": img_info["message_id"],
                "message_text": img_info["message_text"],
                "size_bytes": len(response.read()) if hasattr(response, 'read') else 0
            })
            
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {filename}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "chart" in url.lower() or "graph" in url.lower():
                print(f"   üìä –ü–æ—Ö–æ–∂–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫/–¥–∏–∞–≥—Ä–∞–º–º—É")
            elif "screenshot" in url.lower() or "screen" in url.lower():
                print(f"   üñ•Ô∏è –ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç")
            elif "table" in url.lower() or "list" in url.lower():
                print(f"   üìã –ü–æ—Ö–æ–∂–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É/—Å–ø–∏—Å–æ–∫")
            else:
                print(f"   üñºÔ∏è –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
    
    return downloaded

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í TELEGRAM –ö–ê–ù–ê–õ–ê–•")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    analytical_channels = [
        "CryptoCapoTG",
        "binance_signals_official", 
        "crypto_signals_daily",
        "crypto_analytics_pro",
        "price_alerts",
        "crypto_news_signals"
    ]
    
    all_results = {
        "channels_analyzed": [],
        "total_images_found": 0,
        "sample_images_downloaded": [],
        "analysis_time": datetime.now().isoformat()
    }
    
    for username in analytical_channels:
        print(f"\n{'='*60}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
        image_stats = analyze_single_channel_images(username)
        
        if image_stats and image_stats["total_images"] > 0:
            all_results["channels_analyzed"].append(image_stats)
            all_results["total_images_found"] += image_stats["total_images"]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            downloaded = download_and_analyze_images(image_stats)
            if downloaded:
                all_results["sample_images_downloaded"].extend(downloaded)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú")
    print(f"{'='*60}")
    
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(all_results['channels_analyzed'])}")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {all_results['total_images_found']}")
    print(f"–°–∫–∞—á–∞–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len(all_results['sample_images_downloaded'])}")
    
    if all_results["channels_analyzed"]:
        print(f"\nüìä –ü–û –ö–ê–ù–ê–õ–ê–ú:")
        for channel in all_results["channels_analyzed"]:
            print(f"  - {channel['channel_username']}: {channel['total_images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if all_results["sample_images_downloaded"]:
        print(f"\nüì• –°–ö–ê–ß–ê–ù–ù–´–ï –û–ë–†–ê–ó–¶–´:")
        for img in all_results["sample_images_downloaded"]:
            print(f"  - {img['filename']} (–∏–∑ {img['message_id']})")
            if img['message_text']:
                print(f"    –¢–µ–∫—Å—Ç: {img['message_text']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('fixed_image_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(all_results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fixed_image_analysis.json")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–†–ê–ë–û–¢–ö–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    print(f"1. OCR (Optical Character Recognition) –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
    print(f"2. –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º")
    print(f"3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏")
    print(f"4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º")
    print(f"5. –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
    print(f"6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")

if __name__ == "__main__":
    main()
