"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import json
from datetime import datetime

def demo_universal_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    try:
        from universal_signal_parser import UniversalSignalParser
        
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê –°–ò–ì–ù–ê–õ–û–í")
        print("=" * 60)
        
        parser = UniversalSignalParser()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        test_cases = [
            {
                'name': 'BinanceKillers',
                'text': """
                SIGNAL ID: #1956
                COIN: $BTC/USDT (3-5x)
                Direction: LONG üìà
                ENTRY: 112207 - 110500
                TARGETS: 113500 - 114800 - 117000 - 123236
                STOP LOSS: 109638
                """,
                'channel': 'BinanceKillers'
            },
            {
                'name': 'Wolf of Trading',
                'text': """
                #BAND/USDT
                üî¥ SHORT
                üëÜ Entry: 1.0700 - 1.1050
                üåê Leverage: 20x
                üéØ Target 1: 1.0590
                üéØ Target 2: 1.0480
                üéØ Target 3: 1.0370
                üéØ Target 4: 1.0260
                üéØ Target 5: 1.0150
                üéØ Target 6: 1.0040
                ‚ùå StopLoss: 1.1340
                """,
                'channel': 'Wolf of Trading'
            },
            {
                'name': 'Crypto Inner Circle',
                'text': """
                ‚ö°‚ö° BSW/USDT ‚ö°
                Signal Type: Regular (Short)
                Leverage: Cross (25x)
                Entry Targets: 0.01862
                Take-Profit Targets: 0.01834, 0.01815, 0.01797, 0.01769, 0.01750, 0.01722
                Stop Targets: 5-10%
                """,
                'channel': 'Crypto Inner Circle'
            },
            {
                'name': '–î–Ω–µ–≤–Ω–∏–∫ –¢—Ä–µ–π–¥–µ—Ä–∞',
                'text': """
                –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä—É WOO / USDT –≤ SHORT
                –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä: 0.07673
                Cross –º–∞—Ä–∂–∞
                –ü–ª–µ—á–æ: 17x
                –¢–µ–π–∫–∏: 0.0756, 0.07447, 0.07221
                –°—Ç–æ–ø: 0.08304
                """,
                'channel': '–î–Ω–µ–≤–Ω–∏–∫ –¢—Ä–µ–π–¥–µ—Ä–∞'
            },
            {
                'name': '–¢–æ—Ä–≥–æ–≤–ª—è –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π',
                'text': """
                –ó–∞—Ö–æ–¥–∏–º JASMY SHORT 25x
                –í—Ö–æ–¥: –ø–æ —Ä—ã–Ω–∫—É
                –¢–µ–π–∫: 0.015956 / 0.014906 / 0.013173
                –°—Ç–æ–ø: 0.017547
                """,
                'channel': '–¢–æ—Ä–≥–æ–≤–ª—è –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π'
            }
        ]
        
        all_signals = []
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìä –¢–µ—Å—Ç {i}: {test_case['name']}")
            print("-" * 40)
            
            signal = parser.parse_signal(test_case['text'], test_case['channel'])
            
            if signal:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Å–∏–≥–Ω–∞–ª!")
                print(f"Asset: {signal.asset}")
                print(f"Direction: {signal.direction}")
                print(f"Entry Type: {signal.entry_type}")
                if signal.entry_price:
                    print(f"Entry Price: ${signal.entry_price:,.6f}")
                if signal.entry_range:
                    print(f"Entry Range: {signal.entry_range}")
                print(f"Targets: {signal.targets}")
                if signal.stop_loss:
                    print(f"Stop Loss: ${signal.stop_loss:,.6f}")
                if signal.stop_loss_percent:
                    print(f"Stop Loss %: {signal.stop_loss_percent}%")
                print(f"Leverage: {signal.leverage}")
                print(f"Timeframe: {signal.timeframe}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                standard = parser.convert_to_standard_format(signal)
                all_signals.append(standard)
                
                print(f"Standard Format: {standard['asset']} {standard['direction']} @ ${standard['entry_price']:,.6f if standard['entry_price'] else 'Market'}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–∏–≥–Ω–∞–ª")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            'success': True,
            'total_signals': len(all_signals),
            'signals': all_signals,
            'demo_time': datetime.now().isoformat(),
            'parser_version': 'universal_v1.0'
        }
        
        with open('demo_universal_signals.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: demo_universal_signals.json")
        
        return result
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª universal_signal_parser.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    demo_universal_parser()
