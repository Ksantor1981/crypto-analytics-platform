#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å OCR –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
import aiohttp
import json
import sys
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
from bs4 import BeautifulSoup
import re
import base64
import io

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç—ã OCR
try:
    import easyocr
    import cv2
    import numpy as np
    from PIL import Image, ImageEnhance, ImageFilter
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False
    print("‚ö†Ô∏è OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install easyocr opencv-python pillow")

async def check_telegram_web_with_images(channel_username: str, max_messages: int = 20) -> List[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = channel_username.replace('@', '')
    
    # URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞
    url = f"https://t.me/s/{username}"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=15) as response:
                if response.status == 200:
                    html = await response.text()
                    return parse_telegram_messages_with_images(html, channel_username, max_messages)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –¥–ª—è {channel_username}")
                    return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {channel_username}: {e}")
        return []

def parse_telegram_messages_with_images(html: str, channel_username: str, max_messages: int) -> List[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    
    soup = BeautifulSoup(html, 'html.parser')
    messages = []
    
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    message_elements = soup.find_all('div', class_='tgme_widget_message')
    
    for msg in message_elements[:max_messages]:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_elem = msg.find('div', class_='tgme_widget_message_text')
            text = text_elem.get_text(strip=True) if text_elem else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            img_elements = msg.find_all('img', class_='tgme_widget_message_photo_wrap')
            for img in img_elements:
                img_src = img.get('src')
                if img_src:
                    images.append(img_src)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            time_elem = msg.find('time')
            full_datetime = None
            if time_elem and time_elem.get('datetime'):
                full_datetime = time_elem.get('datetime')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = None
            message_link = msg.find('a', class_='tgme_widget_message_date')
            if message_link and message_link.get('href'):
                href = message_link.get('href')
                if '/' in href:
                    message_id = href.split('/')[-1]
            
            if text or images:  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                messages.append({
                    'channel': channel_username,
                    'text': text,
                    'images': images,
                    'full_datetime': full_datetime,
                    'message_id': message_id,
                    'length': len(text)
                })
        except Exception as e:
            continue
    
    return messages

def format_datetime(full_datetime: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not full_datetime:
        return "N/A"
    
    try:
        # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç
        dt = datetime.fromisoformat(full_datetime.replace('Z', '+00:00'))
        now = datetime.now(dt.tzinfo)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        diff = now - dt
        
        if diff.days > 0:
            return f"{dt.strftime('%d.%m.%Y –≤ %H:%M')} ({diff.days} –¥–Ω. –Ω–∞–∑–∞–¥)"
        elif diff.seconds >= 3600:
            hours = diff.seconds // 3600
            return f"{dt.strftime('%d.%m.%Y –≤ %H:%M')} ({hours} —á. –Ω–∞–∑–∞–¥)"
        else:
            minutes = diff.seconds // 60
            return f"{dt.strftime('%d.%m.%Y –≤ %H:%M')} ({minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥)"
    except:
        return full_datetime

class SimpleOCRProcessor:
    """–ü—Ä–æ—Å—Ç–æ–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.reader = None
        if OCR_AVAILABLE:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EasyOCR
                self.reader = easyocr.Reader(['en', 'ru'], gpu=False)
                print("‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
                self.reader = None
    
    async def download_image(self, image_url: str) -> Optional[bytes]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url, timeout=10) as response:
                    if response.status == 200:
                        return await response.read()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None
    
    def extract_text_from_image(self, image_data: bytes) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.reader:
            return []
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ numpy array
            nparr = np.frombuffer(image_data, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            results = self.reader.readtext(img)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            texts = []
            for (bbox, text, prob) in results:
                if prob > 0.5:  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    texts.append(text.strip())
            
            return texts
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            return []
    
    def check_for_trading_signals(self, texts: List[str]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        signals = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_patterns = [
            r'\b(BTC|ETH|SOL|DOGE|ADA|XRP|BNB|MATIC|LINK|UNI|TRX|TON|ENS|ENA)\b',
            r'\b(LONG|SHORT|BUY|SELL)\b',
            r'\b(Entry|Target|TP|SL|Stop Loss)\b',
            r'\$[\d,]+',
            r'\b\d+\.?\d*\b',
            r'üöÄ|üìà|üìâ|üéØ|üõë|üìç|‚úÖ|üî•|üíé|‚ö°Ô∏è',
            r'\bSIGNAL\b',
            r'\bTake-Profit\b',
            r'\bProfit\b',
            r'\bUSDT\b'
        ]
        
        for text in texts:
            text_upper = text.upper()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            matches = 0
            for pattern in signal_patterns:
                if re.search(pattern, text_upper):
                    matches += 1
            
            if matches >= 2:
                signals.append({
                    'text': text,
                    'confidence': matches,
                    'patterns_found': matches
                })
        
        return signals

async def process_messages_with_ocr(messages: List[Dict[str, Any]], ocr_processor: SimpleOCRProcessor) -> List[Dict[str, Any]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å OCR"""
    
    processed_messages = []
    
    for msg in messages:
        processed_msg = msg.copy()
        ocr_signals = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if msg.get('images'):
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(msg['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            
            for i, image_url in enumerate(msg['images']):
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = await ocr_processor.download_image(image_url)
                    if image_data:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                        texts = ocr_processor.extract_text_from_image(image_data)
                        if texts:
                            print(f"   üìù –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
                            signals = ocr_processor.check_for_trading_signals(texts)
                            if signals:
                                print(f"   üéØ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤!")
                                ocr_signals.extend(signals)
                        else:
                            print(f"   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º OCR —Å–∏–≥–Ω–∞–ª—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if ocr_signals:
            processed_msg['ocr_signals'] = ocr_signals
            processed_messages.append(processed_msg)
        else:
            processed_messages.append(processed_msg)
    
    return processed_messages

async def check_channels_with_ocr():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å OCR"""
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    channels = [
        "binancekillers",
        "CryptoCapoTG", 
        "io_altsignals",
        "fatpigsignals",
        "cryptoceo_alex"
    ]
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ì–ù–ê–õ–û–í –° OCR –ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("="*120)
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
    print("="*120)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    ocr_processor = SimpleOCRProcessor()
    if not ocr_processor.reader:
        print("‚ùå OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    all_signals = []
    
    for channel in channels:
        print(f"\nüì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: @{channel}")
        messages = await check_telegram_web_with_images(channel, max_messages=10)
        
        if messages:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å OCR
            processed_messages = await process_messages_with_ocr(messages, ocr_processor)
            
            # –ò—â–µ–º —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
            recent_signals = []
            for msg in processed_messages:
                if msg.get('full_datetime'):
                    try:
                        dt = datetime.fromisoformat(msg['full_datetime'].replace('Z', '+00:00'))
                        now = datetime.now(dt.tzinfo)
                        diff = now - dt
                        
                        if diff.days <= 3:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            if msg.get('text') and len(msg['text']) > 10:
                                recent_signals.append(msg)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OCR —Å–∏–≥–Ω–∞–ª—ã
                            if msg.get('ocr_signals'):
                                recent_signals.append(msg)
                    except:
                        continue
            
            if recent_signals:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–≤–µ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(recent_signals)}")
                all_signals.extend(recent_signals)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for i, signal in enumerate(recent_signals, 1):
                    formatted_date = format_datetime(signal.get('full_datetime'))
                    print(f"   {i}. {formatted_date}")
                    print(f"      ID: {signal.get('message_id', 'N/A')}")
                    if signal.get('text'):
                        print(f"      –¢–µ–∫—Å—Ç: {signal['text'][:80]}...")
                    if signal.get('images'):
                        print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(signal['images'])}")
                    if signal.get('ocr_signals'):
                        print(f"      OCR —Å–∏–≥–Ω–∞–ª—ã: {len(signal['ocr_signals'])}")
                        for j, ocr_signal in enumerate(signal['ocr_signals'], 1):
                            print(f"         {j}. {ocr_signal['text'][:60]}...")
            else:
                print("‚ùå –°–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*120}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*120}")
    
    if all_signals:
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_signals)}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        all_signals.sort(key=lambda x: x.get('full_datetime', ''), reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        for i, msg in enumerate(all_signals, 1):
            formatted_date = format_datetime(msg.get('full_datetime'))
            print(f"\nüîç –°–ò–ì–ù–ê–õ #{i}")
            print(f"üì∫ –ö–∞–Ω–∞–ª: @{msg['channel']}")
            print(f"‚è∞ –î–∞—Ç–∞: {formatted_date}")
            print(f"üÜî ID: {msg.get('message_id', 'N/A')}")
            if msg.get('text'):
                print(f"üìù –¢–µ–∫—Å—Ç: {msg['text']}")
            if msg.get('images'):
                print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(msg['images'])}")
            if msg.get('ocr_signals'):
                print(f"üéØ OCR —Å–∏–≥–Ω–∞–ª—ã:")
                for j, ocr_signal in enumerate(msg['ocr_signals'], 1):
                    print(f"   {j}. {ocr_signal['text']}")
    else:
        print("‚ùå –°–≤–µ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üö® –ü–†–û–í–ï–†–ö–ê –°–ò–ì–ù–ê–õ–û–í –° OCR –ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô!")
    print("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º OCR –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö...")
    
    await check_channels_with_ocr()
    
    print(f"\n{'='*120}")
    print(f"üí° –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"{'='*120}")
    print("1. ‚úÖ OCR –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("2. üîç –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    print("3. üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ (3 –¥–Ω—è)")
    print("4. üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    asyncio.run(main())
