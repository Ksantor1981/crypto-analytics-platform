#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
"""
import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
from price_utils import fetch_prices_usd

DB_PATH = 'workers/signals.db'

def track_signal_results():
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    try:
        cur.execute("ALTER TABLE signals ADD COLUMN signal_result TEXT")
        cur.execute("ALTER TABLE signals ADD COLUMN result_checked_at TEXT")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã —Å —É—Ä–æ–≤–Ω—è–º–∏
    cur.execute("""
        SELECT id, asset, direction, entry_price, target_price, stop_loss, 
               channel, timestamp, is_valid, signal_quality, real_confidence
        FROM signals 
        WHERE entry_price IS NOT NULL 
        AND (target_price IS NOT NULL OR stop_loss IS NOT NULL)
        AND asset != 'UNKNOWN'
        ORDER BY timestamp DESC
    """)
    
    signals = cur.fetchall()
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É—Ä–æ–≤–Ω—è–º–∏...")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
    channel_signals = {}
    for signal in signals:
        channel = signal['channel']
        if channel not in channel_signals:
            channel_signals[channel] = []
        channel_signals[channel].append(signal)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    for channel, channel_sigs in channel_signals.items():
        if len(channel_sigs) < 2:
            print(f"‚ö†Ô∏è {channel}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ ({len(channel_sigs)})")
            continue
            
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {channel}: {len(channel_sigs)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤
        assets = list(set([s['asset'] for s in channel_sigs]))
        current_prices = fetch_prices_usd(assets)
        
        successful = 0
        total_analyzed = 0
        
        for signal in channel_sigs:
            result = analyze_signal_result(signal, current_prices)
            if result is not None:
                total_analyzed += 1
                if result:
                    successful += 1
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
                cur.execute("""
                    UPDATE signals 
                    SET signal_result = ?, result_checked_at = ?
                    WHERE id = ?
                """, (json.dumps(result), datetime.now().isoformat(), signal['id']))
        
        if total_analyzed >= 2:
            accuracy = (successful / total_analyzed) * 100.0
            print(f"‚úÖ {channel}: {successful}/{total_analyzed} —É—Å–ø–µ—à–Ω—ã—Ö ({accuracy:.1f}%)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º confidence –¥–ª—è –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–Ω–∞–ª–∞
            cur.execute("""
                UPDATE signals 
                SET real_confidence = ?, 
                    signal_quality = 'verified',
                    is_valid = 1
                WHERE channel = ?
            """, (accuracy, channel))
        else:
            print(f"‚ùå {channel}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ
            cur.execute("""
                UPDATE signals 
                SET signal_quality = 'unverified',
                    is_valid = 0
                WHERE channel = ?
            """, (channel,))
    
    conn.commit()
    conn.close()
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

def analyze_signal_result(signal: sqlite3.Row, current_prices: Dict[str, float]) -> bool:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    asset = signal['asset']
    direction = signal['direction']
    entry = signal['entry_price']
    target = signal['target_price']
    stop = signal['stop_loss']
    
    if asset not in current_prices:
        return None  # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        
    current_price = current_prices[asset]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Å–∏–≥–Ω–∞–ª —Ü–µ–ª–∏ –∏–ª–∏ —Å—Ç–æ–ø–∞
    if direction == 'LONG':
        if target and current_price >= target:
            return True  # –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å
        if stop and current_price <= stop:
            return False  # –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø
    elif direction == 'SHORT':
        if target and current_price <= target:
            return True  # –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å
        if stop and current_price >= stop:
            return False  # –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø
    
    # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ –¥–æ—Å—Ç–∏–≥ –Ω–∏ —Ü–µ–ª–∏, –Ω–∏ —Å—Ç–æ–ø–∞)
    return None

def get_verified_channels() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    
    cur.execute("""
        SELECT channel, COUNT(*) as cnt, real_confidence
        FROM signals 
        WHERE signal_quality = 'verified' 
        AND real_confidence IS NOT NULL
        GROUP BY channel
        HAVING cnt >= 2
        ORDER BY real_confidence DESC
    """)
    
    channels = [row[0] for row in cur.fetchall()]
    conn.close()
    return channels

if __name__ == '__main__':
    track_signal_results()
