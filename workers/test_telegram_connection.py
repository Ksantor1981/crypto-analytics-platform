import asyncio
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv('telegram_config.env')

async def test_telegram_connection():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
    
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    print(f"API ID: {api_id}")
    print(f"API Hash: {api_hash[:10]}...")
    
    if not api_id or not api_hash:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    try:
        from telethon import TelegramClient
        
        print("üì± –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        client = TelegramClient('test_session', api_id, api_hash)
        
        print("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.start()
        
        if await client.is_user_authorized():
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
            
            await client.disconnect()
            return True
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
            phone = input().strip()
            
            await client.send_code_request(phone)
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")
            code = input().strip()
            
            try:
                await client.sign_in(phone, code)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                await client.disconnect()
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                await client.disconnect()
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_channel_access():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º...")
    
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    try:
        from telethon import TelegramClient
        from telethon.errors import ChannelPrivateError, UsernameNotOccupiedError
        
        client = TelegramClient('test_session', api_id, api_hash)
        await client.start()
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_channels = [
            "signalsbitcoinandethereum",
            "CryptoCapoTG", 
            "cryptosignals",
            "binance_signals",
            "crypto_analytics"
        ]
        
        accessible_channels = []
        inaccessible_channels = []
        
        for username in test_channels:
            try:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞: {username}")
                entity = await client.get_entity(username)
                
                channel_info = {
                    "username": username,
                    "id": entity.id,
                    "title": getattr(entity, 'title', username),
                    "participants_count": getattr(entity, 'participants_count', 0),
                    "accessible": True
                }
                accessible_channels.append(channel_info)
                print(f"‚úÖ {username} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                
            except ChannelPrivateError:
                print(f"‚ùå {username} - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                inaccessible_channels.append({
                    "username": username,
                    "error": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
                    "accessible": False
                })
                
            except UsernameNotOccupiedError:
                print(f"‚ùå {username} - –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                inaccessible_channels.append({
                    "username": username,
                    "error": "–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    "accessible": False
                })
                
            except Exception as e:
                print(f"‚ùå {username} - –æ—à–∏–±–∫–∞: {e}")
                inaccessible_channels.append({
                    "username": username,
                    "error": str(e),
                    "accessible": False
                })
        
        await client.disconnect()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(accessible_channels)}")
        print(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(inaccessible_channels)}")
        
        if accessible_channels:
            print("\n‚úÖ –î–û–°–¢–£–ü–ù–´–ï –ö–ê–ù–ê–õ–´:")
            for channel in accessible_channels:
                print(f"  - {channel['username']} ({channel['title']})")
        
        if inaccessible_channels:
            print("\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ö–ê–ù–ê–õ–´:")
            for channel in inaccessible_channels:
                print(f"  - {channel['username']}: {channel['error']}")
        
        return accessible_channels, inaccessible_channels
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return [], []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê TELEGRAM API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = await test_telegram_connection()
    
    if connection_ok:
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
        accessible, inaccessible = await test_channel_access()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            "connection_success": connection_ok,
            "accessible_channels": accessible,
            "inaccessible_channels": inaccessible,
            "total_accessible": len(accessible),
            "total_inaccessible": len(inaccessible)
        }
        
        with open('telegram_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ telegram_test_results.json")
        
        if accessible:
            print(f"\nüéØ –ì–û–¢–û–í –ö –°–ë–û–†–£ –°–ò–ì–ù–ê–õ–û–í!")
            print(f"–î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(accessible)}")
        else:
            print(f"\n‚ö†Ô∏è –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ö–ê–ù–ê–õ–û–í")
            print("–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ")
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ö TELEGRAM")

if __name__ == "__main__":
    asyncio.run(main())
