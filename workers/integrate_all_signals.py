import json
import os
from datetime import datetime

def load_text_signals():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        with open('all_channels_check.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('all_signals', [])
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª all_channels_check.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

def load_ocr_signals():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ OCR –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        with open('ocr_signals_results.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('all_signals', [])
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª ocr_signals_results.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

def normalize_signal(signal, source_type):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    normalized = {
        "id": f"{source_type}_{signal.get('message_id', signal.get('image_source', 'unknown'))}",
        "asset": signal.get('asset', 'UNKNOWN'),
        "direction": signal.get('direction', 'UNKNOWN'),
        "entry_price": signal.get('entry_price'),
        "target_price": signal.get('target_price'),
        "stop_loss": signal.get('stop_loss'),
        "confidence": signal.get('confidence', signal.get('combined_confidence', 70)),
        "channel": signal.get('channel_username', signal.get('channel', 'unknown')),
        "source_type": source_type,
        "extraction_time": signal.get('extraction_time', datetime.now().isoformat()),
        "bybit_available": check_bybit_availability(signal.get('asset', 'UNKNOWN'))
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if source_type == "text":
        normalized["message_text"] = signal.get('message_text', '')
        normalized["pattern_used"] = signal.get('pattern_used', '')
    elif source_type == "ocr":
        normalized["image_source"] = signal.get('image_source', '')
        normalized["extracted_text"] = signal.get('extracted_text', '')
    
    return normalized

def check_bybit_availability(asset):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –Ω–∞ Bybit"""
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ Bybit
    bybit_assets = [
        'BTC', 'ETH', 'SOL', 'ADA', 'MATIC', 'DOT', 'AVAX', 'LINK', 
        'UNI', 'ATOM', 'LTC', 'BCH', 'XRP', 'DOGE', 'SHIB', 'TRX'
    ]
    return asset.upper() in bybit_assets

def integrate_all_signals():
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• –ù–ê–ô–î–ï–ù–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    text_signals = load_text_signals()
    ocr_signals = load_ocr_signals()
    
    print(f"üìù –°–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞: {len(text_signals)}")
    print(f"üñºÔ∏è –°–∏–≥–Ω–∞–ª—ã –∏–∑ OCR: {len(ocr_signals)}")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
    all_signals = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    for signal in text_signals:
        normalized = normalize_signal(signal, "text")
        all_signals.append(normalized)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OCR —Å–∏–≥–Ω–∞–ª—ã
    for signal in ocr_signals:
        normalized = normalize_signal(signal, "ocr")
        all_signals.append(normalized)
    
    print(f"üìä –í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
    
    return all_signals

def generate_statistics(all_signals):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º"""
    stats = {
        "total_signals": len(all_signals),
        "by_source_type": {},
        "by_channel": {},
        "by_direction": {},
        "bybit_available": 0,
        "bybit_unavailable": 0,
        "confidence_ranges": {
            "high": 0,    # 80-100%
            "medium": 0,  # 60-79%
            "low": 0      # 0-59%
        }
    }
    
    for signal in all_signals:
        # –ü–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_type = signal['source_type']
        stats['by_source_type'][source_type] = stats['by_source_type'].get(source_type, 0) + 1
        
        # –ü–æ –∫–∞–Ω–∞–ª—É
        channel = signal['channel']
        stats['by_channel'][channel] = stats['by_channel'].get(channel, 0) + 1
        
        # –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        direction = signal['direction']
        stats['by_direction'][direction] = stats['by_direction'].get(direction, 0) + 1
        
        # –ü–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ Bybit
        if signal['bybit_available']:
            stats['bybit_available'] += 1
        else:
            stats['bybit_unavailable'] += 1
        
        # –ü–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = signal.get('confidence', 70)
        if confidence >= 80:
            stats['confidence_ranges']['high'] += 1
        elif confidence >= 60:
            stats['confidence_ranges']['medium'] += 1
        else:
            stats['confidence_ranges']['low'] += 1
    
    return stats

def save_integrated_results(all_signals, stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    results = {
        "integration_time": datetime.now().isoformat(),
        "statistics": stats,
        "all_signals": all_signals
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('integrated_signals.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    simplified_signals = []
    for signal in all_signals:
        simplified = {
            "id": signal['id'],
            "asset": signal['asset'],
            "direction": signal['direction'],
            "entry_price": signal['entry_price'],
            "target_price": signal['target_price'],
            "stop_loss": signal['stop_loss'],
            "confidence": signal['confidence'],
            "channel": signal['channel'],
            "source_type": signal['source_type'],
            "bybit_available": signal['bybit_available']
        }
        simplified_signals.append(simplified)
    
    frontend_data = {
        "signals": simplified_signals,
        "total_count": len(simplified_signals),
        "last_updated": datetime.now().isoformat()
    }
    
    with open('real_data.json', 'w', encoding='utf-8') as f:
        json.dump(frontend_data, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   - integrated_signals.json (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print(f"   - real_data.json (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)")

def print_detailed_report(all_signals, stats):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print(f"\n{'='*60}")
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ú –°–ò–ì–ù–ê–õ–ê–ú")
    print(f"{'='*60}")
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Bybit: {stats['bybit_available']}")
    print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Bybit: {stats['bybit_unavailable']}")
    
    print(f"\nüìä –ü–û –¢–ò–ü–£ –ò–°–¢–û–ß–ù–ò–ö–ê:")
    for source_type, count in stats['by_source_type'].items():
        print(f"   - {source_type.upper()}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    print(f"\nüìä –ü–û –ö–ê–ù–ê–õ–ê–ú:")
    for channel, count in stats['by_channel'].items():
        print(f"   - {channel}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    print(f"\nüìä –ü–û –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Æ:")
    for direction, count in stats['by_direction'].items():
        print(f"   - {direction}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    print(f"\nüìä –ü–û –£–†–û–í–ù–Æ –£–í–ï–†–ï–ù–ù–û–°–¢–ò:")
    print(f"   - –í—ã—Å–æ–∫–∏–π (80-100%): {stats['confidence_ranges']['high']}")
    print(f"   - –°—Ä–µ–¥–Ω–∏–π (60-79%): {stats['confidence_ranges']['medium']}")
    print(f"   - –ù–∏–∑–∫–∏–π (0-59%): {stats['confidence_ranges']['low']}")
    
    print(f"\nüéØ –¢–û–ü-10 –°–ò–ì–ù–ê–õ–û–í –ü–û –£–í–ï–†–ï–ù–ù–û–°–¢–ò:")
    top_signals = sorted(all_signals, key=lambda x: x.get('confidence', 0), reverse=True)[:10]
    for i, signal in enumerate(top_signals, 1):
        print(f"   {i:2d}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
        print(f"       –ö–∞–Ω–∞–ª: {signal['channel']} | –ò—Å—Ç–æ—á–Ω–∏–∫: {signal['source_type']}")
        print(f"       –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0)}% | Bybit: {'‚úÖ' if signal['bybit_available'] else '‚ùå'}")
        if signal.get('target_price'):
            print(f"       Target: ${signal['target_price']} Stop: ${signal['stop_loss']}")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• –°–ò–ì–ù–ê–õ–û–í –ò–ó TELEGRAM –ö–ê–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
    all_signals = integrate_all_signals()
    
    if not all_signals:
        print("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = generate_statistics(all_signals)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_integrated_results(all_signals, stats)
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print_detailed_report(all_signals, stats)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ï–ú–£ –†–ê–ó–í–ò–¢–ò–Æ:")
    print(f"1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º OCR (Tesseract)")
    print(f"2. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    print(f"3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    print(f"4. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤")
    print(f"5. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ API –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    print(f"6. –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö")

if __name__ == "__main__":
    main()
