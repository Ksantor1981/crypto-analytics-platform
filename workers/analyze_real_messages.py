import urllib.request
import json
import re
from datetime import datetime

def get_real_messages(username):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        url = f"https://t.me/s/{username}"
        
        opener = urllib.request.build_opener()
        opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ]
        
        with opener.open(url, timeout=10) as response:
            content = response.read().decode('utf-8')
            
            messages = []
            
            # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            text_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
            text_matches = re.findall(text_pattern, content, re.DOTALL)
            
            for i, text_html in enumerate(text_matches):
                # –û—á–∏—â–∞–µ–º HTML
                text = re.sub(r'<[^>]+>', '', text_html)
                text = text.strip()
                
                if text and len(text) > 10:  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
                    messages.append({
                        'id': f"{username}_{i+1}",
                        'text': text,
                        'date': datetime.now().isoformat()
                    })
            
            return messages
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def analyze_message_patterns(messages):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print(f"üîç –ê–ù–ê–õ–ò–ó {len(messages)} –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    all_patterns = []
    
    for i, message in enumerate(messages[:10]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
        text = message['text']
        print(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}:")
        print(f"   {text[:200]}...")
        
        # –ò—â–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å —Ü–µ–Ω–∞–º–∏
        crypto_price_patterns = [
            r'\$(\w+)\s*[=:]\s*\$?([\d,]+\.?\d*)',  # $BTC = $110,500
            r'(\w+)\s*[=:]\s*\$?([\d,]+\.?\d*)',    # BTC = $110,500
            r'\$(\w+)\s*\$?([\d,]+\.?\d*)',         # $BTC $110,500
            r'(\w+)\s*\$?([\d,]+\.?\d*)',           # BTC $110,500
            r'(\w+)/USDT\s*\$?([\d,]+\.?\d*)',      # BTC/USDT $110,500
        ]
        
        for pattern in crypto_price_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã: {matches}")
                all_patterns.extend(matches)
        
        # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        trading_terms = [
            'long', 'short', 'buy', 'sell', 'entry', 'target', 'stop', 'take profit',
            'üöÄ', 'üìâ', 'üî•', 'üìà', 'üíé', 'üéØ', 'üõë', '‚ö°'
        ]
        
        found_terms = []
        for term in trading_terms:
            if term.lower() in text.lower():
                found_terms.append(term)
        
        if found_terms:
            print(f"   üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {found_terms}")
        
        # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        percent_pattern = r'[+-]?\d+%'
        percents = re.findall(percent_pattern, text)
        if percents:
            print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {percents}")
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–Ω—ã)
        number_pattern = r'\$?(\d{1,3}(?:,\d{3})*(?:\.\d+)?)'
        numbers = re.findall(number_pattern, text)
        if numbers:
            print(f"   üí∞ –ß–∏—Å–ª–∞ (—Ü–µ–Ω—ã): {numbers[:5]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
    
    return all_patterns

def search_for_signals(messages):
    """–ò—â–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
    print(f"\nüîç –ü–û–ò–°–ö –°–ò–ì–ù–ê–õ–û–í –í {len(messages)} –°–û–û–ë–©–ï–ù–ò–Ø–•")
    print("=" * 60)
    
    signals = []
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    patterns = [
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        r'(\w+)/USDT\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å Entry/Target/Stop
        r'(\w+)\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)',
        r'(\w+)\s+(LONG|SHORT)\s+Target:\s*\$?([\d,]+\.?\d*)',
        r'(\w+)\s+(LONG|SHORT)\s+Stop:\s*\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏
        r'üöÄ\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        r'üìâ\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        r'üî•\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        r'(\w+)\s+(LONG|SHORT)\s+[+-]\d+%\s+\$?([\d,]+\.?\d*)',
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
        r'(\w+)\s+\$?([\d,]+\.?\d*)\s+(LONG|SHORT)',
        r'(\w+)\s+\$?([\d,]+\.?\d*)\s+(BUY|SELL)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å @
        r'(\w+)\s+@\s*\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏
        r'(\w+)\.(LONG|SHORT)\.\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
        r'(\w+)_(LONG|SHORT)_\$?([\d,]+\.?\d*)',
    ]
    
    for message in messages:
        text = message['text']
        
        for pattern in patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                if len(match.groups()) >= 2:
                    signal = {
                        "asset": match.group(1).upper(),
                        "direction": match.group(2).upper() if len(match.groups()) >= 3 else "UNKNOWN",
                        "entry_price": float(match.group(len(match.groups())).replace(',', '')),
                        "pattern_used": pattern[:50] + "...",
                        "message_text": text[:100] + "...",
                        "message_id": message['id']
                    }
                    signals.append(signal)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
                    print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {signal['pattern_used']}")
                    print(f"   –¢–µ–∫—Å—Ç: {signal['message_text']}")
                    print()
    
    return signals

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –ò –ü–û–ò–°–ö –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    channels = [
        "CryptoCapoTG",
        "cryptosignals", 
        "binance_signals"
    ]
    
    all_signals = []
    
    for username in channels:
        print(f"\n{'='*60}")
        print(f"üì° –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê: {username}")
        print(f"{'='*60}")
        
        messages = get_real_messages(username)
        
        if messages:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = analyze_message_patterns(messages)
            
            # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = search_for_signals(messages)
            
            for signal in signals:
                signal['channel_username'] = username
                all_signals.append(signal)
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {username}")
        else:
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
    
    if all_signals:
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
        for i, signal in enumerate(all_signals, 1):
            print(f"  {i}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
            print(f"     –ö–∞–Ω–∞–ª: {signal['channel_username']}")
            print(f"     –ü–∞—Ç—Ç–µ—Ä–Ω: {signal['pattern_used']}")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            "success": True,
            "total_signals": len(all_signals),
            "signals": all_signals,
            "analysis_time": datetime.now().isoformat()
        }
        
        with open('real_signals_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_signals_analysis.json")
    else:
        print(f"\n‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –ö–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("- –°–∏–≥–Ω–∞–ª—ã –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        print("- –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞")
        print("- –ö–∞–Ω–∞–ª—ã –ø—É–±–ª–∏–∫—É—é—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –∞ –Ω–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")

if __name__ == "__main__":
    main()
