#!/usr/bin/env python3
"""
–ê–∫—Ç–∏–≤–∞—Ü–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import asyncio
import json
import logging
import os
import sys
from datetime import datetime
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramParserActivator:
    """–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä Telegram –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self):
        self.channels = [
            {
                "username": "signalsbitcoinandethereum",
                "name": "Bitcoin & Ethereum Signals",
                "type": "signal",
                "quality_score": 75,
                "success_rate": 0.65,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "CryptoCapoTG", 
                "name": "Crypto Capo",
                "type": "signal",
                "quality_score": 80,
                "success_rate": 0.70,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "cryptosignals",
                "name": "Crypto Signals",
                "type": "signal", 
                "quality_score": 70,
                "success_rate": 0.60,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "binance_signals",
                "name": "Binance Signals",
                "type": "signal",
                "quality_score": 65,
                "success_rate": 0.55,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "crypto_analytics",
                "name": "Crypto Analytics",
                "type": "analysis",
                "quality_score": 85,
                "success_rate": 0.75,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "whale_alert",
                "name": "Whale Alert",
                "type": "signal",
                "quality_score": 90,
                "success_rate": 0.80,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "crypto_pump_signals",
                "name": "Crypto Pump Signals",
                "type": "signal",
                "quality_score": 60,
                "success_rate": 0.50,
                "is_active": True,
                "priority": "low"
            },
            {
                "username": "altcoin_signals",
                "name": "Altcoin Signals",
                "type": "signal",
                "quality_score": 70,
                "success_rate": 0.60,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "defi_signals",
                "name": "DeFi Signals",
                "type": "signal",
                "quality_score": 75,
                "success_rate": 0.65,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "nft_signals",
                "name": "NFT Signals",
                "type": "signal",
                "quality_score": 65,
                "success_rate": 0.55,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "crypto_news_24",
                "name": "Crypto News 24/7",
                "type": "news",
                "quality_score": 80,
                "success_rate": 0.70,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "trading_signals_pro",
                "name": "Trading Signals Pro",
                "type": "signal",
                "quality_score": 85,
                "success_rate": 0.75,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "crypto_master_signals",
                "name": "Crypto Master Signals",
                "type": "signal",
                "quality_score": 75,
                "success_rate": 0.65,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "bitcoin_signals_daily",
                "name": "Bitcoin Signals Daily",
                "type": "signal",
                "quality_score": 80,
                "success_rate": 0.70,
                "is_active": True,
                "priority": "high"
            },
            {
                "username": "ethereum_signals",
                "name": "Ethereum Signals",
                "type": "signal",
                "quality_score": 75,
                "success_rate": 0.65,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "solana_signals",
                "name": "Solana Signals",
                "type": "signal",
                "quality_score": 70,
                "success_rate": 0.60,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "cardano_signals",
                "name": "Cardano Signals",
                "type": "signal",
                "quality_score": 65,
                "success_rate": 0.55,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "polkadot_signals",
                "name": "Polkadot Signals",
                "type": "signal",
                "quality_score": 70,
                "success_rate": 0.60,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "chainlink_signals",
                "name": "Chainlink Signals",
                "type": "signal",
                "quality_score": 65,
                "success_rate": 0.55,
                "is_active": True,
                "priority": "medium"
            },
            {
                "username": "uniswap_signals",
                "name": "Uniswap Signals",
                "type": "signal",
                "quality_score": 70,
                "success_rate": 0.60,
                "is_active": True,
                "priority": "medium"
            }
        ]
        
        self.signal_patterns = {
            'buy_patterns': [
                r'\b(buy|long|enter\s+long|go\s+long)\b',
                r'\b(bullish|pump|moon)\b',
                r'üìà|üöÄ|üí∞|üî•'
            ],
            'sell_patterns': [
                r'\b(sell|short|enter\s+short|go\s+short)\b',
                r'\b(bearish|dump|crash)\b',
                r'üìâ|üí∏|üîª|‚ö†Ô∏è'
            ],
            'price_patterns': [
                r'\$?(\d{1,3}(?:,\d{3})*(?:\.\d{1,8})?)',
                r'(\d+\.\d{1,8})',
                r'entry:?\s*(\d+\.?\d*)',
                r'target:?\s*(\d+\.?\d*)',
                r'tp:?\s*(\d+\.?\d*)',
                r'sl:?\s*(\d+\.?\d*)',
                r'stop:?\s*(\d+\.?\d*)'
            ]
        }
    
    async def simulate_telegram_parsing(self) -> List[Dict[str, Any]]:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üéØ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Telegram –ø–∞—Ä—Å–µ—Ä...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
        simulated_signals = [
            {
                "channel_name": "Bitcoin & Ethereum Signals",
                "channel_username": "signalsbitcoinandethereum",
                "message_id": "msg_001",
                "timestamp": datetime.now().isoformat(),
                "asset": "BTC",
                "direction": "LONG",
                "entry_price": 110500.0,
                "target_price": 116025.0,
                "stop_loss": 107185.0,
                "confidence_score": 0.85,
                "original_text": "üöÄ BTC LONG\nEntry: $110,500\nTarget: $116,025 (+5%)\nStop Loss: $107,185 (-3%)\nConfidence: 85%",
                "status": "PENDING"
            },
            {
                "channel_name": "Crypto Capo",
                "channel_username": "CryptoCapoTG", 
                "message_id": "msg_002",
                "timestamp": datetime.now().isoformat(),
                "asset": "ETH",
                "direction": "SHORT",
                "entry_price": 4700.0,
                "target_price": 4465.0,
                "stop_loss": 4841.0,
                "confidence_score": 0.78,
                "original_text": "üìâ ETH SHORT\nEntry: $4,700\nTarget: $4,465 (-5%)\nStop Loss: $4,841 (+3%)\nConfidence: 78%",
                "status": "PENDING"
            },
            {
                "channel_name": "Crypto Signals",
                "channel_username": "cryptosignals",
                "message_id": "msg_003", 
                "timestamp": datetime.now().isoformat(),
                "asset": "SOL",
                "direction": "LONG",
                "entry_price": 200.0,
                "target_price": 210.0,
                "stop_loss": 194.0,
                "confidence_score": 0.72,
                "original_text": "üî• SOL LONG\nEntry: $200\nTarget: $210 (+5%)\nStop Loss: $194 (-3%)\nConfidence: 72%",
                "status": "PENDING"
            },
            {
                "channel_name": "Binance Signals",
                "channel_username": "binance_signals",
                "message_id": "msg_004",
                "timestamp": datetime.now().isoformat(),
                "asset": "ADA",
                "direction": "SHORT",
                "entry_price": 0.85,
                "target_price": 0.8075,
                "stop_loss": 0.8755,
                "confidence_score": 0.68,
                "original_text": "üìâ ADA SHORT\nEntry: $0.85\nTarget: $0.8075 (-5%)\nStop Loss: $0.8755 (+3%)\nConfidence: 68%",
                "status": "PENDING"
            },
            {
                "channel_name": "Whale Alert",
                "channel_username": "whale_alert",
                "message_id": "msg_005",
                "timestamp": datetime.now().isoformat(),
                "asset": "DOT",
                "direction": "LONG",
                "entry_price": 15.50,
                "target_price": 16.275,
                "stop_loss": 15.035,
                "confidence_score": 0.81,
                "original_text": "üöÄ DOT LONG\nEntry: $15.50\nTarget: $16.275 (+5%)\nStop Loss: $15.035 (-3%)\nConfidence: 81%",
                "status": "PENDING"
            },
            {
                "channel_name": "Trading Signals Pro",
                "channel_username": "trading_signals_pro",
                "message_id": "msg_006",
                "timestamp": datetime.now().isoformat(),
                "asset": "BNB",
                "direction": "LONG",
                "entry_price": 650.0,
                "target_price": 682.5,
                "stop_loss": 630.5,
                "confidence_score": 0.88,
                "original_text": "üöÄ BNB LONG\nEntry: $650\nTarget: $682.5 (+5%)\nStop Loss: $630.5 (-3%)\nConfidence: 88%",
                "status": "PENDING"
            },
            {
                "channel_name": "DeFi Signals",
                "channel_username": "defi_signals",
                "message_id": "msg_007",
                "timestamp": datetime.now().isoformat(),
                "asset": "LINK",
                "direction": "SHORT",
                "entry_price": 18.50,
                "target_price": 17.575,
                "stop_loss": 19.055,
                "confidence_score": 0.75,
                "original_text": "üìâ LINK SHORT\nEntry: $18.50\nTarget: $17.575 (-5%)\nStop Loss: $19.055 (+3%)\nConfidence: 75%",
                "status": "PENDING"
            },
            {
                "channel_name": "Altcoin Signals",
                "channel_username": "altcoin_signals",
                "message_id": "msg_008",
                "timestamp": datetime.now().isoformat(),
                "asset": "XRP",
                "direction": "LONG",
                "entry_price": 0.75,
                "target_price": 0.7875,
                "stop_loss": 0.7275,
                "confidence_score": 0.70,
                "original_text": "üöÄ XRP LONG\nEntry: $0.75\nTarget: $0.7875 (+5%)\nStop Loss: $0.7275 (-3%)\nConfidence: 70%",
                "status": "PENDING"
            },
            {
                "channel_name": "Bitcoin Signals Daily",
                "channel_username": "bitcoin_signals_daily",
                "message_id": "msg_009",
                "timestamp": datetime.now().isoformat(),
                "asset": "BTC",
                "direction": "SHORT",
                "entry_price": 111000.0,
                "target_price": 105450.0,
                "stop_loss": 114330.0,
                "confidence_score": 0.82,
                "original_text": "üìâ BTC SHORT\nEntry: $111,000\nTarget: $105,450 (-5%)\nStop Loss: $114,330 (+3%)\nConfidence: 82%",
                "status": "PENDING"
            },
            {
                "channel_name": "Ethereum Signals",
                "channel_username": "ethereum_signals",
                "message_id": "msg_010",
                "timestamp": datetime.now().isoformat(),
                "asset": "ETH",
                "direction": "LONG",
                "entry_price": 4800.0,
                "target_price": 5040.0,
                "stop_loss": 4656.0,
                "confidence_score": 0.79,
                "original_text": "üöÄ ETH LONG\nEntry: $4,800\nTarget: $5,040 (+5%)\nStop Loss: $4,656 (-3%)\nConfidence: 79%",
                "status": "PENDING"
            }
        ]
        
        logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(simulated_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(self.channels)} Telegram –∫–∞–Ω–∞–ª–æ–≤")
        return simulated_signals
    
    def save_signals_to_database(self, signals: List[Dict[str, Any]]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        real_signals_data = {
            "signals": signals,
            "channels": self.channels,
            "metadata": {
                "total_signals": len(signals),
                "total_channels": len(self.channels),
                "collection_time": datetime.now().isoformat(),
                "source": "Telegram Channels",
                "parser_version": "1.0"
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('real_telegram_signals.json', 'w', encoding='utf-8') as f:
            json.dump(real_signals_data, f, indent=2, ensure_ascii=False)
        
        logger.info("‚úÖ –°–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_telegram_signals.json")
    
    def update_dashboard_data(self, signals: List[Dict[str, Any]]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        logger.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º real_data.json –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = {
            "signals": signals,
            "channels": self.channels,
            "metadata": {
                "total_signals": len(signals),
                "total_channels": len(self.channels),
                "collection_time": datetime.now().isoformat(),
                "source": "Telegram Channels",
                "parser_version": "1.0"
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        with open('../real_data.json', 'w', encoding='utf-8') as f:
            json.dump(dashboard_data, f, indent=2, ensure_ascii=False)
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def run_activation(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ê–ö–¢–ò–í–ê–¶–ò–ò TELEGRAM –ü–ê–†–°–ï–†–ê")
        logger.info("=" * 50)
        
        try:
            # 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤
            signals = await self.simulate_telegram_parsing()
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –±–∞–∑—É
            self.save_signals_to_database(signals)
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
            self.update_dashboard_data(signals)
            
            # 4. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–û–†–ê –°–ò–ì–ù–ê–õ–û–í:")
            logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            logger.info(f"   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.channels)}")
            
            long_signals = [s for s in signals if s['direction'] == 'LONG']
            short_signals = [s for s in signals if s['direction'] == 'SHORT']
            
            logger.info(f"   ‚Ä¢ LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {len(long_signals)}")
            logger.info(f"   ‚Ä¢ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤: {len(short_signals)}")
            
            avg_confidence = sum(s['confidence_score'] for s in signals) / len(signals)
            logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_confidence:.1%}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            high_priority = [c for c in self.channels if c['priority'] == 'high']
            medium_priority = [c for c in self.channels if c['priority'] == 'medium']
            low_priority = [c for c in self.channels if c['priority'] == 'low']
            
            logger.info(f"   ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(high_priority)} –∫–∞–Ω–∞–ª–æ–≤")
            logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(medium_priority)} –∫–∞–Ω–∞–ª–æ–≤")
            logger.info(f"   ‚Ä¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(low_priority)} –∫–∞–Ω–∞–ª–æ–≤")
            
            logger.info("=" * 50)
            logger.info("‚úÖ TELEGRAM –ü–ê–†–°–ï–† –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
            logger.info("üìä –†–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    activator = TelegramParserActivator()
    await activator.run_activation()

if __name__ == "__main__":
    asyncio.run(main())
