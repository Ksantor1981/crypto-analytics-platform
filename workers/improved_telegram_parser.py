import urllib.request
import json
import re
from datetime import datetime
import time

class ImprovedTelegramParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.opener = urllib.request.build_opener()
        self.opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
        ]
    
    def get_channel_content(self, username):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞"""
        try:
            url = f"https://t.me/s/{username}"
            print(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {username}...")
            
            with self.opener.open(url, timeout=15) as response:
                content = response.read().decode('utf-8')
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {username}")
                return content
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {username}: {e}")
            return None
    
    def extract_messages_from_html(self, html_content, username):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        messages = []
        
        if not html_content:
            return messages
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
        message_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
        matches = re.findall(message_pattern, html_content, re.DOTALL)
        
        for i, text_html in enumerate(matches):
            # –û—á–∏—â–∞–µ–º HTML –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = re.sub(r'<[^>]+>', '', text_html)
            text = re.sub(r'&nbsp;', ' ', text)
            text = re.sub(r'&amp;', '&', text)
            text = re.sub(r'&lt;', '<', text)
            text = re.sub(r'&gt;', '>', text)
            text = re.sub(r'&#036;', '$', text)  # –ó–∞–º–µ–Ω—è–µ–º HTML-–∫–æ–¥ –¥–æ–ª–ª–∞—Ä–∞
            text = re.sub(r'&#39;', "'", text)   # –ó–∞–º–µ–Ω—è–µ–º HTML-–∫–æ–¥ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞
            text = text.strip()
            
            if text and len(text) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages.append({
                    'id': f"msg_{i}",
                    'text': text,
                    'date': datetime.now().isoformat(),
                    'username': username
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
        return messages
    
    def extract_signals_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        signals = []
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        patterns = [
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Ü–µ–Ω–∞–º–∏
            r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
            r'(\w+)\s+(BUY|SELL)\s+\$?([\d,]+\.?\d*)',
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT|BUY|SELL)\s+\$?([\d,]+\.?\d*)',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —ç–º–æ–¥–∑–∏ –±–µ–∑ —Ü–µ–Ω
            r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT|BUY|SELL)',
            r'(\w+)\s+(LONG|SHORT|BUY|SELL)\s*[üöÄüìâüî•]',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            r'\$(\w+)\s+(LONG|SHORT|BUY|SELL)',
            r'(\w+)\s+(LONG|SHORT|BUY|SELL)\s+update',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Ü–µ–ª—è–º–∏
            r'(\w+)\s+target\s+\$?([\d,]+\.?\d*)',
            r'(\w+)\s+resistance\s+\$?([\d,]+\.?\d*)',
            r'(\w+)\s+support\s+\$?([\d,]+\.?\d*)',
        ]
        
        for pattern in patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                groups = match.groups()
                
                if len(groups) >= 2:
                    signal = {
                        "asset": groups[0].upper(),
                        "direction": groups[1].upper(),
                        "entry_price": float(groups[2].replace(',', '')) if len(groups) > 2 and groups[2].replace(',', '').replace('.', '').isdigit() else None,
                        "target_price": None,
                        "stop_loss": None,
                        "pattern_used": pattern[:50] + "...",
                        "original_text": text[:200] + "..." if len(text) > 200 else text
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç
                    if not any(s['asset'] == signal['asset'] and s['direction'] == signal['direction'] for s in signals):
                        signals.append(signal)
        
        return signals
    
    def parse_channel(self, username, hours_back=24):
        """–ü–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–∞–ª–∞
        content = self.get_channel_content(username)
        if not content:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = self.extract_messages_from_html(content, username)
        if not messages:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {username}")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        all_signals = []
        for message in messages:
            signals = self.extract_signals_from_text(message['text'])
            for signal in signals:
                signal.update({
                    'channel': username,
                    'message_id': message['id'],
                    'timestamp': message['date'],
                    'extraction_time': datetime.now().isoformat()
                })
                all_signals.append(signal)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {username}")
        return all_signals
    
    def parse_all_channels(self, channels, hours_back=24):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        all_signals = []
        channel_stats = {}
        
        for username in channels:
            try:
                signals = self.parse_channel(username, hours_back)
                all_signals.extend(signals)
                
                channel_stats[username] = {
                    'signals_found': len(signals),
                    'channel_name': username
                }
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {username}: {e}")
                channel_stats[username] = {
                    'signals_found': 0,
                    'channel_name': username,
                    'error': str(e)
                }
        
        return all_signals, channel_stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = ImprovedTelegramParser()
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    channels = [
        'CryptoCapoTG',
        'signalsbitcoinandethereum',
        'cryptosignals',
        'binance_signals'
    ]
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    signals, stats = parser.parse_all_channels(channels, hours_back=24)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = {
        'success': True,
        'total_signals': len(signals),
        'signals': signals,
        'channel_stats': stats,
        'collection_time': datetime.now().isoformat(),
        'hours_back': 24
    }
    
    with open('improved_telegram_signals.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: improved_telegram_signals.json")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
    for channel, stat in stats.items():
        print(f"üì± {channel}: {stat['signals_found']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if signals:
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
        for i, signal in enumerate(signals, 1):
            print(f"   {i}. {signal['asset']} {signal['direction']} ${signal['entry_price'] if signal['entry_price'] else 'N/A'}")

if __name__ == "__main__":
    main()
