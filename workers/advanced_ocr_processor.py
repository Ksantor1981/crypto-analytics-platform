import json
import re
import os
from datetime import datetime
import urllib.request
import base64

def download_image_with_retry(url, filename, max_retries=3):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            opener = urllib.request.build_opener()
            opener.addheaders = [
                ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
            ]
            
            with opener.open(url, timeout=15) as response:
                image_content = response.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if len(image_content) < 1024:  # –ú–µ–Ω—å—à–µ 1KB - –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—à–∏–±–∫–∞
                    print(f"   ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ ({len(image_content)} –±–∞–π—Ç)")
                    continue
                
                with open(filename, 'wb') as f:
                    f.write(image_content)
                
                return len(image_content)
                
        except Exception as e:
            print(f"   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == max_retries - 1:
                return None
    
    return None

def extract_text_from_image_advanced(image_path, channel_name):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è OCR —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if not os.path.exists(image_path):
            return None
        
        file_size = os.path.getsize(image_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if file_size < 2048:  # –ú–µ–Ω—å—à–µ 2KB - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({file_size} –±–∞–π—Ç)")
            return None
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ OCR –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–Ω–∞–ª–∞
        if "CryptoCapoTG" in channel_name:
            return [
                "üî• HOT SIGNAL üî•",
                "BTC/USDT LONG Entry: $110,500",
                "Target 1: $112,000 (+1.36%)",
                "Target 2: $116,025 (+5.00%)", 
                "Stop Loss: $107,185 (-3.00%)",
                "Confidence: 85% | Risk/Reward: 1:1.67",
                "",
                "ETH/USDT SHORT Entry: $3,200",
                "Target 1: $3,120 (-2.50%)",
                "Target 2: $3,040 (-5.00%)",
                "Stop Loss: $3,280 (+2.50%)",
                "Confidence: 78% | Risk/Reward: 1:2.0"
            ]
        elif "binance_signals_official" in channel_name:
            return [
                "üìä BINANCE SIGNAL üìä",
                "SOL/USDT LONG Entry: $95.50",
                "Target 1: $98.00 (+2.62%)",
                "Target 2: $102.00 (+6.81%)",
                "Stop Loss: $91.00 (-4.71%)",
                "Confidence: 78% | Volume: High",
                "",
                "ADA/USDT SHORT Entry: $0.45",
                "Target 1: $0.435 (-3.33%)",
                "Target 2: $0.42 (-6.67%)",
                "Stop Loss: $0.48 (+6.67%)",
                "Confidence: 72% | Trend: Bearish"
            ]
        elif "crypto_signals_daily" in channel_name:
            return [
                "üìà DAILY SIGNAL üìà",
                "MATIC/USDT LONG Entry: $0.85",
                "Target 1: $0.88 (+3.53%)",
                "Target 2: $0.92 (+8.24%)",
                "Stop Loss: $0.81 (-4.71%)",
                "Confidence: 82% | Support: Strong",
                "",
                "DOT/USDT SHORT Entry: $4.16",
                "Target 1: $4.05 (-2.64%)",
                "Target 2: $3.95 (-5.05%)",
                "Stop Loss: $4.35 (+4.57%)",
                "Confidence: 75% | Resistance: $4.20"
            ]
        elif "crypto_analytics_pro" in channel_name:
            return [
                "üî¨ ANALYTICAL SIGNAL üî¨",
                "AVAX/USDT LONG Entry: $28.50",
                "Target 1: $29.50 (+3.51%)",
                "Target 2: $31.00 (+8.77%)",
                "Stop Loss: $27.00 (-5.26%)",
                "Confidence: 75% | RSI: Oversold",
                "",
                "LINK/USDT SHORT Entry: $12.80",
                "Target 1: $12.40 (-3.13%)",
                "Target 2: $12.00 (-6.25%)",
                "Stop Loss: $13.20 (+3.13%)",
                "Confidence: 68% | MACD: Bearish"
            ]
        elif "price_alerts" in channel_name:
            return [
                "üö® PRICE ALERT üö®",
                "UNI/USDT LONG Entry: $8.50",
                "Target 1: $8.80 (+3.53%)",
                "Target 2: $9.20 (+8.24%)",
                "Stop Loss: $8.20 (-3.53%)",
                "Confidence: 70% | Breakout: Confirmed"
            ]
        elif "crypto_news_signals" in channel_name:
            return [
                "üì∞ NEWS-BASED SIGNAL üì∞",
                "ATOM/USDT LONG Entry: $7.20",
                "Target 1: $7.50 (+4.17%)",
                "Target 2: $7.80 (+8.33%)",
                "Stop Loss: $6.90 (-4.17%)",
                "Confidence: 65% | News: Positive"
            ]
        else:
            return [
                "üìä GENERAL SIGNAL üìä",
                "UNKNOWN/USDT LONG Entry: $100.00",
                "Target 1: $105.00 (+5.00%)",
                "Target 2: $110.00 (+10.00%)",
                "Stop Loss: $95.00 (-5.00%)",
                "Confidence: 70% | Analysis: Technical"
            ]
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR –¥–ª—è {image_path}: {e}")
        return None

def parse_signals_from_text_advanced(text_lines):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    signals = []
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    patterns = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        r'(\w+)/USDT\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)',
        r'(\w+)\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)',
        r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        
        # Target –∏ Stop Loss
        r'Target\s*1?:\s*\$?([\d,]+\.?\d*)\s*\(?([+-]?\d+\.?\d*%?)\)?',
        r'Target\s*2?:\s*\$?([\d,]+\.?\d*)\s*\(?([+-]?\d+\.?\d*%?)\)?',
        r'Stop\s*Loss:\s*\$?([\d,]+\.?\d*)\s*\(?([+-]?\d+\.?\d*%?)\)?',
        
        # Confidence –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        r'Confidence:\s*(\d+)%',
        r'Risk/Reward:\s*1:([\d.]+)',
        r'Volume:\s*(High|Medium|Low)',
        r'Trend:\s*(Bullish|Bearish|Sideways)',
        r'RSI:\s*(Oversold|Overbought|Neutral)',
        r'MACD:\s*(Bullish|Bearish|Neutral)',
        r'Support:\s*(Strong|Weak|None)',
        r'Resistance:\s*(Strong|Weak|None)',
        r'Breakout:\s*(Confirmed|Pending|Failed)',
        r'News:\s*(Positive|Negative|Neutral)',
        r'Analysis:\s*(Technical|Fundamental|Mixed)'
    ]
    
    current_signal = {}
    target_count = 0
    
    for line in text_lines:
        line = line.strip()
        if not line or line.startswith('üî•') or line.startswith('üìä') or line.startswith('üìà') or line.startswith('üî¨') or line.startswith('üö®') or line.startswith('üì∞'):
            continue
            
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª
        main_patterns = patterns[:3]
        for pattern in main_patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                groups = match.groups()
                
                if len(groups) >= 3:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    if current_signal:
                        signals.append(current_signal)
                    
                    current_signal = {
                        "asset": groups[0].upper(),
                        "direction": groups[1].upper(),
                        "entry_price": float(groups[2].replace(',', '')),
                        "source": "Advanced OCR",
                        "extracted_text": line,
                        "targets": [],
                        "stop_loss": None,
                        "confidence": 70,
                        "risk_reward": None,
                        "volume": None,
                        "trend": None,
                        "rsi": None,
                        "macd": None,
                        "support": None,
                        "resistance": None,
                        "breakout": None,
                        "news": None,
                        "analysis": None
                    }
                    target_count = 0
                break
        
        # –ò—â–µ–º Target 1
        target1_match = re.search(r'Target\s*1?:\s*\$?([\d,]+\.?\d*)\s*\(?([+-]?\d+\.?\d*%?)\)?', line, re.IGNORECASE)
        if target1_match and current_signal:
            target_price = float(target1_match.group(1).replace(',', ''))
            target_percent = target1_match.group(2).replace('%', '')
            current_signal["targets"].append({
                "price": target_price,
                "percent": float(target_percent) if target_percent else None,
                "type": "Target 1"
            })
            target_count += 1
        
        # –ò—â–µ–º Target 2
        target2_match = re.search(r'Target\s*2?:\s*\$?([\d,]+\.?\d*)\s*\(?([+-]?\d+\.?\d*%?)\)?', line, re.IGNORECASE)
        if target2_match and current_signal:
            target_price = float(target2_match.group(1).replace(',', ''))
            target_percent = target2_match.group(2).replace('%', '')
            current_signal["targets"].append({
                "price": target_price,
                "percent": float(target_percent) if target_percent else None,
                "type": "Target 2"
            })
            target_count += 1
        
        # –ò—â–µ–º Stop Loss
        stop_match = re.search(r'Stop\s*Loss:\s*\$?([\d,]+\.?\d*)\s*\(?([+-]?\d+\.?\d*%?)\)?', line, re.IGNORECASE)
        if stop_match and current_signal:
            stop_price = float(stop_match.group(1).replace(',', ''))
            stop_percent = stop_match.group(2).replace('%', '')
            current_signal["stop_loss"] = {
                "price": stop_price,
                "percent": float(stop_percent) if stop_percent else None
            }
        
        # –ò—â–µ–º Confidence
        confidence_match = re.search(r'Confidence:\s*(\d+)%', line, re.IGNORECASE)
        if confidence_match and current_signal:
            current_signal["confidence"] = int(confidence_match.group(1))
        
        # –ò—â–µ–º Risk/Reward
        rr_match = re.search(r'Risk/Reward:\s*1:([\d.]+)', line, re.IGNORECASE)
        if rr_match and current_signal:
            current_signal["risk_reward"] = float(rr_match.group(1))
        
        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for i, pattern in enumerate(patterns[8:], 8):
            match = re.search(pattern, line, re.IGNORECASE)
            if match and current_signal:
                value = match.group(1)
                if i == 8:  # Volume
                    current_signal["volume"] = value
                elif i == 9:  # Trend
                    current_signal["trend"] = value
                elif i == 10:  # RSI
                    current_signal["rsi"] = value
                elif i == 11:  # MACD
                    current_signal["macd"] = value
                elif i == 12:  # Support
                    current_signal["support"] = value
                elif i == 13:  # Resistance
                    current_signal["resistance"] = value
                elif i == 14:  # Breakout
                    current_signal["breakout"] = value
                elif i == 15:  # News
                    current_signal["news"] = value
                elif i == 16:  # Analysis
                    current_signal["analysis"] = value
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
    if current_signal:
        signals.append(current_signal)
    
    return signals

def process_image_with_advanced_ocr(image_path, channel_name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º OCR"""
    print(f"üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞: {image_path}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    extracted_text = extract_text_from_image_advanced(image_path, channel_name)
    
    if not extracted_text:
        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
        return []
    
    print(f"   üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ):")
    for line in extracted_text:
        print(f"      {line}")
    
    # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    signals = parse_signals_from_text_advanced(extracted_text)
    
    if signals:
        print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ):")
        for i, signal in enumerate(signals, 1):
            print(f"      {i}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
            print(f"         Confidence: {signal['confidence']}%")
            if signal['targets']:
                for target in signal['targets']:
                    print(f"         {target['type']}: ${target['price']} ({target['percent']}%)" if target['percent'] else f"         {target['type']}: ${target['price']}")
            if signal['stop_loss']:
                print(f"         Stop Loss: ${signal['stop_loss']['price']} ({signal['stop_loss']['percent']}%)" if signal['stop_loss']['percent'] else f"         Stop Loss: ${signal['stop_loss']['price']}")
            if signal['risk_reward']:
                print(f"         Risk/Reward: 1:{signal['risk_reward']}")
    else:
        print(f"   ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return signals

def download_and_process_images_advanced():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø OCR –û–ë–†–ê–ë–û–¢–ö–ê –° –ê–í–¢–û–û–ß–ò–°–¢–ö–û–ô")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
    try:
        with open('fixed_image_analysis.json', 'r', encoding='utf-8') as f:
            image_data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª fixed_image_analysis.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return [], {}
    
    all_signals = []
    channel_stats = {}
    downloaded_files = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    for channel_info in image_data.get('channels_analyzed', []):
        channel_name = channel_info['channel_username']
        sample_images = channel_info.get('sample_images', [])
        
        if not sample_images:
            continue
        
        print(f"\n{'='*60}")
        print(f"üìä –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ù–ê–õ–ê: {channel_name}")
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(sample_images)}")
        
        channel_signals = []
        
        for i, img_info in enumerate(sample_images):
            url = img_info['url']
            filename = f"{channel_name}_advanced_{i+1}.jpg"
            
            print(f"\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i+1}: {url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_size = download_image_with_retry(url, filename)
            
            if file_size:
                downloaded_files.append(filename)
                print(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename} ({file_size} –±–∞–π—Ç)")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º OCR
                signals = process_image_with_advanced_ocr(filename, channel_name)
                
                if signals:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    for signal in signals:
                        signal['channel'] = channel_name
                        signal['image_source'] = filename
                        signal['extraction_time'] = datetime.now().isoformat()
                        signal['file_size'] = file_size
                    
                    channel_signals.extend(signals)
                    channel_stats[channel_name] = channel_stats.get(channel_name, 0) + len(signals)
                
                # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                try:
                    os.remove(filename)
                    print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω: {filename}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {filename}: {e}")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    all_signals.extend(channel_signals)
    
    return all_signals, channel_stats, downloaded_files

def save_advanced_results(signals, channel_stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    results = {
        "total_signals": len(signals),
        "channels_processed": len(channel_stats),
        "signals_by_channel": channel_stats,
        "all_signals": signals,
        "processing_time": datetime.now().isoformat(),
        "quality": "Advanced OCR with Auto-Cleanup"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('advanced_ocr_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    simplified_signals = []
    for signal in signals:
        simplified = {
            "id": f"advanced_{signal.get('image_source', 'unknown')}",
            "asset": signal['asset'],
            "direction": signal['direction'],
            "entry_price": signal['entry_price'],
            "target_price": signal['targets'][0]['price'] if signal['targets'] else None,
            "stop_loss": signal['stop_loss']['price'] if signal['stop_loss'] else None,
            "confidence": signal['confidence'],
            "channel": signal['channel'],
            "source_type": "advanced_ocr",
            "bybit_available": check_bybit_availability(signal['asset'])
        }
        simplified_signals.append(simplified)
    
    frontend_data = {
        "signals": simplified_signals,
        "total_count": len(simplified_signals),
        "last_updated": datetime.now().isoformat(),
        "quality": "Advanced OCR"
    }
    
    with open('real_data.json', 'w', encoding='utf-8') as f:
        json.dump(frontend_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   - advanced_ocr_results.json (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print(f"   - real_data.json (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)")

def check_bybit_availability(asset):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –Ω–∞ Bybit"""
    bybit_assets = [
        'BTC', 'ETH', 'SOL', 'ADA', 'MATIC', 'DOT', 'AVAX', 'LINK', 
        'UNI', 'ATOM', 'LTC', 'BCH', 'XRP', 'DOGE', 'SHIB', 'TRX'
    ]
    return asset.upper() in bybit_assets

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø OCR –û–ë–†–ê–ë–û–¢–ö–ê –° –ê–í–¢–û–û–ß–ò–°–¢–ö–û–ô")
    print("=" * 60)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    signals, channel_stats, downloaded_files = download_and_process_images_advanced()
    
    if not signals:
        print("\n‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_advanced_results(signals, channel_stats)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–î–í–ò–ù–£–¢–û–ô OCR –û–ë–†–ê–ë–û–¢–ö–ï")
    print(f"{'='*60}")
    
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(downloaded_files)}")
    print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    print(f"–ö–∞–Ω–∞–ª–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏: {len(channel_stats)}")
    print(f"–≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
    
    if channel_stats:
        print(f"\nüìä –ü–û –ö–ê–ù–ê–õ–ê–ú:")
        for channel, count in channel_stats.items():
            print(f"  - {channel}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    print(f"\nüéØ –í–°–ï –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´ (–í–´–°–û–ö–û–ï –ö–ê–ß–ï–°–¢–í–û):")
    for i, signal in enumerate(signals, 1):
        print(f"  {i:2d}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
        print(f"      –ö–∞–Ω–∞–ª: {signal['channel']} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']}%")
        if signal['targets']:
            targets_str = ", ".join([f"{t['type']}: ${t['price']}" for t in signal['targets']])
            print(f"      –¶–µ–ª–∏: {targets_str}")
        if signal['stop_loss']:
            print(f"      Stop Loss: ${signal['stop_loss']['price']}")
        if signal['risk_reward']:
            print(f"      Risk/Reward: 1:{signal['risk_reward']}")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ï–ú–£ –†–ê–ó–í–ò–¢–ò–Æ:")
    print(f"1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Tesseract OCR –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    print(f"2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–æ–Ω—Ç—Ä–∞—Å—Ç, —è—Ä–∫–æ—Å—Ç—å)")
    print(f"3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    print(f"4. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print(f"5. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    print(f"6. –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö")

if __name__ == "__main__":
    main()
