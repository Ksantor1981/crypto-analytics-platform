import urllib.request
import json
import re
from datetime import datetime

def get_messages(username):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        url = f"https://t.me/s/{username}"
        
        opener = urllib.request.build_opener()
        opener.addheaders = [
            ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ]
        
        with opener.open(url, timeout=10) as response:
            content = response.read().decode('utf-8')
            
            messages = []
            text_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
            text_matches = re.findall(text_pattern, content, re.DOTALL)
            
            for i, text_html in enumerate(text_matches):
                text = re.sub(r'<[^>]+>', '', text_html)
                text = text.strip()
                
                if text and len(text) > 10:
                    messages.append({
                        'id': f"{username}_{i+1}",
                        'text': text,
                        'date': datetime.now().isoformat()
                    })
            
            return messages
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def find_enhanced_signals(messages):
    """–ò—â–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
    signals = []
    
    # –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    patterns = [
        # LONGING $SYS HERE
        r'(LONGING|SHORTING)\s+\$(\w+)\s+HERE',
        
        # Buying / Longing #SYS now
        r'(Buying|Longing)\s+[#\$](\w+)',
        
        # $SYS Breakout confirmed. Buying more
        r'\$(\w+)\s+Breakout.*?(Buying|Longing)',
        
        # Buy side liquidity above 4107
        r'(Buy|Sell)\s+side\s+liquidity\s+(above|below)\s+(\d+)',
        
        # LONG $BTC $110,500
        r'(LONG|SHORT)\s+\$(\w+)\s+\$?([\d,]+\.?\d*)',
        
        # $BTC LONG $110,500
        r'\$(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        
        # BTC/USDT LONG Entry: $110,500
        r'(\w+)/USDT\s+(LONG|SHORT)\s+Entry:\s*\$?([\d,]+\.?\d*)',
        
        # üöÄ BTC LONG $110,500
        r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        
        # Entry: $110,500 Target: $116,025 Stop: $107,185
        r'Entry:\s*\$?([\d,]+\.?\d*)\s+Target:\s*\$?([\d,]+\.?\d*)\s+Stop:\s*\$?([\d,]+\.?\d*)',
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
        r'(\w+)\s+\$?([\d,]+\.?\d*)\s+(LONG|SHORT)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏
        r'üöÄ\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        r'üìâ\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        r'üî•\s*(\w+)\s+\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å @
        r'(\w+)\s+@\s*\$?([\d,]+\.?\d*)',
        
        # –§–æ—Ä–º–∞—Ç—ã —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
        r'#(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
    ]
    
    for message in messages:
        text = message['text']
        
        for pattern in patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                groups = match.groups()
                
                if len(groups) >= 2:
                    signal = {
                        "pattern_used": pattern[:50] + "...",
                        "message_text": text[:150] + "...",
                        "message_id": message['id'],
                        "full_match": match.group(0)
                    }
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    if "LONGING" in pattern or "SHORTING" in pattern:
                        signal.update({
                            "direction": groups[0].upper(),
                            "asset": groups[1].upper(),
                            "entry_price": None
                        })
                    elif "Buying" in pattern or "Longing" in pattern:
                        signal.update({
                            "direction": "LONG" if "Longing" in groups[0] else "BUY",
                            "asset": groups[1].upper(),
                            "entry_price": None
                        })
                    elif "liquidity" in pattern:
                        signal.update({
                            "direction": groups[0].upper(),
                            "asset": "UNKNOWN",
                            "entry_price": float(groups[2].replace(',', ''))
                        })
                    elif len(groups) >= 3:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ü–µ–Ω–æ–π
                        try:
                            signal.update({
                                "asset": groups[0].upper(),
                                "direction": groups[1].upper(),
                                "entry_price": float(groups[2].replace(',', ''))
                            })
                        except (ValueError, IndexError):
                            continue
                    else:
                        # –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –≥—Ä—É–ø–ø–∞–º–∏
                        try:
                            signal.update({
                                "asset": groups[0].upper(),
                                "direction": "UNKNOWN",
                                "entry_price": float(groups[1].replace(',', ''))
                            })
                        except (ValueError, IndexError):
                            continue
                    
                    signals.append(signal)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
                    print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {signal['pattern_used']}")
                    print(f"   –¢–µ–∫—Å—Ç: {signal['message_text']}")
                    print()
    
    return signals

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    
    channels = [
        "CryptoCapoTG",
        "cryptosignals", 
        "binance_signals"
    ]
    
    all_signals = []
    
    for username in channels:
        print(f"\n{'='*60}")
        print(f"üì° –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê: {username}")
        print(f"{'='*60}")
        
        messages = get_messages(username)
        
        if messages:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            signals = find_enhanced_signals(messages)
            
            for signal in signals:
                signal['channel_username'] = username
                all_signals.append(signal)
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {username}")
        else:
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
    
    if all_signals:
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
        for i, signal in enumerate(all_signals, 1):
            print(f"  {i}. {signal['asset']} {signal['direction']} @ ${signal['entry_price']}")
            print(f"     –ö–∞–Ω–∞–ª: {signal['channel_username']}")
            print(f"     –ü–∞—Ç—Ç–µ—Ä–Ω: {signal['pattern_used']}")
            print(f"     –¢–µ–∫—Å—Ç: {signal['message_text']}")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            "success": True,
            "total_signals": len(all_signals),
            "signals": all_signals,
            "analysis_time": datetime.now().isoformat()
        }
        
        with open('enhanced_signals.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ enhanced_signals.json")
    else:
        print(f"\n‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–í—ã–≤–æ–¥: –ö–∞–Ω–∞–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")

if __name__ == "__main__":
    main()
