"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ —Å Backend API
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""
import asyncio
import aiohttp
import logging
import json
from typing import List, Dict, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class BackendIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Backend API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, backend_url: str = "http://localhost:8000"):
        self.backend_url = backend_url.rstrip('/')
        self.session = None
        
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
                
            async with self.session.get(f"{self.backend_url}/health") as response:
                if response.status == 200:
                    logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å backend —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend: {e}")
            return False
    
    async def send_signal(self, signal_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ backend"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç API
            api_signal = self.convert_to_api_format(signal_data)
            
            async with self.session.post(
                f"{self.backend_url}/api/v1/signals/",
                json=api_signal,
                headers={'Content-Type': 'application/json'}
            ) as response:
                
                if response.status in [200, 201]:
                    logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal_data.get('coin', 'Unknown')}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    async def send_signals_batch(self, signals: List[Dict]) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        results = {
            'total': len(signals),
            'success': 0,
            'failed': 0,
            'errors': []
        }
        
        for signal in signals:
            try:
                if await self.send_signal(signal):
                    results['success'] += 1
                else:
                    results['failed'] += 1
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                results['failed'] += 1
                results['errors'].append(str(e))
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {results['success']}/{results['total']} —É—Å–ø–µ—à–Ω–æ")
        return results
    
    def convert_to_api_format(self, signal_data: Dict) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç API"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        coin = signal_data.get('coin', '').upper()
        direction = signal_data.get('direction', 'LONG').upper()
        entry_price = self.parse_price(signal_data.get('entry'))
        target_price = self.parse_price(signal_data.get('target'))
        stop_loss = self.parse_price(signal_data.get('stop_loss'))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º API –æ–±—ä–µ–∫—Ç
        api_signal = {
            "symbol": coin,
            "signal_type": direction.lower() if direction in ['LONG', 'SHORT'] else 'long',
            "entry_price": entry_price,
            "target_price": target_price,
            "stop_loss": stop_loss,
            "confidence": signal_data.get('confidence', 0.5),
            "source": f"telegram_{signal_data.get('channel', 'unknown')}",
            "original_text": signal_data.get('original_text', ''),
            "metadata": {
                "telegram_channel": signal_data.get('channel'),
                "message_id": signal_data.get('message_id'),
                "message_date": signal_data.get('message_date'),
                "leverage": signal_data.get('leverage'),
                "extracted_at": datetime.utcnow().isoformat()
            }
        }
        
        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        return {k: v for k, v in api_signal.items() if v is not None}
    
    def parse_price(self, price_str: Optional[str]) -> Optional[float]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not price_str:
            return None
            
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            clean_price = str(price_str).replace(',', '.').strip()
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
            clean_price = ''.join(c for c in clean_price if c.isdigit() or c == '.')
            return float(clean_price) if clean_price else None
        except (ValueError, TypeError):
            return None
    
    async def get_backend_stats(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ backend"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
                
            async with self.session.get(f"{self.backend_url}/api/v1/signals/stats") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

class TelegramToBackendBridge:
    """–ú–æ—Å—Ç –º–µ–∂–¥—É Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º –∏ Backend API"""
    
    def __init__(self, backend_url: str = "http://localhost:8000"):
        self.backend_url = backend_url
        self.integration = BackendIntegration(backend_url)
        
    async def process_signals(self, signals: List[Dict]) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ backend"""
        async with self.integration as api:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await api.test_connection():
                return {"error": "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            valid_signals = self.validate_signals(signals)
            
            if not valid_signals:
                return {"error": "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç–æ–º
            results = await api.send_signals_batch(valid_signals)
            
            return results
    
    def validate_signals(self, signals: List[Dict]) -> List[Dict]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
        valid_signals = []
        
        for signal in signals:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not signal.get('coin'):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if signal.get('confidence', 0) < 0.3:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã entry –∏–ª–∏ target
            if not (signal.get('entry') or signal.get('target')):
                continue
                
            valid_signals.append(signal)
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {len(valid_signals)}/{len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return valid_signals
    
    async def start_real_time_bridge(self, telegram_collector):
        """–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        
        async def signal_callback(signal_data: Dict):
            """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
            try:
                async with self.integration as api:
                    await api.send_signal(signal_data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ real-time –º–æ—Å—Ç–µ: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å callback
        await telegram_collector.start_real_time_monitoring(callback=signal_callback)

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def test_backend_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    test_signal = {
        'coin': 'BTCUSDT',
        'direction': 'LONG', 
        'entry': '45000',
        'target': '46000',
        'stop_loss': '44000',
        'confidence': 0.8,
        'channel': 'test_channel',
        'original_text': 'TEST SIGNAL BTC LONG ENTRY 45000 TARGET 46000 SL 44000',
        'timestamp': datetime.utcnow().isoformat()
    }
    
    async with BackendIntegration() as api:
        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if await api.test_connection():
            logger.info("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
            success = await api.send_signal(test_signal)
            if success:
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await api.get_backend_stats()
            if stats:
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backend: {stats}")
        else:
            logger.error("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(test_backend_integration()) 