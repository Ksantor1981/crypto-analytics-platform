"""
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ —Å Backend API
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""
import asyncio
import logging
import sys
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

from real_telegram_collector import RealTelegramCollector, TELETHON_AVAILABLE
from backend_integration import TelegramToBackendBridge

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_integration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FullTelegramIntegration:
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ —Å Backend"""
    
    def __init__(self, backend_url: str = "http://localhost:8000"):
        self.backend_url = backend_url
        self.collector = RealTelegramCollector(use_real_config=True)
        self.bridge = TelegramToBackendBridge(backend_url)
        self.running = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        if not TELETHON_AVAILABLE:
            logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        if not await self.collector.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
            return False
            
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    
    async def collect_and_send_batch(self, limit: int = 100) -> Dict:
        """–°–±–æ—Ä –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ backend"""
        logger.info(f"üì° –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = await self.collector.collect_recent_messages(limit=limit)
        
        if not signals:
            logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {"error": "–°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ backend
        results = await self.bridge.process_signals(signals)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if 'error' not in results:
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {results['success']}/{results['total']} —Å–∏–≥–Ω–∞–ª–æ–≤")
            if results['failed'] > 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {results['failed']} —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results['error']}")
            
        return results
    
    async def start_real_time_integration(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        self.running = True
        
        try:
            await self.bridge.start_real_time_bridge(self.collector)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ real-time —Ä–µ–∂–∏–º–µ: {e}")
        finally:
            self.running = False
            await self.cleanup()
    
    async def run_periodic_collection(self, interval_minutes: int = 15):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
        self.running = True
        
        try:
            while self.running:
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä...")
                
                try:
                    results = await self.collect_and_send_batch(limit=50)
                    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞: {results}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Å–±–æ—Ä–µ: {e}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                logger.info(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞...")
                await asyncio.sleep(interval_minutes * 60)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞")
        finally:
            self.running = False
            await self.cleanup()
    
    async def get_integration_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        status = {
            "timestamp": datetime.utcnow().isoformat(),
            "running": self.running,
            "telethon_available": TELETHON_AVAILABLE,
            "collector_initialized": self.collector.client is not None,
            "backend_url": self.backend_url
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
        try:
            async with self.bridge.integration as api:
                backend_available = await api.test_connection()
                status["backend_available"] = backend_available
        except:
            status["backend_available"] = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        if self.collector.collected_signals:
            status["collector_stats"] = self.collector.get_statistics()
        
        return status
    
    async def test_full_integration(self) -> Dict:
        """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        test_results = {
            "timestamp": datetime.utcnow().isoformat(),
            "tests": {}
        }
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        try:
            init_success = await self.initialize()
            test_results["tests"]["initialization"] = {
                "success": init_success,
                "message": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" if init_success else "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            }
        except Exception as e:
            test_results["tests"]["initialization"] = {
                "success": False,
                "error": str(e)
            }
        
        if not test_results["tests"]["initialization"]["success"]:
            return test_results
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        try:
            channels_info = await self.collector.get_channel_info()
            accessible_channels = sum(1 for c in channels_info.values() if c.get('accessible', False))
            test_results["tests"]["channels"] = {
                "success": accessible_channels > 0,
                "accessible_channels": accessible_channels,
                "total_channels": len(channels_info),
                "details": channels_info
            }
        except Exception as e:
            test_results["tests"]["channels"] = {
                "success": False,
                "error": str(e)
            }
        
        # –¢–µ—Å—Ç 3: –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            signals = await self.collector.collect_recent_messages(limit=20)
            test_results["tests"]["signal_collection"] = {
                "success": len(signals) >= 0,  # –£—Å–ø–µ—Ö –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç
                "signals_found": len(signals),
                "sample_signal": signals[0] if signals else None
            }
        except Exception as e:
            test_results["tests"]["signal_collection"] = {
                "success": False,
                "error": str(e)
            }
        
        # –¢–µ—Å—Ç 4: Backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        try:
            async with self.bridge.integration as api:
                backend_available = await api.test_connection()
                test_results["tests"]["backend_integration"] = {
                    "success": backend_available,
                    "message": "Backend –¥–æ—Å—Ç—É–ø–µ–Ω" if backend_available else "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }
        except Exception as e:
            test_results["tests"]["backend_integration"] = {
                "success": False,
                "error": str(e)
            }
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_tests_passed = all(test.get("success", False) for test in test_results["tests"].values())
        test_results["overall_success"] = all_tests_passed
        
        logger.info(f"üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—Ö: {all_tests_passed}")
        return test_results
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.collector:
            await self.collector.disconnect()
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
async def run_batch_mode(limit: int = 100):
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞"""
    integration = FullTelegramIntegration()
    
    if await integration.initialize():
        results = await integration.collect_and_send_batch(limit=limit)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(results, indent=2, ensure_ascii=False)}")
    
    await integration.cleanup()

async def run_real_time_mode():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    integration = FullTelegramIntegration()
    
    if await integration.initialize():
        await integration.start_real_time_integration()
    
    await integration.cleanup()

async def run_periodic_mode(interval: int = 15):
    """–ó–∞–ø—É—Å–∫ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
    integration = FullTelegramIntegration()
    
    if await integration.initialize():
        await integration.run_periodic_collection(interval_minutes=interval)
    
    await integration.cleanup()

async def run_test_mode():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    integration = FullTelegramIntegration()
    
    results = await integration.test_full_integration()
    print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(json.dumps(results, indent=2, ensure_ascii=False))
    
    await integration.cleanup()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Telegram Integration with Backend")
    parser.add_argument("--mode", choices=["batch", "realtime", "periodic", "test"], 
                       default="test", help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
    parser.add_argument("--limit", type=int, default=100, 
                       help="–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    parser.add_argument("--interval", type=int, default=15,
                       help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    
    args = parser.parse_args()
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ: {args.mode}")
    
    if args.mode == "batch":
        await run_batch_mode(limit=args.limit)
    elif args.mode == "realtime":
        await run_real_time_mode()
    elif args.mode == "periodic":
        await run_periodic_mode(interval=args.interval)
    elif args.mode == "test":
        await run_test_mode()

if __name__ == "__main__":
    if not TELETHON_AVAILABLE:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
        sys.exit(1)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 