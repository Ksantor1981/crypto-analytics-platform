"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ analyst_crypto
"""
import asyncio
import os
import re
import logging
import sys
from pathlib import Path
from datetime import datetime, timezone
from typing import List, Dict, Optional

try:
    from telethon import TelegramClient, events
    from telethon.tl.types import MessageMediaPhoto
    TELETHON_AVAILABLE = True
except ImportError:
    TELETHON_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent.parent))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from workers.real_data_config import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_BOT_TOKEN
except ImportError:
    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    TELEGRAM_API_ID = 21073808
    TELEGRAM_API_HASH = "2e3adb8940912dd295fe20c1d2ce5368"
    TELEGRAM_BOT_TOKEN = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RealTelegramCollector:
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, use_real_config=True):
        self.use_real_config = use_real_config
        
        if not TELETHON_AVAILABLE:
            logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
            return
            
        if use_real_config:
            self.api_id = TELEGRAM_API_ID
            self.api_hash = TELEGRAM_API_HASH
            self.session_name = "real_collector"
        else:
            # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.api_id = None
            self.api_hash = None
            self.session_name = "test_collector"
            
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.channels = [
            "binancekillers",
            "io_altsignals", 
            "CryptoCapoTG",
            "WhaleChart",
            "Crypto_Inner_Circler",
            "learn2trade",
            "Wolf_of_Trading_singals",
            "cryptosignals",
            "binancesignals",
            "cryptotradingview",
            "cryptowhales",
            "bitcoinsignals"
        ]
        
        self.client = None
        self.collected_signals = []
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        if not TELETHON_AVAILABLE:
            logger.error("‚ùå Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        if not self.api_id or not self.api_hash:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API_ID –∏ API_HASH")
            return False
            
        try:
            self.client = TelegramClient(
                self.session_name,
                self.api_id,
                self.api_hash
            )
            
            await self.client.start()
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def extract_signal_data(self, message_text: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message_text:
            return None
            
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        patterns = {
            'coin': r'(?:SIGNAL|COIN|PAIR)[\s:]*([A-Z]{2,10}(?:USDT?|BTC|ETH)?)',
            'entry': r'(?:ENTRY|BUY)[\s:]*([0-9.,]+)',
            'target': r'(?:TARGET|TP|TAKE PROFIT)[\s:]*([0-9.,]+)',
            'stop_loss': r'(?:STOP LOSS|SL|STOPLOSS)[\s:]*([0-9.,]+)',
            'leverage': r'(?:LEVERAGE|LEV)[\s:]*([0-9x]+)',
            'direction': r'(LONG|SHORT|BUY|SELL)'
        }
        
        signal_data = {}
        
        for key, pattern in patterns.items():
            match = re.search(pattern, message_text.upper())
            if match:
                signal_data[key] = match.group(1)
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ - —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        if 'coin' in signal_data:
            signal_data['original_text'] = message_text
            signal_data['timestamp'] = datetime.now(timezone.utc).isoformat()
            signal_data['confidence'] = self.calculate_confidence(signal_data)
            return signal_data
            
        return None
    
    def calculate_confidence(self, signal_data: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–∞"""
        confidence = 0.0
        
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –º–æ–Ω–µ—Ç—ã
        if 'coin' in signal_data:
            confidence += 0.3
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if 'entry' in signal_data:
            confidence += 0.2
        if 'target' in signal_data:
            confidence += 0.2
        if 'stop_loss' in signal_data:
            confidence += 0.2
        if 'direction' in signal_data:
            confidence += 0.1
            
        return min(confidence, 1.0)
    
    async def collect_recent_messages(self, limit: int = 100) -> List[Dict]:
        """–°–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.client:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
            
        all_signals = []
        
        for channel in self.channels:
            try:
                logger.info(f"üì° –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                async for message in self.client.iter_messages(channel, limit=limit):
                    if message.text:
                        signal_data = self.extract_signal_data(message.text)
                        if signal_data:
                            signal_data['channel'] = channel
                            signal_data['message_id'] = message.id
                            signal_data['message_date'] = message.date.isoformat()
                            all_signals.append(signal_data)
                            
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–Ω–∞–ª {channel}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
                continue
                
        logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
        self.collected_signals = all_signals
        return all_signals
    
    async def start_real_time_monitoring(self, callback=None):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.client:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        @self.client.on(events.NewMessage(chats=self.channels))
        async def handler(event):
            try:
                if event.text:
                    signal_data = self.extract_signal_data(event.text)
                    if signal_data:
                        signal_data['channel'] = event.chat.username or str(event.chat_id)
                        signal_data['message_id'] = event.id
                        signal_data['message_date'] = event.date.isoformat()
                        
                        logger.info(f"üö® –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data['coin']} –æ—Ç {signal_data['channel']}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
                        self.collected_signals.append(signal_data)
                        
                        # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                        if callback:
                            await callback(signal_data)
                            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        await self.client.run_until_disconnected()
    
    async def get_channel_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"""
        if not self.client:
            return {}
            
        channels_info = {}
        
        for channel in self.channels:
            try:
                entity = await self.client.get_entity(channel)
                channels_info[channel] = {
                    'title': entity.title,
                    'username': entity.username,
                    'participants_count': getattr(entity, 'participants_count', 'N/A'),
                    'accessible': True
                }
            except Exception as e:
                channels_info[channel] = {
                    'error': str(e),
                    'accessible': False
                }
                
        return channels_info
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram"""
        if self.client:
            await self.client.disconnect()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Telegram")
    
    def get_collected_signals(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return self.collected_signals
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∞"""
        if not self.collected_signals:
            return {"total_signals": 0}
            
        stats = {
            "total_signals": len(self.collected_signals),
            "channels_count": len(set(s.get('channel', '') for s in self.collected_signals)),
            "avg_confidence": sum(s.get('confidence', 0) for s in self.collected_signals) / len(self.collected_signals),
            "coins_found": list(set(s.get('coin', '') for s in self.collected_signals if s.get('coin')))
        }
        
        return stats

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_telegram_collector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    collector = RealTelegramCollector(use_real_config=True)
    
    if not await collector.initialize():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
        return
    
    try:
        # –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        signals = await collector.collect_recent_messages(limit=50)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        
        if signals:
            logger.info(f"   –ü—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞: {signals[0]}")
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = collector.get_statistics()
        logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö
        channels_info = await collector.get_channel_info()
        logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {sum(1 for c in channels_info.values() if c.get('accessible'))}")
        
    finally:
        await collector.disconnect()

if __name__ == "__main__":
    if TELETHON_AVAILABLE:
        asyncio.run(test_telegram_collector())
    else:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon") 