"""
–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""
import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from telethon import TelegramClient, events
from telethon.tl.types import Channel, Message
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from signal_patterns import SignalPatterns

logger = logging.getLogger(__name__)

class AuthorizedTelegramScraper:
    """
    –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
    """
    
    def __init__(self, api_id: int, api_hash: str, phone: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_id: Telegram API ID
            api_hash: Telegram API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)
        """
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.client = None
        self.patterns = SignalPatterns()
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = TelegramClient('crypto_scraper_session', self.api_id, self.api_hash)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.start(phone=self.phone)
            
            if await self.client.is_user_authorized():
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.disconnect()
            logger.info("–ö–ª–∏–µ–Ω—Ç Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def get_channel_messages(self, channel_username: str, limit: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_username: –ò–º—è –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not self.client:
            logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await self.client.get_entity(channel_username)
            
            if not isinstance(channel, Channel):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª: {channel_username}")
                return []
            
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {channel.title} ({channel_username})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = []
            async for message in self.client.iter_messages(channel, limit=limit):
                if message.text:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg_data = {
                        'id': message.id,
                        'date': message.date,
                        'text': message.text,
                        'channel_username': channel_username,
                        'channel_title': channel.title
                    }
                    messages.append(msg_data)
            
            logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username}")
            return messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_username}: {e}")
            return []
    
    async def get_recent_signals(self, channel_username: str, hours_back: int = 24) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_username: –ò–º—è –∫–∞–Ω–∞–ª–∞
            hours_back: –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏—Å–∫–∞—Ç—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.get_channel_messages(channel_username, limit=200)
            
            if not messages:
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_time = datetime.now() - timedelta(hours=hours_back)
            recent_messages = [
                msg for msg in messages 
                if msg['date'] > cutoff_time
            ]
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(recent_messages)} –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            all_signals = []
            for msg in recent_messages:
                signals = self.patterns.extract_signals_from_text(
                    msg['text'],
                    channel_username,
                    str(msg['id'])
                )
                all_signals.extend(signals)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            for signal in all_signals:
                signal['channel_title'] = next(
                    (msg['channel_title'] for msg in recent_messages 
                     if msg['id'] == int(signal['message_id'])), 
                    'Unknown'
                )
                signal['message_date'] = next(
                    (msg['date'].isoformat() for msg in recent_messages 
                     if msg['id'] == int(signal['message_id'])), 
                    None
                )
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            return all_signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    async def get_last_signal(self, channel_username: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_username: –ò–º—è –∫–∞–Ω–∞–ª–∞
            
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            signals = await self.get_recent_signals(channel_username, hours_back=168)  # 7 –¥–Ω–µ–π
            
            if not signals:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            latest_signal = max(signals, key=lambda x: x.get('message_date', ''))
            
            return latest_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

async def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    from real_data_config import TELEGRAM_API_ID, TELEGRAM_API_HASH
    
    scraper = AuthorizedTelegramScraper(TELEGRAM_API_ID, TELEGRAM_API_HASH)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if await scraper.start():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
            last_signal = await scraper.get_last_signal("signalsbitcoinandethereum")
            
            if last_signal:
                print("üéØ –ü–û–°–õ–ï–î–ù–ò–ô –°–ò–ì–ù–ê–õ:")
                print(f"–ö–∞–Ω–∞–ª: {last_signal['channel_title']}")
                print(f"–ü–∞—Ä–∞: {last_signal['trading_pair']}")
                print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {last_signal['direction']}")
                print(f"Entry: {last_signal['entry_price']}")
                print(f"Target: {last_signal['target_price']}")
                print(f"Stop: {last_signal['stop_loss']}")
                print(f"–î–∞—Ç–∞: {last_signal['message_date']}")
                print(f"Confidence: {last_signal['confidence']}")
            else:
                print("‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            recent_signals = await scraper.get_recent_signals("signalsbitcoinandethereum", hours_back=24)
            print(f"\nüìä –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {len(recent_signals)}")
            
            for i, signal in enumerate(recent_signals[:5]):
                print(f"{i+1}. {signal['trading_pair']} {signal['direction']} Entry:{signal['entry_price']}")
    
    finally:
        await scraper.stop()

if __name__ == "__main__":
    asyncio.run(main())
