"""
Celery tasks –¥–ª—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram Collector
"""

import asyncio
import logging
from celery import Celery
from sqlalchemy.orm import Session

# –ò–º–ø–æ—Ä—Ç—ã —Å fallback
try:
    from backend.app.core.database import SessionLocal
    from .telegram_collector_migrated import MigratedTelegramCollector
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å backend –º–æ–¥—É–ª–∏: {e}")
    SessionLocal = None
    MigratedTelegramCollector = None

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Celery app
celery_app = Celery('telegram_workers')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    broker_url='redis://localhost:6379/0',
    result_backend='redis://localhost:6379/0',
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
)

@celery_app.task
def start_telegram_collector():
    """
    –ó–∞–ø—É—Å–∫ Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –∫–∞–∫ Celery task
    """
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î (—Å fallback)
        if SessionLocal:
            db = SessionLocal()
        else:
            logger.warning("‚ö†Ô∏è SessionLocal –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º None")
            db = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (—Å fallback)
            if MigratedTelegramCollector:
                collector = MigratedTelegramCollector(db)
            else:
                logger.error("‚ùå MigratedTelegramCollector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {"status": "error", "message": "MigratedTelegramCollector not available"}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                loop.run_until_complete(collector.start_collection())
            finally:
                loop.close()
                
        finally:
            db.close()
            
        logger.info("‚úÖ Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        return {"status": "success", "message": "Telegram collector started successfully"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: {e}")
        return {"status": "error", "message": str(e)}

@celery_app.task
def process_telegram_message(message_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data.get('message_id')}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î (—Å fallback)
        if SessionLocal:
            db = SessionLocal()
        else:
            logger.warning("‚ö†Ô∏è SessionLocal –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º None")
            db = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (—Å fallback)
            if MigratedTelegramCollector:
                collector = MigratedTelegramCollector(db)
            else:
                logger.error("‚ùå MigratedTelegramCollector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {"status": "error", "message": "MigratedTelegramCollector not available"}
            
            # –°–æ–∑–¥–∞–µ–º mock message object
            class MockMessage:
                def __init__(self, data):
                    self.text = data.get('text')
                    self.id = data.get('message_id')
                    self.date = data.get('date')
                    self.media = data.get('media')
            
            message = MockMessage(message_data)
            channel_username = message_data.get('channel_username')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(
                    collector.process_message(message, channel_username)
                )
                
                if result:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {result}")
                    return {"status": "success", "signal": result}
                else:
                    logger.info("‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
                    return {"status": "no_signal", "message": "No signals found"}
                    
            finally:
                loop.close()
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {"status": "error", "message": str(e)}

@celery_app.task
def test_telegram_connection():
    """
    –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
    """
    try:
        import os
        from telethon import TelegramClient
        
        api_id = os.getenv('TELEGRAM_API_ID')
        api_hash = os.getenv('TELEGRAM_API_HASH')
        
        if not api_id or not api_hash:
            return {"status": "error", "message": "TELEGRAM_API_ID and TELEGRAM_API_HASH not set"}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client = TelegramClient('test_session', api_id, api_hash)
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            loop.run_until_complete(client.connect())
            
            if client.is_connected():
                loop.run_until_complete(client.disconnect())
                return {"status": "success", "message": "Telegram connection successful"}
            else:
                return {"status": "error", "message": "Failed to connect to Telegram"}
                
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return {"status": "error", "message": str(e)}

@celery_app.task
def get_telegram_channels_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤
    """
    try:
        from .telegram_collector_migrated import CHANNELS
        
        return {
            "status": "success",
            "channels": CHANNELS,
            "total_channels": len(CHANNELS),
            "monitoring_enabled": True
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return {"status": "error", "message": str(e)}

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:
# celery -A workers.telegram.telegram_tasks worker --loglevel=info
# celery -A workers.telegram.telegram_tasks start_telegram_collector.delay()
