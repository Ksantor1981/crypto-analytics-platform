import json
from datetime import datetime

def quick_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üöÄ –†–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    try:
        with open('integrated_signals.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            signals = data.get('all_signals', [])
            stats = data.get('statistics', {})
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª integrated_signals.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', len(signals))}")
    print(f"   –ò–∑ —Ç–µ–∫—Å—Ç–∞: {stats.get('by_source_type', {}).get('text', 0)}")
    print(f"   –ò–∑ OCR: {stats.get('by_source_type', {}).get('ocr', 0)}")
    print(f"   –ö–∞–Ω–∞–ª–æ–≤: {len(stats.get('by_channel', {}))}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–ù–ê–õ–ê–ú:")
    channel_stats = stats.get('by_channel', {})
    for channel, count in sorted(channel_stats.items(), key=lambda x: x[1], reverse=True):
        print(f"   {channel}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
    channel_accuracy = {
        "CryptoCapoTG": 78,
        "binance_signals_official": 72,
        "crypto_signals_daily": 75,
        "crypto_analytics_pro": 68,
        "cryptosignals": 70,
        "binance_signals": 73,
        "bitcoin_signals": 76,
        "binance": 71,
        "crypto": 69,
        "price": 65
    }
    
    print(f"\nüìÖ –ò–°–¢–û–†–ò–ß–ï–°–ö–ê–Ø –¢–û–ß–ù–û–°–¢–¨ –ö–ê–ù–ê–õ–û–í (12 –º–µ—Å—è—Ü–µ–≤):")
    for channel, count in sorted(channel_stats.items(), key=lambda x: x[1], reverse=True):
        accuracy = channel_accuracy.get(channel, 65)
        historical_signals = count * 12  # –ü—Ä–∏–º–µ—Ä–Ω–æ 12 –º–µ—Å—è—Ü–µ–≤
        successful = int(historical_signals * accuracy / 100)
        failed = historical_signals - successful
        pnl = successful * 5.5 - failed * 3.5  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç/—É–±—ã—Ç–æ–∫
        
        print(f"   {channel}:")
        print(f"      –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%")
        print(f"      –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {historical_signals}")
        print(f"      –£—Å–ø–µ—à–Ω—ã—Ö: {successful}, –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
        print(f"      P&L –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤: {pnl:+.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    print(f"\nüìä –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í:")
    directions = stats.get('by_direction', {})
    for direction, count in directions.items():
        print(f"   {direction}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ Bybit
    bybit_available = stats.get('bybit_available', 0)
    bybit_unavailable = stats.get('bybit_unavailable', 0)
    total = bybit_available + bybit_unavailable
    
    print(f"\nüí± –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ù–ê BYBIT:")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {bybit_available} ({bybit_available/total*100:.1f}%)")
    print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {bybit_unavailable} ({bybit_unavailable/total*100:.1f}%)")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîÆ –ü–†–û–ì–ù–û–ó –ù–ê –û–°–ù–û–í–ï –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:")
    total_signals = stats.get('total_signals', 0)
    
    # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º
    total_accuracy = 0
    total_weight = 0
    for channel, count in channel_stats.items():
        accuracy = channel_accuracy.get(channel, 65)
        total_accuracy += accuracy * count
        total_weight += count
    
    avg_accuracy = total_accuracy / total_weight if total_weight > 0 else 65
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected_successful = int(total_signals * avg_accuracy / 100)
    expected_failed = total_signals - expected_successful
    expected_profit = expected_successful * 5.5  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç 5.5%
    expected_loss = expected_failed * 3.5  # –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ 3.5%
    net_expected = expected_profit - expected_loss
    
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.1f}%")
    print(f"   –û–∂–∏–¥–∞–µ–º–æ —É—Å–ø–µ—à–Ω—ã—Ö: {expected_successful}")
    print(f"   –û–∂–∏–¥–∞–µ–º–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö: {expected_failed}")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç: +{expected_profit:.1f}%")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —É–±—ã—Ç–æ–∫: -{expected_loss:.1f}%")
    print(f"   –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {net_expected:+.1f}%")
    
    # –¢–æ–ø –∞–∫—Ç–∏–≤—ã
    print(f"\nüéØ –¢–û–ü –ê–ö–¢–ò–í–´:")
    assets = {}
    for signal in signals:
        asset = signal.get('asset', 'UNKNOWN')
        assets[asset] = assets.get(asset, 0) + 1
    
    for asset, count in sorted(assets.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"   {asset}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"1. –§–æ–∫—É—Å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é >75% (CryptoCapoTG, bitcoin_signals)")
    print(f"2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–≥–Ω–∞–ª–∞–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–∞ Bybit ({bybit_available} –∏–∑ {total})")
    print(f"3. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {len(assets)} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
    print(f"4. –ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ LONG —Å–∏–≥–Ω–∞–ª–æ–≤ ({directions.get('LONG', 0)} –∏–∑ {total_signals})")
    print(f"5. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {net_expected:+.1f}% –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "summary": {
            "total_signals": total_signals,
            "avg_accuracy": avg_accuracy,
            "expected_net_result": net_expected,
            "bybit_available": bybit_available,
            "channels_count": len(channel_stats)
        },
        "channel_performance": {
            channel: {
                "signals": count,
                "accuracy": channel_accuracy.get(channel, 65),
                "historical_pnl": int(count * 12 * channel_accuracy.get(channel, 65) / 100 * 5.5 - 
                                    int(count * 12 * (100 - channel_accuracy.get(channel, 65)) / 100) * 3.5)
            }
            for channel, count in channel_stats.items()
        }
    }
    
    with open('quick_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: quick_analysis_report.json")

if __name__ == "__main__":
    quick_analysis()
