#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å Telegram –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
from bs4 import BeautifulSoup
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

async def check_telegram_web(channel_username: str) -> List[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ t.me"""
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = channel_username.replace('@', '')
    
    # URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞
    url = f"https://t.me/s/{username}"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    html = await response.text()
                    return parse_telegram_messages(html, channel_username)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –¥–ª—è {channel_username}")
                    return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {channel_username}: {e}")
        return []

def parse_telegram_messages(html: str, channel_username: str) -> List[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ HTML"""
    
    soup = BeautifulSoup(html, 'html.parser')
    messages = []
    
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    message_elements = soup.find_all('div', class_='tgme_widget_message')
    
    for msg in message_elements[:5]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_elem = msg.find('div', class_='tgme_widget_message_text')
            if text_elem:
                text = text_elem.get_text(strip=True)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                time_elem = msg.find('time')
                timestamp = None
                if time_elem and time_elem.get('datetime'):
                    timestamp = time_elem.get('datetime')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                date_elem = msg.find('a', class_='tgme_widget_message_date')
                date_str = None
                if date_elem:
                    date_str = date_elem.get_text(strip=True)
                
                if text and len(text) > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages.append({
                        'channel': channel_username,
                        'text': text,
                        'timestamp': timestamp,
                        'date_str': date_str,
                        'length': len(text)
                    })
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            continue
    
    return messages

def check_for_trading_signals(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_patterns = [
        r'\b(BTC|ETH|SOL|DOGE|ADA|XRP|BNB|MATIC|LINK|UNI)\b',
        r'\b(LONG|SHORT|BUY|SELL)\b',
        r'\b(Entry|Target|TP|SL|Stop Loss)\b',
        r'\$[\d,]+',
        r'\b\d+\.?\d*\b',
        r'üöÄ|üìà|üìâ|üéØ|üõë'
    ]
    
    text_upper = text.upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    matches = 0
    for pattern in signal_patterns:
        if re.search(pattern, text_upper):
            matches += 1
    
    return matches >= 2

async def check_multiple_channels():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    channels = [
        "binancekillers",
        "CryptoCapoTG", 
        "io_altsignals",
        "Wolf_of_Trading_singals",
        "fatpigsignals",
        "Signals_BTC_ETH"
    ]
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í –° TELEGRAM –ö–ê–ù–ê–õ–û–í")
    print("="*80)
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}")
    print("="*80)
    
    all_messages = []
    
    for channel in channels:
        print(f"\nüì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: @{channel}")
        messages = await check_telegram_web(channel)
        
        if messages:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            signal_messages = []
            for msg in messages:
                if check_for_trading_signals(msg['text']):
                    signal_messages.append(msg)
            
            if signal_messages:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signal_messages)}")
                all_messages.extend(signal_messages)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
                latest = signal_messages[0]
                print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª:")
                print(f"   –í—Ä–µ–º—è: {latest.get('date_str', 'N/A')}")
                print(f"   –¢–µ–∫—Å—Ç: {latest['text'][:100]}...")
            else:
                print("‚ùå –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*80}")
    
    if all_messages:
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_messages)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        for i, msg in enumerate(all_messages, 1):
            print(f"\nüîç –°–ò–ì–ù–ê–õ #{i}")
            print(f"üì∫ –ö–∞–Ω–∞–ª: @{msg['channel']}")
            print(f"‚è∞ –í—Ä–µ–º—è: {msg.get('date_str', 'N/A')}")
            print(f"üìù –¢–µ–∫—Å—Ç: {msg['text']}")
            print(f"üìè –î–ª–∏–Ω–∞: {msg['length']} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("‚ùå –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ö–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ")
        print("   - –ù–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   - –°–∏–≥–Ω–∞–ª—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        print("   - –ö–∞–Ω–∞–ª—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")

def check_alternative_sources():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    print(f"\n{'='*80}")
    print(f"üîç –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –°–ü–û–°–û–ë–´ –ü–†–û–í–ï–†–ö–ò")
    print(f"{'='*80}")
    
    print("1. üì± Telegram Web (t.me/s/):")
    print("   - –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: https://t.me/s/binancekillers")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    print("\n2. üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:")
    print("   - Google: 'binancekillers telegram signals'")
    print("   - Twitter/X: –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º")
    
    print("\n3. üìä –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏:")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã BTC, ETH")
    print("   - –°—Ä–∞–≤–Ω–∏—Ç—å —Å —Ü–µ–Ω–∞–º–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö")
    
    print("\n4. ü§ñ Telegram API (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø):")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telethon –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    print("   - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–æ–≤!")
    print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    await check_multiple_channels()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
    check_alternative_sources()
    
    print(f"\n{'='*80}")
    print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print(f"{'='*80}")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é –≤ Telegram")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤")
    print("3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram API")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –Ω–∞ –±–∏—Ä–∂–∞—Ö")

if __name__ == "__main__":
    asyncio.run(main())
