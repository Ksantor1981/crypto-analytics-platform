"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞
"""
import asyncio
import logging
import json
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_web_scraping():
    """–¢–µ—Å—Ç web —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
    try:
        from telegram.telegram_scraper import TelegramSignalScraper
        
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º Web Scraping...")
        
        scraper = TelegramSignalScraper()
        
        # –¢–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        channel = "signalsbitcoinandethereum"
        logger.info(f"–°–∫—Ä–∞–ø–∏–º –∫–∞–Ω–∞–ª: {channel}")
        
        messages = await scraper.scrape_channel_messages(channel, months_back=1)
        logger.info(f"–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = await scraper.extract_signals_from_messages(messages)
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–≥–Ω–∞–ª–∞
        for i, signal in enumerate(signals[:3]):
            logger.info(f"–°–∏–≥–Ω–∞–ª {i+1}: {signal}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"test_web_scraping_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump({
                'channel': channel,
                'messages_count': len(messages),
                'signals_count': len(signals),
                'signals': signals
            }, f, ensure_ascii=False, indent=2, default=str)
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
        return len(signals) > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ web —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        return False

async def test_signal_patterns():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        from signal_patterns import SignalPatterns
        
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
        
        patterns = SignalPatterns()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        test_texts = [
            "BTC/USDT LONG 45000 TP: 47000 SL: 44000",
            "ETHUSDT short 3200 target 3000 stop 3300",
            "üöÄ BTC 45000 üìà 47000 üìâ 44000",
            "Bitcoin Long Entry: $45,000 Target: $47,000 Stop: $44,000",
            "–í—Ö–æ–¥ BTC –ª–æ–Ω–≥ 45000 —Ü–µ–ª—å 47000 —Å—Ç–æ–ø 44000"
        ]
        
        total_signals = 0
        
        for i, text in enumerate(test_texts):
            logger.info(f"–¢–µ—Å—Ç {i+1}: {text}")
            
            signals = patterns.extract_signals_from_text(
                text, 
                "test_channel", 
                f"test_message_{i}"
            )
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            for signal in signals:
                logger.info(f"  - {signal}")
            
            total_signals += len(signals)
        
        logger.info(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
        
        return total_signals > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∞–ø–µ—Ä–∞...")
    
    # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    logger.info("=" * 50)
    logger.info("–¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
    logger.info("=" * 50)
    
    pattern_success = await test_signal_patterns()
    
    # –¢–µ—Å—Ç 2: Web —Å–∫—Ä–∞–ø–∏–Ω–≥
    logger.info("=" * 50)
    logger.info("–¢–ï–°–¢ 2: Web —Å–∫—Ä–∞–ø–∏–Ω–≥")
    logger.info("=" * 50)
    
    web_success = await test_web_scraping()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("=" * 50)
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 50)
    
    logger.info(f"–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {'‚úÖ –£–°–ü–ï–®–ù–û' if pattern_success else '‚ùå –û–®–ò–ë–ö–ê'}")
    logger.info(f"Web —Å–∫—Ä–∞–ø–∏–Ω–≥: {'‚úÖ –£–°–ü–ï–®–ù–û' if web_success else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if pattern_success and web_success:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        logger.info("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")

if __name__ == "__main__":
    asyncio.run(main())
