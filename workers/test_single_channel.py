import urllib.request
import json
import re
from datetime import datetime

def test_single_channel():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    opener = urllib.request.build_opener()
    opener.addheaders = [
        ('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª
    username = 'CryptoCapoTG'
    url = f"https://t.me/s/{username}"
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª: {username}")
    print(f"üì° URL: {url}")
    
    try:
        print("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        with opener.open(url, timeout=10) as response:
            content = response.read().decode('utf-8')
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open('test_channel_raw.html', 'w', encoding='utf-8') as f:
                f.write(content)
            print("üìÅ –°—ã—Ä–æ–π HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_channel_raw.html")
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message_pattern = r'<div class="tgme_widget_message_text[^"]*"[^>]*>(.*?)</div>'
            messages = re.findall(message_pattern, content, re.DOTALL)
            
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            processed_messages = []
            for i, msg_html in enumerate(messages[:5]):
                # –û—á–∏—â–∞–µ–º HTML
                text = re.sub(r'<[^>]+>', '', msg_html)
                text = re.sub(r'&nbsp;', ' ', text)
                text = text.strip()
                
                if text and len(text) > 10:
                    processed_messages.append({
                        'id': i,
                        'text': text[:200] + "..." if len(text) > 200 else text
                    })
            
            # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            signals = []
            for msg in processed_messages:
                # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
                patterns = [
                    r'(\w+)\s+(LONG|SHORT)\s+\$?([\d,]+\.?\d*)',
                    r'(\w+)\s+(BUY|SELL)\s+\$?([\d,]+\.?\d*)',
                    r'[üöÄüìâüî•]\s*(\w+)\s+(LONG|SHORT|BUY|SELL)',
                ]
                
                for pattern in patterns:
                    matches = re.finditer(pattern, msg['text'], re.IGNORECASE)
                    for match in matches:
                        signal = {
                            'asset': match.group(1).upper(),
                            'direction': match.group(2).upper(),
                            'entry_price': float(match.group(3).replace(',', '')) if len(match.groups()) > 2 and match.group(3).replace(',', '').replace('.', '').isdigit() else None,
                            'original_text': msg['text'],
                            'pattern': pattern
                        }
                        signals.append(signal)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'channel': username,
                'total_messages': len(messages),
                'processed_messages': len(processed_messages),
                'signals_found': len(signals),
                'signals': signals,
                'test_time': datetime.now().isoformat()
            }
            
            with open('test_channel_result.json', 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_messages)}")
            print(f"   –°–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_channel_result.json")
            
            if signals:
                print("\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                for i, signal in enumerate(signals, 1):
                    print(f"   {i}. {signal['asset']} {signal['direction']} ${signal['entry_price'] if signal['entry_price'] else 'N/A'}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    test_single_channel()
