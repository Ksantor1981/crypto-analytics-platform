"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä—â–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
"""
import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class SignalData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    channel_name: str
    signal_date: datetime
    trading_pair: str
    direction: str  # LONG/SHORT
    entry_price: float
    target_price: float
    stop_loss: float
    forecast_rating: float  # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (0-100)
    signal_executed: bool = False
    actual_result: Optional[str] = None  # SUCCESS/FAILURE/PENDING
    profit_loss: Optional[float] = None
    execution_time: Optional[datetime] = None

class AutomatedSignalCollector:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä—â–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –æ—Ü–µ–Ω–∫–æ–π
    """
    
    def __init__(self):
        # –ë–∞–∑–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_channels = self._load_monitored_channels()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∞
        self.collection_stats = {
            'total_signals_collected': 0,
            'signals_analyzed': 0,
            'high_quality_signals': 0,
            'channels_processed': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = {
            'min_forecast_rating': 70.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
            'max_signals_per_channel': 50,
            'collection_interval_minutes': 15,
            'signal_expiry_hours': 48
        }
    
    def _load_monitored_channels(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        channels = [
            {
                'username': 'signalsbitcoinandethereum',
                'name': 'Bitcoin & Ethereum Signals',
                'type': 'signal',
                'quality_score': 75,
                'success_rate': 0.65,
                'is_active': True,
                'priority': 'high'
            },
            {
                'username': 'CryptoCapoTG',
                'name': 'CryptoCapo',
                'type': 'analysis',
                'quality_score': 85,
                'success_rate': 0.75,
                'is_active': True,
                'priority': 'high'
            },
            {
                'username': 'binancesignals',
                'name': 'Binance Trading Signals',
                'type': 'signal',
                'quality_score': 80,
                'success_rate': 0.70,
                'is_active': True,
                'priority': 'high'
            },
            {
                'username': 'cryptosignals',
                'name': 'Crypto Signals Pro',
                'type': 'signal',
                'quality_score': 65,
                'success_rate': 0.60,
                'is_active': True,
                'priority': 'medium'
            }
        ]
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return channels
    
    async def collect_signals_from_channel(self, channel: Dict[str, Any]) -> List[SignalData]:
        """
        –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        """
        logger.info(f"–°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–∞–Ω–∞–ª–∞: {channel['username']}")
        
        signals = []
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —á–µ—Ä–µ–∑ Telegram API
            # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            
            mock_signals = self._simulate_channel_signals(channel)
            
            for mock_signal in mock_signals:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                forecast_rating = self._analyze_signal_quality(mock_signal, channel)
                
                if forecast_rating >= self.settings['min_forecast_rating']:
                    signal_data = SignalData(
                        channel_name=channel['username'],
                        signal_date=mock_signal['timestamp'],
                        trading_pair=mock_signal['trading_pair'],
                        direction=mock_signal['direction'],
                        entry_price=mock_signal['entry_price'],
                        target_price=mock_signal['target_price'],
                        stop_loss=mock_signal['stop_loss'],
                        forecast_rating=forecast_rating
                    )
                    signals.append(signal_data)
            
            logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(signals)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å {channel['username']}")
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å {channel['username']}: {e}")
            return []
    
    def _simulate_channel_signals(self, channel: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–∞–Ω–∞–ª–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API
        
        base_signals = [
            {
                'trading_pair': 'BTC/USDT',
                'direction': 'LONG',
                'entry_price': 45000.0,
                'target_price': 47000.0,
                'stop_loss': 44000.0,
                'timestamp': datetime.now() - timedelta(hours=2),
                'original_text': 'üöÄ BTC LONG Entry: 45000 Target: 47000 SL: 44000'
            },
            {
                'trading_pair': 'ETH/USDT',
                'direction': 'SHORT',
                'entry_price': 3200.0,
                'target_price': 3000.0,
                'stop_loss': 3300.0,
                'timestamp': datetime.now() - timedelta(hours=1),
                'original_text': 'üìâ ETH SHORT Entry: 3200 Target: 3000 SL: 3300'
            },
            {
                'trading_pair': 'SOL/USDT',
                'direction': 'LONG',
                'entry_price': 95.5,
                'target_price': 100.0,
                'stop_loss': 92.0,
                'timestamp': datetime.now() - timedelta(minutes=30),
                'original_text': 'üî• SOL LONG Entry: 95.5 Target: 100 SL: 92'
            }
        ]
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–∞
        if channel['quality_score'] < 70:
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            base_signals = base_signals[:1]
        
        return base_signals
    
    def _analyze_signal_quality(self, signal: Dict[str, Any], channel: Dict[str, Any]) -> float:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏ —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        """
        base_score = channel['quality_score']
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏–≥–Ω–∞–ª–∞
        structure_score = self._analyze_signal_structure(signal)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-—Ä–∏–≤–æ—Ä–¥–∞
        risk_reward_score = self._analyze_risk_reward(signal)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        market_conditions_score = self._analyze_market_conditions(signal)
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        final_score = (
            base_score * 0.4 +  # –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–∞
            structure_score * 0.3 +  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞
            risk_reward_score * 0.2 +  # –†–∏—Å–∫-—Ä–∏–≤–æ—Ä–¥
            market_conditions_score * 0.1  # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        )
        
        return min(100.0, max(0.0, final_score))
    
    def _analyze_signal_structure(self, signal: Dict[str, Any]) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏–≥–Ω–∞–ª–∞"""
        score = 50.0  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['trading_pair', 'direction', 'entry_price', 'target_price', 'stop_loss']
        for field in required_fields:
            if field in signal and signal[field] is not None:
                score += 10.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ü–µ–Ω
        if 'entry_price' in signal and 'target_price' in signal and 'stop_loss' in signal:
            entry = signal['entry_price']
            target = signal['target_price']
            stop = signal['stop_loss']
            
            if signal['direction'] == 'LONG':
                if target > entry and stop < entry:
                    score += 20.0
            elif signal['direction'] == 'SHORT':
                if target < entry and stop > entry:
                    score += 20.0
        
        return min(100.0, score)
    
    def _analyze_risk_reward(self, signal: Dict[str, Any]) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-—Ä–∏–≤–æ—Ä–¥–∞"""
        if 'entry_price' not in signal or 'target_price' not in signal or 'stop_loss' not in signal:
            return 50.0
        
        entry = signal['entry_price']
        target = signal['target_price']
        stop = signal['stop_loss']
        
        if signal['direction'] == 'LONG':
            potential_profit = target - entry
            potential_loss = entry - stop
        else:  # SHORT
            potential_profit = entry - target
            potential_loss = stop - entry
        
        if potential_loss == 0:
            return 50.0
        
        risk_reward_ratio = potential_profit / potential_loss
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫-—Ä–∏–≤–æ—Ä–¥–∞
        if risk_reward_ratio >= 3.0:
            return 100.0
        elif risk_reward_ratio >= 2.0:
            return 80.0
        elif risk_reward_ratio >= 1.5:
            return 60.0
        elif risk_reward_ratio >= 1.0:
            return 40.0
        else:
            return 20.0
    
    def _analyze_market_conditions(self, signal: Dict[str, Any]) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        
        return 70.0
    
    async def track_signal_execution(self, signal: SignalData) -> Dict[str, Any]:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        """
        logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {signal.trading_pair} {signal.direction}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±–∏—Ä–∂–µ–≤—ã–µ API
        # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        execution_result = self._simulate_signal_execution(signal)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        signal.signal_executed = True
        signal.actual_result = execution_result['result']
        signal.profit_loss = execution_result['profit_loss']
        signal.execution_time = datetime.now()
        
        return execution_result
    
    def _simulate_signal_execution(self, signal: SignalData) -> Dict[str, Any]:
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        import random
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        success_probability = signal.forecast_rating / 100.0
        
        if random.random() < success_probability:
            # –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            if signal.direction == 'LONG':
                profit_loss = (signal.target_price - signal.entry_price) / signal.entry_price * 100
            else:
                profit_loss = (signal.entry_price - signal.target_price) / signal.entry_price * 100
            
            return {
                'result': 'SUCCESS',
                'profit_loss': profit_loss,
                'execution_time': datetime.now()
            }
        else:
            # –ù–µ—É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            if signal.direction == 'LONG':
                profit_loss = (signal.stop_loss - signal.entry_price) / signal.entry_price * 100
            else:
                profit_loss = (signal.entry_price - signal.stop_loss) / signal.entry_price * 100
            
            return {
                'result': 'FAILURE',
                'profit_loss': profit_loss,
                'execution_time': datetime.now()
            }
    
    def generate_analytics_report(self, signals: List[SignalData]) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        """
        if not signals:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_signals = len(signals)
        executed_signals = [s for s in signals if s.signal_executed]
        successful_signals = [s for s in executed_signals if s.actual_result == 'SUCCESS']
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        execution_rate = len(executed_signals) / total_signals if total_signals > 0 else 0
        success_rate = len(successful_signals) / len(executed_signals) if executed_signals else 0
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channel_stats = {}
        for signal in signals:
            channel = signal.channel_name
            if channel not in channel_stats:
                channel_stats[channel] = {
                    'total_signals': 0,
                    'executed_signals': 0,
                    'successful_signals': 0,
                    'avg_forecast_rating': 0.0,
                    'avg_profit_loss': 0.0
                }
            
            channel_stats[channel]['total_signals'] += 1
            channel_stats[channel]['avg_forecast_rating'] += signal.forecast_rating
            
            if signal.signal_executed:
                channel_stats[channel]['executed_signals'] += 1
                channel_stats[channel]['avg_profit_loss'] += signal.profit_loss or 0
                
                if signal.actual_result == 'SUCCESS':
                    channel_stats[channel]['successful_signals'] += 1
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        for channel in channel_stats:
            stats = channel_stats[channel]
            stats['avg_forecast_rating'] /= stats['total_signals']
            if stats['executed_signals'] > 0:
                stats['avg_profit_loss'] /= stats['executed_signals']
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º
        pair_stats = {}
        for signal in signals:
            pair = signal.trading_pair
            if pair not in pair_stats:
                pair_stats[pair] = {
                    'total_signals': 0,
                    'successful_signals': 0,
                    'avg_profit_loss': 0.0
                }
            
            pair_stats[pair]['total_signals'] += 1
            if signal.signal_executed and signal.actual_result == 'SUCCESS':
                pair_stats[pair]['successful_signals'] += 1
                pair_stats[pair]['avg_profit_loss'] += signal.profit_loss or 0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        for pair in pair_stats:
            stats = pair_stats[pair]
            if stats['successful_signals'] > 0:
                stats['avg_profit_loss'] /= stats['successful_signals']
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_signals': total_signals,
                'executed_signals': len(executed_signals),
                'successful_signals': len(successful_signals),
                'execution_rate': execution_rate,
                'success_rate': success_rate,
                'avg_forecast_rating': sum(s.forecast_rating for s in signals) / total_signals
            },
            'channel_analytics': channel_stats,
            'pair_analytics': pair_stats,
            'top_performing_channels': sorted(
                channel_stats.items(),
                key=lambda x: x[1]['success_rate'] if x[1]['executed_signals'] > 0 else 0,
                reverse=True
            )[:5],
            'top_performing_pairs': sorted(
                pair_stats.items(),
                key=lambda x: x[1]['success_rate'] if x[1]['total_signals'] > 0 else 0,
                reverse=True
            )[:5]
        }
        
        return report
    
    async def run_full_collection_cycle(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        start_time = datetime.now()
        all_signals = []
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        active_channels = [ch for ch in self.monitored_channels if ch['is_active']]
        
        for channel in active_channels:
            try:
                signals = await self.collect_signals_from_channel(channel)
                all_signals.extend(signals)
                
                self.collection_stats['channels_processed'] += 1
                self.collection_stats['total_signals_collected'] += len(signals)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel['username']}: {e}")
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in all_signals:
            try:
                await self.track_signal_execution(signal)
                self.collection_stats['signals_analyzed'] += 1
                
                if signal.forecast_rating >= 80:
                    self.collection_stats['high_quality_signals'] += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        analytics_report = self.generate_analytics_report(all_signals)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'timestamp': datetime.now().isoformat(),
            'collection_stats': self.collection_stats,
            'signals_data': [
                {
                    'channel_name': signal.channel_name,
                    'signal_date': signal.signal_date.isoformat(),
                    'trading_pair': signal.trading_pair,
                    'direction': signal.direction,
                    'entry_price': signal.entry_price,
                    'target_price': signal.target_price,
                    'stop_loss': signal.stop_loss,
                    'forecast_rating': signal.forecast_rating,
                    'signal_executed': signal.signal_executed,
                    'actual_result': signal.actual_result,
                    'profit_loss': signal.profit_loss,
                    'execution_time': signal.execution_time.isoformat() if signal.execution_time else None
                }
                for signal in all_signals
            ],
            'analytics_report': analytics_report,
            'duration_seconds': (datetime.now() - start_time).total_seconds()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('signal_collection_analytics.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        logger.info(f"‚úÖ –¶–∏–∫–ª —Å–±–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {results['duration_seconds']:.2f} —Å–µ–∫—É–Ω–¥")
        return results

async def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    collector = AutomatedSignalCollector()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("üìã –ö–ê–ù–ê–õ–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
    print("=" * 60)
    
    for channel in collector.monitored_channels:
        print(f"–ö–∞–Ω–∞–ª: {channel['username']}")
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {channel['name']}")
        print(f"  –¢–∏–ø: {channel['type']}")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ: {channel['quality_score']}/100")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {channel['success_rate']:.1%}")
        print(f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {channel['priority']}")
        print("-" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞
    print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –°–ë–û–†–ê:")
    print("=" * 60)
    
    results = await collector.run_full_collection_cycle()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ê:")
    print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {results['collection_stats']['total_signals_collected']}")
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['collection_stats']['signals_analyzed']}")
    print(f"–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {results['collection_stats']['high_quality_signals']}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {results['collection_stats']['channels_processed']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    analytics = results['analytics_report']
    print(f"\nüìà –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
    print(f"–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analytics['summary']['success_rate']:.1%}")
    print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {analytics['summary']['avg_forecast_rating']:.1f}/100")
    
    if analytics['top_performing_channels']:
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –ö–ê–ù–ê–õ–´:")
        for i, (channel, stats) in enumerate(analytics['top_performing_channels'][:3]):
            success_rate = stats['success_rate'] if stats['executed_signals'] > 0 else 0
            print(f"{i+1}. {channel}: {success_rate:.1%} —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")

if __name__ == "__main__":
    asyncio.run(main())
