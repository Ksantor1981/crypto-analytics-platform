"""
–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
"""
import re
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class SignalPatterns:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.pair_patterns = [
            r'\b([A-Z]{2,10})/([A-Z]{2,10})\b',  # BTC/USDT
            r'\b([A-Z]{2,10})([A-Z]{2,10})\b',   # BTCUSDT
            r'\$([A-Z]{2,10})\b',                # $BTC
            r'\b([A-Z]{2,10})\s*([A-Z]{2,10})\b', # BTC USDT
            r'\b(Bitcoin|Ethereum)\b'            # Bitcoin, Ethereum
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        self.direction_patterns = {
            'long': [
                r'\b(long|buy|bullish|moon|pump|üöÄ|üìà|–ª–æ–Ω–≥|–ø–æ–∫—É–ø–∫–∞)\b',
                r'\b(–≤—Ö–æ–¥|–≤—Ö–æ–¥–∏–º|–æ—Ç–∫—Ä—ã–≤–∞–µ–º)\s+(–ª–æ–Ω–≥|long|buy)',
                r'\b(—Ü–µ–ª—å|target|tp)\s*[:=]\s*\d+',
                r'üöÄ',  # –≠–º–æ–¥–∑–∏ —Ä–∞–∫–µ—Ç–∞
                r'üìà',  # –≠–º–æ–¥–∑–∏ –≥—Ä–∞—Ñ–∏–∫ –≤–≤–µ—Ä—Ö
            ],
            'short': [
                r'\b(short|sell|bearish|dump|crash|üìâ|üîª|—à–æ—Ä—Ç|–ø—Ä–æ–¥–∞–∂–∞)\b',
                r'\b(–≤—Ö–æ–¥|–≤—Ö–æ–¥–∏–º|–æ—Ç–∫—Ä—ã–≤–∞–µ–º)\s+(—à–æ—Ä—Ç|short|sell)',
                r'\b(—Å—Ç–æ–ø|stop|sl)\s*[:=]\s*\d+',
                r'üìâ',  # –≠–º–æ–¥–∑–∏ –≥—Ä–∞—Ñ–∏–∫ –≤–Ω–∏–∑
                r'üîª',  # –≠–º–æ–¥–∑–∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
            ]
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω
        self.price_patterns = [
            r'\b(\d+\.?\d*)\s*(?:usdt|usd|\$)?\b',  # 45000 USDT
            r'\b(?:—Ü–µ–Ω–∞|price|entry|–≤—Ö–æ–¥)\s*[:=]\s*(\d+\.?\d*)',
            r'\b(?:—Ü–µ–ª—å|target|tp)\s*[:=]\s*(\d+\.?\d*)',
            r'\b(?:—Å—Ç–æ–ø|stop|sl)\s*[:=]\s*(\d+\.?\d*)',
        ]
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_patterns = [
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            r'(?i)(\w+usdt)\s+(long|short)\s+(\d+\.?\d*)\s+(?:tp|target)\s*[:=]\s*(\d+\.?\d*)\s+(?:sl|stop)\s*[:=]\s*(\d+\.?\d*)',
            r'(?i)(long|short)\s+(\w+usdt)\s+(\d+\.?\d*)\s+(?:tp|target)\s*[:=]\s*(\d+\.?\d*)\s+(?:sl|stop)\s*[:=]\s*(\d+\.?\d*)',
            
            # –†—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            r'(?i)(\w+usdt)\s+(–ª–æ–Ω–≥|—à–æ—Ä—Ç)\s+(\d+\.?\d*)\s+—Ü–µ–ª—å\s*[:=]\s*(\d+\.?\d*)\s+—Å—Ç–æ–ø\s*[:=]\s*(\d+\.?\d*)',
            r'(?i)(–ª–æ–Ω–≥|—à–æ—Ä—Ç)\s+(\w+usdt)\s+(\d+\.?\d*)\s+—Ü–µ–ª—å\s*[:=]\s*(\d+\.?\d*)\s+—Å—Ç–æ–ø\s*[:=]\s*(\d+\.?\d*)',
            
            # –° —ç–º–æ–¥–∑–∏
            r'(?i)(\w+usdt)\s*üöÄ\s*(\d+\.?\d*)\s*üìà\s*(\d+\.?\d*)\s*üìâ\s*(\d+\.?\d*)',
            r'(?i)(\w+usdt)\s*üìâ\s*(\d+\.?\d*)\s*üìà\s*(\d+\.?\d*)\s*üìâ\s*(\d+\.?\d*)',
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            r'(?i)(\w+usdt)\s+(long|short|–ª–æ–Ω–≥|—à–æ—Ä—Ç)\s+(\d+\.?\d*)\s+(\d+\.?\d*)\s+(\d+\.?\d*)',
        ]
    
    def extract_signals_from_text(self, text: str, channel_username: str, message_id: str) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            channel_username: –ò–º—è –∫–∞–Ω–∞–ª–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        signals = []
        
        if not text:
            return signals
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            complex_signals = self._extract_with_complex_patterns(text, channel_username, message_id)
            signals.extend(complex_signals)
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            step_signals = self._extract_with_step_patterns(text, channel_username, message_id)
            signals.extend(step_signals)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            unique_signals = self._remove_duplicate_signals(signals)
            
            return unique_signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def _extract_with_complex_patterns(self, text: str, channel_username: str, message_id: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        signals = []
        
        for pattern in self.signal_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE | re.MULTILINE)
            
            for match in matches:
                try:
                    groups = match.groups()
                    
                    if len(groups) >= 5:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä—É–ø–ø
                        if groups[0].upper().endswith('USDT'):
                            # –§–æ—Ä–º–∞—Ç: PAIR DIRECTION ENTRY TARGET STOP
                            pair = groups[0].upper()
                            direction = self._normalize_direction(groups[1])
                            entry_price = float(groups[2])
                            target_price = float(groups[3])
                            stop_loss = float(groups[4])
                        else:
                            # –§–æ—Ä–º–∞—Ç: DIRECTION PAIR ENTRY TARGET STOP
                            direction = self._normalize_direction(groups[0])
                            pair = groups[1].upper()
                            entry_price = float(groups[2])
                            target_price = float(groups[3])
                            stop_loss = float(groups[4])
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                        if self._validate_signal(pair, direction, entry_price, target_price, stop_loss):
                            signal = {
                                'trading_pair': pair,
                                'direction': direction,
                                'entry_price': entry_price,
                                'target_price': target_price,
                                'stop_loss': stop_loss,
                                'confidence': 0.9,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                                'source': 'complex_pattern',
                                'channel_username': channel_username,
                                'message_id': message_id,
                                'extracted_at': datetime.utcnow()
                            }
                            signals.append(signal)
                            
                except (ValueError, IndexError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
                    continue
        
        return signals
    
    def _extract_with_step_patterns(self, text: str, channel_username: str, message_id: str) -> List[Dict[str, Any]]:
        """–ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        
        try:
            # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            pairs = self._extract_trading_pairs(text)
            if not pairs:
                logger.debug("–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                return signals
            
            # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            direction = self._extract_direction(text)
            if not direction:
                logger.debug("–ù–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                return signals
            
            # –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω
            prices = self._extract_prices(text)
            if len(prices) < 3:
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–Ω: {prices}")
                return signals
            
            logger.debug(f"–ü–∞—Ä–∞: {pairs}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, –¶–µ–Ω—ã: {prices}")
            
            # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            for pair in pairs:
                try:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è entry, target, stop
                    sorted_prices = sorted(prices)
                    
                    if direction == 'LONG':
                        # –î–ª—è LONG: entry < target, stop < entry
                        entry_price = sorted_prices[1]  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–∞–∫ entry
                        target_price = sorted_prices[-1]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞–∫ target
                        stop_loss = sorted_prices[0]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–∫ stop
                    else:  # SHORT
                        # –î–ª—è SHORT: entry > target, stop > entry
                        entry_price = sorted_prices[1]  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–∞–∫ entry
                        target_price = sorted_prices[0]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–∫ target
                        stop_loss = sorted_prices[-1]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞–∫ stop
                    
                    logger.debug(f"–°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª: {pair} {direction} Entry:{entry_price} Target:{target_price} Stop:{stop_loss}")
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    if self._validate_signal(pair, direction, entry_price, target_price, stop_loss):
                        signal = {
                            'trading_pair': pair,
                            'direction': direction,
                            'entry_price': entry_price,
                            'target_price': target_price,
                            'stop_loss': stop_loss,
                            'confidence': 0.7,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                            'source': 'step_pattern',
                            'channel_username': channel_username,
                            'message_id': message_id,
                            'extracted_at': datetime.utcnow()
                        }
                        signals.append(signal)
                        logger.debug(f"–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {signal}")
                    else:
                        logger.debug("–°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—ã {pair}: {e}")
                    continue
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        
        return signals
    
    def _extract_trading_pairs(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        pairs = []
        
        for pattern in self.pair_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
                for match in matches:
                    try:
                    if len(match.groups()) == 2:
                        # –§–æ—Ä–º–∞—Ç: BTC/USDT
                        pair = f"{match.group(1).upper()}/{match.group(2).upper()}"
                        else:
                        # –§–æ—Ä–º–∞—Ç: BTCUSDT
                        pair = match.group(1).upper()
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    if '/' not in pair and pair.endswith('USDT'):
                        base = pair[:-4]
                        pair = f"{base}/USDT"
                    
                    if self._is_valid_trading_pair(pair):
                        pairs.append(pair)
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä—ã: {e}")
                        continue
                
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —è–≤–Ω—ã—Ö –ø–∞—Ä
            if not pairs:
                # –ò—â–µ–º BTC, ETH –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                crypto_pattern = r'\b(BTC|ETH|BNB|ADA|SOL|DOT|MATIC|AVAX|LINK|UNI|SHIB|DOGE|PEPE|FLOKI|BONK|WIF|BOME|MYRO|POPCAT|BOOK)\b'
                crypto_matches = re.finditer(crypto_pattern, text, re.IGNORECASE)
                for match in crypto_matches:
                    crypto = match.group(1).upper()
                    pair = f"{crypto}/USDT"
                    if self._is_valid_trading_pair(pair):
                        pairs.append(pair)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                if 'bitcoin' in text.lower():
                    pairs.append('BTC/USDT')
                if 'ethereum' in text.lower():
                    pairs.append('ETH/USDT')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ETHUSDT
                if 'ethusdt' in text.lower():
                    pairs.append('ETH/USDT')
        
        return list(set(pairs))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    def _extract_direction(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        text_lower = text.lower()
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        long_count = sum(1 for pattern in self.direction_patterns['long'] 
                        for match in re.finditer(pattern, text_lower))
        short_count = sum(1 for pattern in self.direction_patterns['short'] 
                         for match in re.finditer(pattern, text_lower))
        
        if long_count > short_count:
            return 'LONG'
        elif short_count > long_count:
            return 'SHORT'
        
        return None
    
    def _extract_prices(self, text: str) -> List[float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω"""
        prices = []
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏–∑ —á–∏—Å–µ–ª
        text = re.sub(r'(\d+),(\d+)', r'\1\2', text)
            
        for pattern in self.price_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                try:
                    price = float(match.group(1))
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–Ω
                    if 0.000001 <= price <= 1000000:
                        prices.append(price)
                except (ValueError, IndexError):
                    continue
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–∏—Å–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ
        if len(prices) < 3:
            number_pattern = r'\b(\d+\.?\d*)\b'
            number_matches = re.finditer(number_pattern, text)
            for match in number_matches:
                try:
                    price = float(match.group(1))
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                    if 1 <= price <= 1000000:
                        prices.append(price)
                except (ValueError, IndexError):
                    continue
        
        return sorted(list(set(prices)))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    
    def _normalize_direction(self, direction: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        direction_lower = direction.lower()
        
        if any(word in direction_lower for word in ['long', 'buy', 'bullish', 'moon', 'pump', '–ª–æ–Ω–≥', '–ø–æ–∫—É–ø–∫–∞']):
            return 'LONG'
        elif any(word in direction_lower for word in ['short', 'sell', 'bearish', 'dump', 'crash', '—à–æ—Ä—Ç', '–ø—Ä–æ–¥–∞–∂–∞']):
            return 'SHORT'
        
        return 'LONG'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _is_valid_trading_pair(self, pair: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã
        supported_pairs = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'DOT/USDT', 'MATIC/USDT', 'AVAX/USDT', 'LINK/USDT', 'UNI/USDT',
            'SHIB/USDT', 'DOGE/USDT', 'PEPE/USDT', 'FLOKI/USDT', 'BONK/USDT',
            'WIF/USDT', 'BOME/USDT', 'MYRO/USDT', 'POPCAT/USDT', 'BOOK/USDT'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä
        if pair in supported_pairs:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∫—Ä–∏–ø—Ç–æ/USDT
        if re.match(r'^[A-Z]{2,10}/USDT$', pair):
            return True
        
        return False
    
    def _validate_signal(self, pair: str, direction: str, entry_price: float, target_price: float, stop_loss: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã
            if not self._is_valid_trading_pair(pair):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–Ω
            if not (0.000001 <= entry_price <= 1000000):
                return False
            if not (0.000001 <= target_price <= 1000000):
                return False
            if not (0.000001 <= stop_loss <= 1000000):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω
            if direction == 'LONG':
                if target_price <= entry_price:
                    return False
                if stop_loss >= entry_price:
                    return False
            else:  # SHORT
                if target_price >= entry_price:
                    return False
                if stop_loss <= entry_price:
                    return False
        
            return True
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    def _remove_duplicate_signals(self, signals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        unique_signals = []
        seen = set()
        
        for signal in signals:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            key = (
                signal.get('trading_pair', ''),
                signal.get('direction', ''),
                round(signal.get('entry_price', 0), 6),
                round(signal.get('target_price', 0), 6),
                round(signal.get('stop_loss', 0), 6)
            )
            
            if key not in seen:
                seen.add(key)
                unique_signals.append(signal)
        
        return unique_signals
    
    def extract_signal_info(self, text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–≥–Ω–∞–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        signals = self.extract_signals_from_text(text, "test", "test")
        if signals:
            return signals[0]
        return {}

# –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
SIGNAL_PATTERNS = SignalPatterns().signal_patterns

def extract_signal_info(text: str) -> Dict[str, Any]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–≥–Ω–∞–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = SignalPatterns()
    signals = patterns.extract_signals_from_text(text, "test", "test")
    if signals:
        return signals[0]
    return {} 