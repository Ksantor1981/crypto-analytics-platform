#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î
"""
import sqlite3
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'workers'))
from enhanced_price_extractor import EnhancedPriceExtractor

DB_PATH = 'workers/signals.db'

def force_validate_all():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    extractor = EnhancedPriceExtractor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
    cur.execute("SELECT * FROM signals")
    signals = cur.fetchall()
    
    print(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    validated = 0
    invalidated = 0
    
    for signal in signals:
        asset = signal['asset']
        entry_price = signal['entry_price']
        target_price = signal['target_price']
        stop_loss = signal['stop_loss']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω
        is_valid = extractor.validate_prices(asset, entry_price, target_price, stop_loss)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        cur.execute("""
            UPDATE signals 
            SET is_valid = ?, signal_quality = ?
            WHERE id = ?
        """, (1 if is_valid else 0, 'verified' if is_valid else 'poor', signal['id']))
        
        if is_valid:
            validated += 1
        else:
            invalidated += 1
            print(f"‚ùå {asset} @ ${entry_price} -> ${target_price} | {signal['channel']}")
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {validated}")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {invalidated}")

if __name__ == '__main__':
    force_validate_all()
