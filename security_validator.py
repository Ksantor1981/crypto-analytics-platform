#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Crypto Analytics Platform - –ó–∞–¥–∞—á–∞ 0.5.3
"""

import os
import sys
import re
from pathlib import Path
from typing import List, Dict, Tuple
import subprocess

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é")
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
    env_file = Path(__file__).parent / '.env'
    if env_file.exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é")
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

class SecurityValidator:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.passed = []
        self.project_root = Path(__file__).parent
        
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("=" * 80)
        print(f"üîí {title}")
        print("=" * 80)
    
    def print_step(self, step: str):
        """–ü–µ—á–∞—Ç—å —ç—Ç–∞–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print(f"\nüìã {step}")
        print("-" * 60)
    
    def add_error(self, message: str, file: str = None, line: int = None):
        """–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É"""
        error = f"‚ùå {message}"
        if file:
            error += f" (—Ñ–∞–π–ª: {file}"
            if line:
                error += f", —Å—Ç—Ä–æ–∫–∞: {line}"
            error += ")"
        self.errors.append(error)
        print(error)
    
    def add_warning(self, message: str, file: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        warning = f"‚ö†Ô∏è {message}"
        if file:
            warning += f" (—Ñ–∞–π–ª: {file})"
        self.warnings.append(warning)
        print(warning)
    
    def add_success(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        success = f"‚úÖ {message}"
        self.passed.append(success)
        print(success)
    
    def check_hardcoded_secrets(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hardcoded —Å–µ–∫—Ä–µ—Ç—ã"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê HARDCODED SECRETS")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
        secret_patterns = [
            r'password\s*[:=]\s*["\'][^"\']*["\']',
            r'secret.*key\s*[:=]\s*["\'][^"\']*["\']',
            r'token\s*[:=]\s*["\'][^"\']*["\']',
            r'api.*key\s*[:=]\s*["\'][^"\']*["\']',
            r'postgres123',
            r'crypto-analytics-secret-key',
            r'sk_test_',
            r'pk_test_',
            r'whsec_',
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        files_to_check = [
            'docker-compose.yml',
            'docker-compose.fixed.yml', 
            'docker-compose.simple.yml',
            'helm/values.yaml',
            'infrastructure/helm/crypto-analytics/values.yaml'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        for py_file in self.project_root.rglob('*.py'):
            if 'venv' not in str(py_file) and '__pycache__' not in str(py_file):
                files_to_check.append(str(py_file.relative_to(self.project_root)))
        
        found_secrets = False
        
        for file_path in files_to_check:
            full_path = self.project_root / file_path
            if not full_path.exists():
                continue
                
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    lines = content.split('\n')
                    
                    for line_num, line in enumerate(lines, 1):
                        for pattern in secret_patterns:
                            if re.search(pattern, line, re.IGNORECASE):
                                # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                                if not line.strip().startswith('#') and 'CHANGE_THIS' not in line:
                                    self.add_error(
                                        f"–ù–∞–π–¥–µ–Ω hardcoded —Å–µ–∫—Ä–µ—Ç: {line.strip()}",
                                        str(file_path),
                                        line_num
                                    )
                                    found_secrets = True
                                    
            except Exception as e:
                self.add_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        
        if not found_secrets:
            self.add_success("Hardcoded —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        else:
            return False
    
    def check_environment_variables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
        
        required_vars = [
            'SECRET_KEY',
            'DATABASE_URL',
            'REDIS_URL',
            'ENVIRONMENT',
            'DEBUG'
        ]
        
        optional_vars = [
            'STRIPE_SECRET_KEY',
            'STRIPE_PUBLISHABLE_KEY',
            'TELEGRAM_BOT_TOKEN',
            'BYBIT_API_KEY',
            'BINANCE_API_KEY'
        ]
        
        missing_required = []
        missing_optional = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_required.append(var)
            else:
                self.add_success(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        for var in optional_vars:
            if not os.getenv(var):
                missing_optional.append(var)
            else:
                self.add_success(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        if missing_required:
            for var in missing_required:
                self.add_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
            return False
        
        if missing_optional:
            for var in missing_optional:
                self.add_warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
        
        return True
    
    def check_debug_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ DEBUG"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö DEBUG")
        
        debug_value = os.getenv('DEBUG', 'false').lower()
        environment = os.getenv('ENVIRONMENT', 'development').lower()
        
        if environment == 'production' and debug_value in ['true', '1', 'yes']:
            self.add_error("DEBUG=True –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
            return False
        
        if environment == 'development' and debug_value in ['true', '1', 'yes']:
            self.add_warning("DEBUG=True –≤ development (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
        
        self.add_success(f"DEBUG –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è {environment}")
        return True
    
    def check_secret_key_strength(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã SECRET_KEY"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –°–ò–õ–´ SECRET_KEY")
        
        secret_key = os.getenv('SECRET_KEY', '')
        
        if not secret_key:
            self.add_error("SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        if len(secret_key) < 32:
            self.add_error(f"SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(secret_key)} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 32)")
            return False
        
        if 'CHANGE_THIS' in secret_key:
            self.add_error("SECRET_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –∑–Ω–∞—á–µ–Ω–∏–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        if len(set(secret_key)) < 16:
            self.add_warning("SECRET_KEY –∏–º–µ–µ—Ç –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤")
        
        self.add_success(f"SECRET_KEY —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ({len(secret_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return True
    
    def check_docker_security(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.print_step("–ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò DOCKER")
        
        docker_files = [
            'docker-compose.yml',
            'docker-compose.fixed.yml',
            'docker-compose.simple.yml'
        ]
        
        all_safe = True
        
        for docker_file in docker_files:
            file_path = self.project_root / docker_file
            if not file_path.exists():
                continue
                
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ hardcoded –ø–∞—Ä–æ–ª–∏
                    if 'postgres123' in content:
                        self.add_error(f"Hardcoded –ø–∞—Ä–æ–ª—å –≤ {docker_file}")
                        all_safe = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    if '${POSTGRES_PASSWORD}' in content or '${SECRET_KEY}' in content:
                        self.add_success(f"{docker_file} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    else:
                        self.add_warning(f"{docker_file} –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å hardcoded –∑–Ω–∞—á–µ–Ω–∏—è")
                        
            except Exception as e:
                self.add_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {docker_file}: {e}")
        
        return all_safe
    
    def generate_security_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.print_step("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        
        total_checks = len(self.passed) + len(self.warnings) + len(self.errors)
        passed_checks = len(self.passed)
        failed_checks = len(self.errors)
        warning_checks = len(self.warnings)
        
        security_score = (passed_checks / total_checks * 100) if total_checks > 0 else 0
        
        report = {
            "timestamp": "2025-01-13",
            "total_checks": total_checks,
            "passed_checks": passed_checks,
            "failed_checks": failed_checks,
            "warning_checks": warning_checks,
            "security_score": security_score,
            "status": "PASS" if failed_checks == 0 else "FAIL",
            "passed": self.passed,
            "warnings": self.warnings,
            "errors": self.errors
        }
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("=" * 50)
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}/{total_checks} ({security_score:.1f}%)")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_checks}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {failed_checks}")
        print(f"üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['status']}")
        
        if self.errors:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        
        return report
    
    def run_all_checks(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.print_header("CRYPTO ANALYTICS PLATFORM - –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("üéØ –ó–∞–¥–∞—á–∞ 0.5.3 - –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏")
        print("‚è±Ô∏è –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫
        checks = [
            ("Hardcoded Secrets", self.check_hardcoded_secrets),
            ("Environment Variables", self.check_environment_variables),
            ("Debug Settings", self.check_debug_settings),
            ("Secret Key Strength", self.check_secret_key_strength),
            ("Docker Security", self.check_docker_security)
        ]
        
        for check_name, check_func in checks:
            try:
                check_func()
            except Exception as e:
                self.add_error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {str(e)}")
        
        return self.generate_security_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    validator = SecurityValidator()
    
    try:
        report = validator.run_all_checks()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"security_audit_report_{report['timestamp']}.json"
        import json
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
        
        print("\n" + "=" * 80)
        if report['status'] == 'PASS':
            print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ó–∞–¥–∞—á–∞ 0.5.3 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ production deployment")
        print("=" * 80)
        
        return report['status'] == 'PASS'
        
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
