#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import requests
import json
import time
from datetime import datetime

def test_backend_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health endpoint backend"""
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend health check: OK")
            return True
        else:
            print(f"‚ùå Backend health check: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_ml_service_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health endpoint ML —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get("http://localhost:8001/api/v1/health/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ML Service health check: OK")
            return True
        else:
            print(f"‚ùå ML Service health check: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå ML Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_ml_predictions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML predictions API"""
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        response = requests.get("http://localhost:8001/api/v1/predictions/model/info", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ML Model info: OK")
            model_info = response.json()
            print(f"   üìä –ú–æ–¥–µ–ª—å: {model_info.get('model_name', 'Unknown')}")
            print(f"   üìà –í–µ—Ä—Å–∏—è: {model_info.get('model_version', 'Unknown')}")
        else:
            print(f"‚ùå ML Model info: {response.status_code}")
            
        # –¢–µ—Å—Ç price validation
        response = requests.get("http://localhost:8001/api/v1/price-validation/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Price Validation: OK")
        else:
            print(f"‚ùå Price Validation: {response.status_code}")
            
        return True
    except Exception as e:
        print(f"‚ùå ML API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False

def test_backend_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints backend"""
    base_url = "http://localhost:8000/api/v1"
    
    endpoints = [
        "/channels/",
        "/signals/",
        "/users/register",
        "/users/login"
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints:")
    
    for endpoint in endpoints:
        try:
            if endpoint in ["/users/register", "/users/login"]:
                # POST –∑–∞–ø—Ä–æ—Å—ã
                response = requests.post(f"{base_url}{endpoint}", 
                                       json={"test": "data"}, 
                                       timeout=5)
            else:
                # GET –∑–∞–ø—Ä–æ—Å—ã
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
            
            if response.status_code in [200, 422, 403]:  # 422 - –≤–∞–ª–∏–¥–∞—Ü–∏—è, 403 - –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                print(f"‚úÖ {endpoint}: {response.status_code}")
            else:
                print(f"‚ùå {endpoint}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ü–õ–ê–¢–§–û–†–ú–´")
    print("="*60)
    print(f"üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    backend_ok = test_backend_health()
    ml_ok = test_ml_service_health()
    
    if ml_ok:
        test_ml_predictions()
    
    if backend_ok:
        test_backend_api_endpoints()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "="*60)
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    
    if backend_ok and ml_ok:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –û–±–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ Backend: –î–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ ML Service: –î–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif backend_ok:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("‚úÖ Backend: –î–æ—Å—Ç—É–ø–µ–Ω")
        print("‚ùå ML Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    elif ml_ok:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("‚ùå Backend: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ ML Service: –î–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê")
        print("‚ùå Backend: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚ùå ML Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not backend_ok:
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload")
    if not ml_ok:
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ ML service: cd ml-service && python main.py")
    if backend_ok and ml_ok:
        print("   - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É frontend")
        print("   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    generate_test_report() 